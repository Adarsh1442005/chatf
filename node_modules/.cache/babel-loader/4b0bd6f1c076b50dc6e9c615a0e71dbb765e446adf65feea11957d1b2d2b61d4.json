{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createChildChannelControlHelper = createChildChannelControlHelper;\nexports.registerLoadBalancerType = registerLoadBalancerType;\nexports.registerDefaultLoadBalancerType = registerDefaultLoadBalancerType;\nexports.createLoadBalancer = createLoadBalancer;\nexports.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;\nexports.parseLoadBalancingConfig = parseLoadBalancingConfig;\nexports.getDefaultConfig = getDefaultConfig;\nexports.selectLbConfigFromList = selectLbConfigFromList;\nconst logging_1 = require(\"./logging\");\nconst constants_1 = require(\"./constants\");\n/**\n * Create a child ChannelControlHelper that overrides some methods of the\n * parent while letting others pass through to the parent unmodified. This\n * allows other code to create these children without needing to know about\n * all of the methods to be passed through.\n * @param parent\n * @param overrides\n */\nfunction createChildChannelControlHelper(parent, overrides) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n  return {\n    createSubchannel: (_b = (_a = overrides.createSubchannel) === null || _a === void 0 ? void 0 : _a.bind(overrides)) !== null && _b !== void 0 ? _b : parent.createSubchannel.bind(parent),\n    updateState: (_d = (_c = overrides.updateState) === null || _c === void 0 ? void 0 : _c.bind(overrides)) !== null && _d !== void 0 ? _d : parent.updateState.bind(parent),\n    requestReresolution: (_f = (_e = overrides.requestReresolution) === null || _e === void 0 ? void 0 : _e.bind(overrides)) !== null && _f !== void 0 ? _f : parent.requestReresolution.bind(parent),\n    addChannelzChild: (_h = (_g = overrides.addChannelzChild) === null || _g === void 0 ? void 0 : _g.bind(overrides)) !== null && _h !== void 0 ? _h : parent.addChannelzChild.bind(parent),\n    removeChannelzChild: (_k = (_j = overrides.removeChannelzChild) === null || _j === void 0 ? void 0 : _j.bind(overrides)) !== null && _k !== void 0 ? _k : parent.removeChannelzChild.bind(parent)\n  };\n}\nconst registeredLoadBalancerTypes = {};\nlet defaultLoadBalancerType = null;\nfunction registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {\n  registeredLoadBalancerTypes[typeName] = {\n    LoadBalancer: loadBalancerType,\n    LoadBalancingConfig: loadBalancingConfigType\n  };\n}\nfunction registerDefaultLoadBalancerType(typeName) {\n  defaultLoadBalancerType = typeName;\n}\nfunction createLoadBalancer(config, channelControlHelper) {\n  const typeName = config.getLoadBalancerName();\n  if (typeName in registeredLoadBalancerTypes) {\n    return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);\n  } else {\n    return null;\n  }\n}\nfunction isLoadBalancerNameRegistered(typeName) {\n  return typeName in registeredLoadBalancerTypes;\n}\nfunction parseLoadBalancingConfig(rawConfig) {\n  const keys = Object.keys(rawConfig);\n  if (keys.length !== 1) {\n    throw new Error('Provided load balancing config has multiple conflicting entries');\n  }\n  const typeName = keys[0];\n  if (typeName in registeredLoadBalancerTypes) {\n    try {\n      return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(rawConfig[typeName]);\n    } catch (e) {\n      throw new Error(`${typeName}: ${e.message}`);\n    }\n  } else {\n    throw new Error(`Unrecognized load balancing config name ${typeName}`);\n  }\n}\nfunction getDefaultConfig() {\n  if (!defaultLoadBalancerType) {\n    throw new Error('No default load balancer type registered');\n  }\n  return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();\n}\nfunction selectLbConfigFromList(configs, fallbackTodefault = false) {\n  for (const config of configs) {\n    try {\n      return parseLoadBalancingConfig(config);\n    } catch (e) {\n      (0, logging_1.log)(constants_1.LogVerbosity.DEBUG, 'Config parsing failed with error', e.message);\n      continue;\n    }\n  }\n  if (fallbackTodefault) {\n    if (defaultLoadBalancerType) {\n      return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}","map":{"version":3,"names":["exports","createChildChannelControlHelper","registerLoadBalancerType","registerDefaultLoadBalancerType","createLoadBalancer","isLoadBalancerNameRegistered","parseLoadBalancingConfig","getDefaultConfig","selectLbConfigFromList","logging_1","require","constants_1","parent","overrides","createSubchannel","_b","_a","bind","updateState","_d","_c","requestReresolution","_f","_e","addChannelzChild","_h","_g","removeChannelzChild","_k","_j","registeredLoadBalancerTypes","defaultLoadBalancerType","typeName","loadBalancerType","loadBalancingConfigType","LoadBalancer","LoadBalancingConfig","config","channelControlHelper","getLoadBalancerName","rawConfig","keys","Object","length","Error","createFromJson","e","message","configs","fallbackTodefault","log","LogVerbosity","DEBUG"],"sources":["C:\\Users\\BIT\\chatboot\\node_modules\\@grpc\\grpc-js\\src\\load-balancer.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { ChannelOptions } from './channel-options';\nimport { Endpoint, SubchannelAddress } from './subchannel-address';\nimport { ConnectivityState } from './connectivity-state';\nimport { Picker } from './picker';\nimport type { ChannelRef, SubchannelRef } from './channelz';\nimport { SubchannelInterface } from './subchannel-interface';\nimport { LoadBalancingConfig } from './service-config';\nimport { log } from './logging';\nimport { LogVerbosity } from './constants';\n\n/**\n * A collection of functions associated with a channel that a load balancer\n * can call as necessary.\n */\nexport interface ChannelControlHelper {\n  /**\n   * Returns a subchannel connected to the specified address.\n   * @param subchannelAddress The address to connect to\n   * @param subchannelArgs Channel arguments to use to construct the subchannel\n   */\n  createSubchannel(\n    subchannelAddress: SubchannelAddress,\n    subchannelArgs: ChannelOptions\n  ): SubchannelInterface;\n  /**\n   * Passes a new subchannel picker up to the channel. This is called if either\n   * the connectivity state changes or if a different picker is needed for any\n   * other reason.\n   * @param connectivityState New connectivity state\n   * @param picker New picker\n   */\n  updateState(\n    connectivityState: ConnectivityState,\n    picker: Picker,\n    errorMessage: string | null\n  ): void;\n  /**\n   * Request new data from the resolver.\n   */\n  requestReresolution(): void;\n  addChannelzChild(child: ChannelRef | SubchannelRef): void;\n  removeChannelzChild(child: ChannelRef | SubchannelRef): void;\n}\n\n/**\n * Create a child ChannelControlHelper that overrides some methods of the\n * parent while letting others pass through to the parent unmodified. This\n * allows other code to create these children without needing to know about\n * all of the methods to be passed through.\n * @param parent\n * @param overrides\n */\nexport function createChildChannelControlHelper(\n  parent: ChannelControlHelper,\n  overrides: Partial<ChannelControlHelper>\n): ChannelControlHelper {\n  return {\n    createSubchannel:\n      overrides.createSubchannel?.bind(overrides) ??\n      parent.createSubchannel.bind(parent),\n    updateState:\n      overrides.updateState?.bind(overrides) ?? parent.updateState.bind(parent),\n    requestReresolution:\n      overrides.requestReresolution?.bind(overrides) ??\n      parent.requestReresolution.bind(parent),\n    addChannelzChild:\n      overrides.addChannelzChild?.bind(overrides) ??\n      parent.addChannelzChild.bind(parent),\n    removeChannelzChild:\n      overrides.removeChannelzChild?.bind(overrides) ??\n      parent.removeChannelzChild.bind(parent),\n  };\n}\n\n/**\n * Tracks one or more connected subchannels and determines which subchannel\n * each request should use.\n */\nexport interface LoadBalancer {\n  /**\n   * Gives the load balancer a new list of addresses to start connecting to.\n   * The load balancer will start establishing connections with the new list,\n   * but will continue using any existing connections until the new connections\n   * are established\n   * @param endpointList The new list of addresses to connect to\n   * @param lbConfig The load balancing config object from the service config,\n   *     if one was provided\n   */\n  updateAddressList(\n    endpointList: Endpoint[],\n    lbConfig: TypedLoadBalancingConfig,\n    channelOptions: ChannelOptions\n  ): void;\n  /**\n   * If the load balancer is currently in the IDLE state, start connecting.\n   */\n  exitIdle(): void;\n  /**\n   * If the load balancer is currently in the CONNECTING or TRANSIENT_FAILURE\n   * state, reset the current connection backoff timeout to its base value and\n   * transition to CONNECTING if in TRANSIENT_FAILURE.\n   */\n  resetBackoff(): void;\n  /**\n   * The load balancer unrefs all of its subchannels and stops calling methods\n   * of its channel control helper.\n   */\n  destroy(): void;\n  /**\n   * Get the type name for this load balancer type. Must be constant across an\n   * entire load balancer implementation class and must match the name that the\n   * balancer implementation class was registered with.\n   */\n  getTypeName(): string;\n}\n\nexport interface LoadBalancerConstructor {\n  new (\n    channelControlHelper: ChannelControlHelper\n  ): LoadBalancer;\n}\n\nexport interface TypedLoadBalancingConfig {\n  getLoadBalancerName(): string;\n  toJsonObject(): object;\n}\n\nexport interface TypedLoadBalancingConfigConstructor {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any): TypedLoadBalancingConfig;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  createFromJson(obj: any): TypedLoadBalancingConfig;\n}\n\nconst registeredLoadBalancerTypes: {\n  [name: string]: {\n    LoadBalancer: LoadBalancerConstructor;\n    LoadBalancingConfig: TypedLoadBalancingConfigConstructor;\n  };\n} = {};\n\nlet defaultLoadBalancerType: string | null = null;\n\nexport function registerLoadBalancerType(\n  typeName: string,\n  loadBalancerType: LoadBalancerConstructor,\n  loadBalancingConfigType: TypedLoadBalancingConfigConstructor\n) {\n  registeredLoadBalancerTypes[typeName] = {\n    LoadBalancer: loadBalancerType,\n    LoadBalancingConfig: loadBalancingConfigType,\n  };\n}\n\nexport function registerDefaultLoadBalancerType(typeName: string) {\n  defaultLoadBalancerType = typeName;\n}\n\nexport function createLoadBalancer(\n  config: TypedLoadBalancingConfig,\n  channelControlHelper: ChannelControlHelper\n): LoadBalancer | null {\n  const typeName = config.getLoadBalancerName();\n  if (typeName in registeredLoadBalancerTypes) {\n    return new registeredLoadBalancerTypes[typeName].LoadBalancer(\n      channelControlHelper\n    );\n  } else {\n    return null;\n  }\n}\n\nexport function isLoadBalancerNameRegistered(typeName: string): boolean {\n  return typeName in registeredLoadBalancerTypes;\n}\n\nexport function parseLoadBalancingConfig(\n  rawConfig: LoadBalancingConfig\n): TypedLoadBalancingConfig {\n  const keys = Object.keys(rawConfig);\n  if (keys.length !== 1) {\n    throw new Error(\n      'Provided load balancing config has multiple conflicting entries'\n    );\n  }\n  const typeName = keys[0];\n  if (typeName in registeredLoadBalancerTypes) {\n    try {\n      return registeredLoadBalancerTypes[\n        typeName\n      ].LoadBalancingConfig.createFromJson(rawConfig[typeName]);\n    } catch (e) {\n      throw new Error(`${typeName}: ${(e as Error).message}`);\n    }\n  } else {\n    throw new Error(`Unrecognized load balancing config name ${typeName}`);\n  }\n}\n\nexport function getDefaultConfig() {\n  if (!defaultLoadBalancerType) {\n    throw new Error('No default load balancer type registered');\n  }\n  return new registeredLoadBalancerTypes[\n    defaultLoadBalancerType\n  ]!.LoadBalancingConfig();\n}\n\nexport function selectLbConfigFromList(\n  configs: LoadBalancingConfig[],\n  fallbackTodefault = false\n): TypedLoadBalancingConfig | null {\n  for (const config of configs) {\n    try {\n      return parseLoadBalancingConfig(config);\n    } catch (e) {\n      log(\n        LogVerbosity.DEBUG,\n        'Config parsing failed with error',\n        (e as Error).message\n      );\n      continue;\n    }\n  }\n  if (fallbackTodefault) {\n    if (defaultLoadBalancerType) {\n      return new registeredLoadBalancerTypes[\n        defaultLoadBalancerType\n      ]!.LoadBalancingConfig();\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}