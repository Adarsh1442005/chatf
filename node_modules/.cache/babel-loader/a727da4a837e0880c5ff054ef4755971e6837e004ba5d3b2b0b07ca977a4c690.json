{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StsCredentials = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst oauth2common_1 = require(\"./oauth2common\");\n/**\n * Implements the OAuth 2.0 token exchange based on\n * https://tools.ietf.org/html/rfc8693\n */\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n  #tokenExchangeEndpoint;\n  /**\n   * Initializes an STS credentials instance.\n   *\n   * @param options The STS credentials instance options. Passing an `tokenExchangeEndpoint` directly is **@DEPRECATED**.\n   * @param clientAuthentication **@DEPRECATED**. Provide a {@link StsCredentialsConstructionOptions `StsCredentialsConstructionOptions`} object in the first parameter instead.\n   */\n  constructor(options = {\n    tokenExchangeEndpoint: ''\n  },\n  /**\n   * @deprecated - provide a {@link StsCredentialsConstructionOptions `StsCredentialsConstructionOptions`} object in the first parameter instead\n   */\n  clientAuthentication) {\n    if (typeof options !== 'object' || options instanceof URL) {\n      options = {\n        tokenExchangeEndpoint: options,\n        clientAuthentication\n      };\n    }\n    super(options);\n    this.#tokenExchangeEndpoint = options.tokenExchangeEndpoint;\n  }\n  /**\n   * Exchanges the provided token for another type of token based on the\n   * rfc8693 spec.\n   * @param stsCredentialsOptions The token exchange options used to populate\n   *   the token exchange request.\n   * @param additionalHeaders Optional additional headers to pass along the\n   *   request.\n   * @param options Optional additional GCP-specific non-spec defined options\n   *   to send with the request.\n   *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\n   * @return A promise that resolves with the token exchange response containing\n   *   the requested token and its expiration time.\n   */\n  async exchangeToken(stsCredentialsOptions, headers, options) {\n    const values = {\n      grant_type: stsCredentialsOptions.grantType,\n      resource: stsCredentialsOptions.resource,\n      audience: stsCredentialsOptions.audience,\n      scope: stsCredentialsOptions.scope?.join(' '),\n      requested_token_type: stsCredentialsOptions.requestedTokenType,\n      subject_token: stsCredentialsOptions.subjectToken,\n      subject_token_type: stsCredentialsOptions.subjectTokenType,\n      actor_token: stsCredentialsOptions.actingParty?.actorToken,\n      actor_token_type: stsCredentialsOptions.actingParty?.actorTokenType,\n      // Non-standard GCP-specific options.\n      options: options && JSON.stringify(options)\n    };\n    // Keep defined fields.\n    const payload = {};\n    Object.entries(values).forEach(([key, value]) => {\n      if (value !== undefined) {\n        payload[key] = value;\n      }\n    });\n    const opts = {\n      ...StsCredentials.RETRY_CONFIG,\n      url: this.#tokenExchangeEndpoint.toString(),\n      method: 'POST',\n      headers,\n      data: new URLSearchParams(payload)\n    };\n    // Apply OAuth client authentication.\n    this.applyClientAuthenticationOptions(opts);\n    try {\n      const response = await this.transporter.request(opts);\n      // Successful response.\n      const stsSuccessfulResponse = response.data;\n      stsSuccessfulResponse.res = response;\n      return stsSuccessfulResponse;\n    } catch (error) {\n      // Translate error to OAuthError.\n      if (error instanceof gaxios_1.GaxiosError && error.response) {\n        throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data,\n        // Preserve other fields from the original error.\n        error);\n      }\n      // Request could fail before the server responds.\n      throw error;\n    }\n  }\n}\nexports.StsCredentials = StsCredentials;","map":{"version":3,"names":["Object","defineProperty","exports","value","StsCredentials","gaxios_1","require","oauth2common_1","OAuthClientAuthHandler","tokenExchangeEndpoint","constructor","options","clientAuthentication","URL","exchangeToken","stsCredentialsOptions","headers","values","grant_type","grantType","resource","audience","scope","join","requested_token_type","requestedTokenType","subject_token","subjectToken","subject_token_type","subjectTokenType","actor_token","actingParty","actorToken","actor_token_type","actorTokenType","JSON","stringify","payload","entries","forEach","key","undefined","opts","RETRY_CONFIG","url","toString","method","data","URLSearchParams","applyClientAuthenticationOptions","response","transporter","request","stsSuccessfulResponse","res","error","GaxiosError","getErrorFromOAuthErrorResponse"],"sources":["C:/Users/BIT/chatboot/node_modules/google-auth-library/build/src/auth/stscredentials.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StsCredentials = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst oauth2common_1 = require(\"./oauth2common\");\n/**\n * Implements the OAuth 2.0 token exchange based on\n * https://tools.ietf.org/html/rfc8693\n */\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n    #tokenExchangeEndpoint;\n    /**\n     * Initializes an STS credentials instance.\n     *\n     * @param options The STS credentials instance options. Passing an `tokenExchangeEndpoint` directly is **@DEPRECATED**.\n     * @param clientAuthentication **@DEPRECATED**. Provide a {@link StsCredentialsConstructionOptions `StsCredentialsConstructionOptions`} object in the first parameter instead.\n     */\n    constructor(options = {\n        tokenExchangeEndpoint: '',\n    }, \n    /**\n     * @deprecated - provide a {@link StsCredentialsConstructionOptions `StsCredentialsConstructionOptions`} object in the first parameter instead\n     */\n    clientAuthentication) {\n        if (typeof options !== 'object' || options instanceof URL) {\n            options = {\n                tokenExchangeEndpoint: options,\n                clientAuthentication,\n            };\n        }\n        super(options);\n        this.#tokenExchangeEndpoint = options.tokenExchangeEndpoint;\n    }\n    /**\n     * Exchanges the provided token for another type of token based on the\n     * rfc8693 spec.\n     * @param stsCredentialsOptions The token exchange options used to populate\n     *   the token exchange request.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @param options Optional additional GCP-specific non-spec defined options\n     *   to send with the request.\n     *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\n     * @return A promise that resolves with the token exchange response containing\n     *   the requested token and its expiration time.\n     */\n    async exchangeToken(stsCredentialsOptions, headers, options) {\n        const values = {\n            grant_type: stsCredentialsOptions.grantType,\n            resource: stsCredentialsOptions.resource,\n            audience: stsCredentialsOptions.audience,\n            scope: stsCredentialsOptions.scope?.join(' '),\n            requested_token_type: stsCredentialsOptions.requestedTokenType,\n            subject_token: stsCredentialsOptions.subjectToken,\n            subject_token_type: stsCredentialsOptions.subjectTokenType,\n            actor_token: stsCredentialsOptions.actingParty?.actorToken,\n            actor_token_type: stsCredentialsOptions.actingParty?.actorTokenType,\n            // Non-standard GCP-specific options.\n            options: options && JSON.stringify(options),\n        };\n        // Keep defined fields.\n        const payload = {};\n        Object.entries(values).forEach(([key, value]) => {\n            if (value !== undefined) {\n                payload[key] = value;\n            }\n        });\n        const opts = {\n            ...StsCredentials.RETRY_CONFIG,\n            url: this.#tokenExchangeEndpoint.toString(),\n            method: 'POST',\n            headers,\n            data: new URLSearchParams(payload),\n        };\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const stsSuccessfulResponse = response.data;\n            stsSuccessfulResponse.res = response;\n            return stsSuccessfulResponse;\n        }\n        catch (error) {\n            // Translate error to OAuthError.\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, \n                // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\nexports.StsCredentials = StsCredentials;\n//# sourceMappingURL=stscredentials.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}