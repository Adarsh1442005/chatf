{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RoundRobinLoadBalancer = void 0;\nexports.setup = setup;\nconst load_balancer_1 = require(\"./load-balancer\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst picker_1 = require(\"./picker\");\nconst logging = require(\"./logging\");\nconst constants_1 = require(\"./constants\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst load_balancer_pick_first_1 = require(\"./load-balancer-pick-first\");\nconst TRACER_NAME = 'round_robin';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = 'round_robin';\nclass RoundRobinLoadBalancingConfig {\n  getLoadBalancerName() {\n    return TYPE_NAME;\n  }\n  constructor() {}\n  toJsonObject() {\n    return {\n      [TYPE_NAME]: {}\n    };\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static createFromJson(obj) {\n    return new RoundRobinLoadBalancingConfig();\n  }\n}\nclass RoundRobinPicker {\n  constructor(children, nextIndex = 0) {\n    this.children = children;\n    this.nextIndex = nextIndex;\n  }\n  pick(pickArgs) {\n    const childPicker = this.children[this.nextIndex].picker;\n    this.nextIndex = (this.nextIndex + 1) % this.children.length;\n    return childPicker.pick(pickArgs);\n  }\n  /**\n   * Check what the next subchannel returned would be. Used by the load\n   * balancer implementation to preserve this part of the picker state if\n   * possible when a subchannel connects or disconnects.\n   */\n  peekNextEndpoint() {\n    return this.children[this.nextIndex].endpoint;\n  }\n}\nclass RoundRobinLoadBalancer {\n  constructor(channelControlHelper) {\n    this.channelControlHelper = channelControlHelper;\n    this.children = [];\n    this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n    this.currentReadyPicker = null;\n    this.updatesPaused = false;\n    this.lastError = null;\n    this.childChannelControlHelper = (0, load_balancer_1.createChildChannelControlHelper)(channelControlHelper, {\n      updateState: (connectivityState, picker, errorMessage) => {\n        /* Ensure that name resolution is requested again after active\n         * connections are dropped. This is more aggressive than necessary to\n         * accomplish that, so we are counting on resolvers to have\n         * reasonable rate limits. */\n        if (this.currentState === connectivity_state_1.ConnectivityState.READY && connectivityState !== connectivity_state_1.ConnectivityState.READY) {\n          this.channelControlHelper.requestReresolution();\n        }\n        if (errorMessage) {\n          this.lastError = errorMessage;\n        }\n        this.calculateAndUpdateState();\n      }\n    });\n  }\n  countChildrenWithState(state) {\n    return this.children.filter(child => child.getConnectivityState() === state).length;\n  }\n  calculateAndUpdateState() {\n    if (this.updatesPaused) {\n      return;\n    }\n    if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.READY) > 0) {\n      const readyChildren = this.children.filter(child => child.getConnectivityState() === connectivity_state_1.ConnectivityState.READY);\n      let index = 0;\n      if (this.currentReadyPicker !== null) {\n        const nextPickedEndpoint = this.currentReadyPicker.peekNextEndpoint();\n        index = readyChildren.findIndex(child => (0, subchannel_address_1.endpointEqual)(child.getEndpoint(), nextPickedEndpoint));\n        if (index < 0) {\n          index = 0;\n        }\n      }\n      this.updateState(connectivity_state_1.ConnectivityState.READY, new RoundRobinPicker(readyChildren.map(child => ({\n        endpoint: child.getEndpoint(),\n        picker: child.getPicker()\n      })), index), null);\n    } else if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.CONNECTING) > 0) {\n      this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this), null);\n    } else if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) > 0) {\n      const errorMessage = `round_robin: No connection established. Last error: ${this.lastError}`;\n      this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\n        details: errorMessage\n      }), errorMessage);\n    } else {\n      this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this), null);\n    }\n    /* round_robin should keep all children connected, this is how we do that.\n     * We can't do this more efficiently in the individual child's updateState\n     * callback because that doesn't have a reference to which child the state\n     * change is associated with. */\n    for (const child of this.children) {\n      if (child.getConnectivityState() === connectivity_state_1.ConnectivityState.IDLE) {\n        child.exitIdle();\n      }\n    }\n  }\n  updateState(newState, picker, errorMessage) {\n    trace(connectivity_state_1.ConnectivityState[this.currentState] + ' -> ' + connectivity_state_1.ConnectivityState[newState]);\n    if (newState === connectivity_state_1.ConnectivityState.READY) {\n      this.currentReadyPicker = picker;\n    } else {\n      this.currentReadyPicker = null;\n    }\n    this.currentState = newState;\n    this.channelControlHelper.updateState(newState, picker, errorMessage);\n  }\n  resetSubchannelList() {\n    for (const child of this.children) {\n      child.destroy();\n    }\n  }\n  updateAddressList(endpointList, lbConfig, options) {\n    this.resetSubchannelList();\n    trace('Connect to endpoint list ' + endpointList.map(subchannel_address_1.endpointToString));\n    this.updatesPaused = true;\n    this.children = endpointList.map(endpoint => new load_balancer_pick_first_1.LeafLoadBalancer(endpoint, this.childChannelControlHelper, options));\n    for (const child of this.children) {\n      child.startConnecting();\n    }\n    this.updatesPaused = false;\n    this.calculateAndUpdateState();\n  }\n  exitIdle() {\n    /* The round_robin LB policy is only in the IDLE state if it has no\n     * addresses to try to connect to and it has no picked subchannel.\n     * In that case, there is no meaningful action that can be taken here. */\n  }\n  resetBackoff() {\n    // This LB policy has no backoff to reset\n  }\n  destroy() {\n    this.resetSubchannelList();\n  }\n  getTypeName() {\n    return TYPE_NAME;\n  }\n}\nexports.RoundRobinLoadBalancer = RoundRobinLoadBalancer;\nfunction setup() {\n  (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);\n}","map":{"version":3,"names":["exports","setup","load_balancer_1","require","connectivity_state_1","picker_1","logging","constants_1","subchannel_address_1","load_balancer_pick_first_1","TRACER_NAME","trace","text","LogVerbosity","DEBUG","TYPE_NAME","RoundRobinLoadBalancingConfig","getLoadBalancerName","constructor","toJsonObject","createFromJson","obj","RoundRobinPicker","children","nextIndex","pick","pickArgs","childPicker","picker","length","peekNextEndpoint","endpoint","RoundRobinLoadBalancer","channelControlHelper","currentState","ConnectivityState","IDLE","currentReadyPicker","updatesPaused","lastError","childChannelControlHelper","createChildChannelControlHelper","updateState","connectivityState","errorMessage","READY","requestReresolution","calculateAndUpdateState","countChildrenWithState","state","filter","child","getConnectivityState","readyChildren","index","nextPickedEndpoint","findIndex","endpointEqual","getEndpoint","map","getPicker","CONNECTING","QueuePicker","TRANSIENT_FAILURE","UnavailablePicker","details","exitIdle","newState","resetSubchannelList","destroy","updateAddressList","endpointList","lbConfig","options","endpointToString","LeafLoadBalancer","startConnecting","resetBackoff","getTypeName","registerLoadBalancerType"],"sources":["C:\\Users\\BIT\\chatboot\\node_modules\\@grpc\\grpc-js\\src\\load-balancer-round-robin.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  LoadBalancer,\n  ChannelControlHelper,\n  TypedLoadBalancingConfig,\n  registerLoadBalancerType,\n  createChildChannelControlHelper,\n} from './load-balancer';\nimport { ConnectivityState } from './connectivity-state';\nimport {\n  QueuePicker,\n  Picker,\n  PickArgs,\n  UnavailablePicker,\n  PickResult,\n} from './picker';\nimport * as logging from './logging';\nimport { LogVerbosity } from './constants';\nimport {\n  Endpoint,\n  endpointEqual,\n  endpointToString,\n} from './subchannel-address';\nimport { LeafLoadBalancer } from './load-balancer-pick-first';\nimport { ChannelOptions } from './channel-options';\n\nconst TRACER_NAME = 'round_robin';\n\nfunction trace(text: string): void {\n  logging.trace(LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n\nconst TYPE_NAME = 'round_robin';\n\nclass RoundRobinLoadBalancingConfig implements TypedLoadBalancingConfig {\n  getLoadBalancerName(): string {\n    return TYPE_NAME;\n  }\n\n  constructor() {}\n\n  toJsonObject(): object {\n    return {\n      [TYPE_NAME]: {},\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static createFromJson(obj: any) {\n    return new RoundRobinLoadBalancingConfig();\n  }\n}\n\nclass RoundRobinPicker implements Picker {\n  constructor(\n    private readonly children: { endpoint: Endpoint; picker: Picker }[],\n    private nextIndex = 0\n  ) {}\n\n  pick(pickArgs: PickArgs): PickResult {\n    const childPicker = this.children[this.nextIndex].picker;\n    this.nextIndex = (this.nextIndex + 1) % this.children.length;\n    return childPicker.pick(pickArgs);\n  }\n\n  /**\n   * Check what the next subchannel returned would be. Used by the load\n   * balancer implementation to preserve this part of the picker state if\n   * possible when a subchannel connects or disconnects.\n   */\n  peekNextEndpoint(): Endpoint {\n    return this.children[this.nextIndex].endpoint;\n  }\n}\n\nexport class RoundRobinLoadBalancer implements LoadBalancer {\n  private children: LeafLoadBalancer[] = [];\n\n  private currentState: ConnectivityState = ConnectivityState.IDLE;\n\n  private currentReadyPicker: RoundRobinPicker | null = null;\n\n  private updatesPaused = false;\n\n  private childChannelControlHelper: ChannelControlHelper;\n\n  private lastError: string | null = null;\n\n  constructor(\n    private readonly channelControlHelper: ChannelControlHelper\n  ) {\n    this.childChannelControlHelper = createChildChannelControlHelper(\n      channelControlHelper,\n      {\n        updateState: (connectivityState, picker, errorMessage) => {\n          /* Ensure that name resolution is requested again after active\n           * connections are dropped. This is more aggressive than necessary to\n           * accomplish that, so we are counting on resolvers to have\n           * reasonable rate limits. */\n          if (this.currentState === ConnectivityState.READY && connectivityState !== ConnectivityState.READY) {\n            this.channelControlHelper.requestReresolution();\n          }\n          if (errorMessage) {\n            this.lastError = errorMessage;\n          }\n          this.calculateAndUpdateState();\n        },\n      }\n    );\n  }\n\n  private countChildrenWithState(state: ConnectivityState) {\n    return this.children.filter(child => child.getConnectivityState() === state)\n      .length;\n  }\n\n  private calculateAndUpdateState() {\n    if (this.updatesPaused) {\n      return;\n    }\n    if (this.countChildrenWithState(ConnectivityState.READY) > 0) {\n      const readyChildren = this.children.filter(\n        child => child.getConnectivityState() === ConnectivityState.READY\n      );\n      let index = 0;\n      if (this.currentReadyPicker !== null) {\n        const nextPickedEndpoint = this.currentReadyPicker.peekNextEndpoint();\n        index = readyChildren.findIndex(child =>\n          endpointEqual(child.getEndpoint(), nextPickedEndpoint)\n        );\n        if (index < 0) {\n          index = 0;\n        }\n      }\n      this.updateState(\n        ConnectivityState.READY,\n        new RoundRobinPicker(\n          readyChildren.map(child => ({\n            endpoint: child.getEndpoint(),\n            picker: child.getPicker(),\n          })),\n          index\n        ),\n        null\n      );\n    } else if (this.countChildrenWithState(ConnectivityState.CONNECTING) > 0) {\n      this.updateState(ConnectivityState.CONNECTING, new QueuePicker(this), null);\n    } else if (\n      this.countChildrenWithState(ConnectivityState.TRANSIENT_FAILURE) > 0\n    ) {\n      const errorMessage = `round_robin: No connection established. Last error: ${this.lastError}`;\n      this.updateState(\n        ConnectivityState.TRANSIENT_FAILURE,\n        new UnavailablePicker({\n          details: errorMessage,\n        }),\n        errorMessage\n      );\n    } else {\n      this.updateState(ConnectivityState.IDLE, new QueuePicker(this), null);\n    }\n    /* round_robin should keep all children connected, this is how we do that.\n     * We can't do this more efficiently in the individual child's updateState\n     * callback because that doesn't have a reference to which child the state\n     * change is associated with. */\n    for (const child of this.children) {\n      if (child.getConnectivityState() === ConnectivityState.IDLE) {\n        child.exitIdle();\n      }\n    }\n  }\n\n  private updateState(newState: ConnectivityState, picker: Picker, errorMessage: string | null) {\n    trace(\n      ConnectivityState[this.currentState] +\n        ' -> ' +\n        ConnectivityState[newState]\n    );\n    if (newState === ConnectivityState.READY) {\n      this.currentReadyPicker = picker as RoundRobinPicker;\n    } else {\n      this.currentReadyPicker = null;\n    }\n    this.currentState = newState;\n    this.channelControlHelper.updateState(newState, picker, errorMessage);\n  }\n\n  private resetSubchannelList() {\n    for (const child of this.children) {\n      child.destroy();\n    }\n  }\n\n  updateAddressList(\n    endpointList: Endpoint[],\n    lbConfig: TypedLoadBalancingConfig,\n    options: ChannelOptions\n  ): void {\n    this.resetSubchannelList();\n    trace('Connect to endpoint list ' + endpointList.map(endpointToString));\n    this.updatesPaused = true;\n    this.children = endpointList.map(\n      endpoint =>\n        new LeafLoadBalancer(\n          endpoint,\n          this.childChannelControlHelper,\n          options\n        )\n    );\n    for (const child of this.children) {\n      child.startConnecting();\n    }\n    this.updatesPaused = false;\n    this.calculateAndUpdateState();\n  }\n\n  exitIdle(): void {\n    /* The round_robin LB policy is only in the IDLE state if it has no\n     * addresses to try to connect to and it has no picked subchannel.\n     * In that case, there is no meaningful action that can be taken here. */\n  }\n  resetBackoff(): void {\n    // This LB policy has no backoff to reset\n  }\n  destroy(): void {\n    this.resetSubchannelList();\n  }\n  getTypeName(): string {\n    return TYPE_NAME;\n  }\n}\n\nexport function setup() {\n  registerLoadBalancerType(\n    TYPE_NAME,\n    RoundRobinLoadBalancer,\n    RoundRobinLoadBalancingConfig\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}