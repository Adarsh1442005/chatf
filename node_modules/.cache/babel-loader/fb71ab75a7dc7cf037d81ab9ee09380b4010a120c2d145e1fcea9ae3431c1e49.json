{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function () {\n  var ownKeys = function (o) {\n    ownKeys = Object.getOwnPropertyNames || function (o) {\n      var ar = [];\n      for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n      return ar;\n    };\n    return ownKeys(o);\n  };\n  return function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OperationsClientBuilder = exports.OperationsClient = exports.ALL_SCOPES = exports.SERVICE_ADDRESS = void 0;\nconst createApiCall_1 = require(\"./createApiCall\");\nconst descriptor_1 = require(\"./descriptor\");\nconst gax = __importStar(require(\"./gax\"));\nconst configData = require(\"./operations_client_config.json\");\nconst operationProtoJson = require(\"../protos/operations.json\");\nconst transcoding_1 = require(\"./transcoding\");\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\nconst version = require('../../package.json').version;\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\nexports.ALL_SCOPES = [];\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\nclass OperationsClient {\n  auth;\n  innerApiCalls;\n  descriptor;\n  operationsStub;\n  constructor(gaxGrpc,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  operationsProtos, options) {\n    const opts = Object.assign({\n      servicePath: exports.SERVICE_ADDRESS,\n      port: DEFAULT_SERVICE_PORT,\n      clientConfig: {}\n    }, options);\n    const googleApiClient = ['gl-node/' + process.versions.node];\n    if (opts.libName && opts.libVersion) {\n      googleApiClient.push(opts.libName + '/' + opts.libVersion);\n    }\n    googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + version);\n    if (opts.fallback) {\n      googleApiClient.push('gl-web/' + version);\n    } else {\n      googleApiClient.push('grpc/' + gaxGrpc.grpcVersion);\n    }\n    const defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig || {}, {\n      'x-goog-api-client': googleApiClient.join(' ')\n    });\n    this.auth = gaxGrpc.auth;\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this.innerApiCalls = {};\n    this.descriptor = {\n      listOperations: new descriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'operations')\n    };\n    // Put together the \"service stub\" for\n    // google.longrunning.Operations.\n    this.operationsStub = gaxGrpc.createStub(opts.fallback ? operationsProtos.lookupService('google.longrunning.Operations') : operationsProtos.google.longrunning.Operations, opts);\n    const operationsStubMethods = ['getOperation', 'listOperations', 'cancelOperation', 'deleteOperation'];\n    for (const methodName of operationsStubMethods) {\n      const innerCallPromise = this.operationsStub.then(stub => (...args) => {\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, defaults[methodName], this.descriptor[methodName]);\n    }\n  }\n  /** Closes this operations client. */\n  close() {\n    this.operationsStub.then(stub => stub.close()).catch(console.error);\n  }\n  getProjectId(callback) {\n    if (this.auth && 'getProjectId' in this.auth) {\n      return this.auth.getProjectId(callback);\n    }\n    if (callback) {\n      callback(new Error('Cannot determine project ID.'));\n    } else {\n      return Promise.reject('Cannot determine project ID.');\n    }\n  }\n  // Service calls\n  getOperationInternal(request, options, callback) {\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.getOperation(request, options, callback);\n  }\n  /**\n   * Gets the latest state of a long-running operation.  Clients can use this\n   * method to poll the operation result at intervals as recommended by the API\n   * service.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @param {function(?Error, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}. The promise has a method named\n   * \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const name = '';\n   * const [response] = await client.getOperation({name});\n   * // doThingsWith(response)\n   */\n  getOperation(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.getOperation(request, options, callback);\n  }\n  /**\n   * Lists operations that match the specified filter in the request. If the\n   * server doesn't support this method, it returns `UNIMPLEMENTED`.\n   *\n   * NOTE: the `name` binding below allows API services to override the binding\n   * to use different resource name schemes.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the\n   * result in a single response. If the response indicates the next page\n   * exists, the third parameter is set to be used for the next request object.\n   * The fourth parameter keeps the raw response object of an object\n   * representing [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, the array has\n   * three elements. The first element is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"} in a single response. The second\n   * element is the next request object if the response indicates the next page\n   * exists, or null. The third element is an object representing\n   * [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *     name: '',\n   *     filter: ''\n   * };\n   * // Iterate over all elements.\n   * const [resources] = await client.listOperations(request);\n   * for (const resource of resources) {\n   *   console.log(resources);\n   * }\n   *\n   * // Or obtain the paged response.\n   * const options = {autoPaginate: false};\n   * let nextRequest = request;\n   * while(nextRequest) {\n   *   const response = await client.listOperations(nextRequest, options);\n   *   const resources = response[0];\n   *   nextRequest = response[1];\n   *   const rawResponse = response[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   * };\n   */\n  listOperations(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.listOperations(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listOperations} continuously\n   * and invokes the callback registered for 'data' event for each element in\n   * the responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize -\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *   name: '',\n   *   filter: ''\n   * };\n   * client.listOperationsStream(request)\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   })\n   *   .on('error', err => {\n   *     console.error(err);\n   *   });\n   */\n  listOperationsStream(request, options) {\n    const callSettings = new gax.CallSettings(options);\n    return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);\n  }\n  /**\n   * Equivalent to {@link listOperations}, but returns an iterable object.\n   *\n   * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize -\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @returns {Object}\n   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n   */\n  listOperationsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);\n  }\n  /**\n   * Starts asynchronous cancellation on a long-running operation.  The server\n   * makes a best effort to cancel the operation, but success is not\n   * guaranteed.  If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n   * {@link Operations.GetOperation} or\n   * other methods to check whether the cancellation succeeded or whether the\n   * operation completed despite cancellation. On successful cancellation,\n   * the operation is not deleted; instead, it becomes an operation with\n   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n   * 1, corresponding to `Code.CANCELLED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be cancelled.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.cancelOperation({name: ''});\n   */\n  cancelOperation(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.cancelOperation(request, options, callback);\n  }\n  /**\n   * Deletes a long-running operation. This method indicates that the client is\n   * no longer interested in the operation result. It does not cancel the\n   * operation. If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be deleted.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.deleteOperation({name: ''});\n   */\n  deleteOperation(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.deleteOperation(request, options, callback);\n  }\n}\nexports.OperationsClient = OperationsClient;\nclass OperationsClientBuilder {\n  operationsClient;\n  /**\n   * Builds a new Operations Client\n   * @param gaxGrpc {GrpcClient}\n   */\n  constructor(gaxGrpc, protoJson) {\n    if (protoJson && gaxGrpc.httpRules) {\n      // overwrite the http rules if provide in service yaml.\n      (0, transcoding_1.overrideHttpRules)(gaxGrpc.httpRules, protoJson);\n    }\n    const operationsProtos = protoJson ?? gaxGrpc.loadProtoJSON(operationProtoJson);\n    /**\n     * Build a new instance of {@link OperationsClient}.\n     *\n     * @param {Object=} opts - The optional parameters.\n     * @param {String=} opts.servicePath - Domain name of the API remote host.\n     * @param {number=} opts.port - The port on which to connect to the remote host.\n     * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n     * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n     */\n    this.operationsClient = opts => {\n      if (gaxGrpc.fallback) {\n        opts.fallback = gaxGrpc.fallback;\n      }\n      return new OperationsClient(gaxGrpc, operationsProtos, opts);\n    };\n    Object.assign(this.operationsClient, OperationsClient);\n  }\n}\nexports.OperationsClientBuilder = OperationsClientBuilder;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","ownKeys","getOwnPropertyNames","ar","prototype","hasOwnProperty","call","length","mod","result","i","exports","OperationsClientBuilder","OperationsClient","ALL_SCOPES","SERVICE_ADDRESS","createApiCall_1","require","descriptor_1","gax","configData","operationProtoJson","transcoding_1","version","DEFAULT_SERVICE_PORT","CODE_GEN_NAME_VERSION","auth","innerApiCalls","descriptor","operationsStub","constructor","gaxGrpc","operationsProtos","options","opts","assign","servicePath","port","clientConfig","googleApiClient","process","versions","node","libName","libVersion","push","fallback","grpcVersion","defaults","constructSettings","join","listOperations","PageDescriptor","createStub","lookupService","google","longrunning","Operations","operationsStubMethods","methodName","innerCallPromise","then","stub","args","func","apply","err","createApiCall","close","catch","console","error","getProjectId","callback","Error","Promise","reject","getOperationInternal","request","getOperation","optionsOrCallback","Function","listOperationsStream","callSettings","CallSettings","createStream","listOperationsAsync","asyncIterate","cancelOperation","deleteOperation","operationsClient","protoJson","httpRules","overrideHttpRules","loadProtoJSON"],"sources":["C:/Users/BIT/chatboot/node_modules/google-gax/build/src/operationsClient.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OperationsClientBuilder = exports.OperationsClient = exports.ALL_SCOPES = exports.SERVICE_ADDRESS = void 0;\nconst createApiCall_1 = require(\"./createApiCall\");\nconst descriptor_1 = require(\"./descriptor\");\nconst gax = __importStar(require(\"./gax\"));\nconst configData = require(\"./operations_client_config.json\");\nconst operationProtoJson = require(\"../protos/operations.json\");\nconst transcoding_1 = require(\"./transcoding\");\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\nconst version = require('../../package.json').version;\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\nexports.ALL_SCOPES = [];\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\nclass OperationsClient {\n    auth;\n    innerApiCalls;\n    descriptor;\n    operationsStub;\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    operationsProtos, options) {\n        const opts = Object.assign({\n            servicePath: exports.SERVICE_ADDRESS,\n            port: DEFAULT_SERVICE_PORT,\n            clientConfig: {},\n        }, options);\n        const googleApiClient = ['gl-node/' + process.versions.node];\n        if (opts.libName && opts.libVersion) {\n            googleApiClient.push(opts.libName + '/' + opts.libVersion);\n        }\n        googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + version);\n        if (opts.fallback) {\n            googleApiClient.push('gl-web/' + version);\n        }\n        else {\n            googleApiClient.push('grpc/' + gaxGrpc.grpcVersion);\n        }\n        const defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig || {}, { 'x-goog-api-client': googleApiClient.join(' ') });\n        this.auth = gaxGrpc.auth;\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        this.descriptor = {\n            listOperations: new descriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'operations'),\n        };\n        // Put together the \"service stub\" for\n        // google.longrunning.Operations.\n        this.operationsStub = gaxGrpc.createStub(opts.fallback\n            ? operationsProtos.lookupService('google.longrunning.Operations')\n            : operationsProtos.google.longrunning.Operations, opts);\n        const operationsStubMethods = [\n            'getOperation',\n            'listOperations',\n            'cancelOperation',\n            'deleteOperation',\n        ];\n        for (const methodName of operationsStubMethods) {\n            const innerCallPromise = this.operationsStub.then(stub => (...args) => {\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, err => () => {\n                throw err;\n            });\n            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, defaults[methodName], this.descriptor[methodName]);\n        }\n    }\n    /** Closes this operations client. */\n    close() {\n        this.operationsStub.then(stub => stub.close()).catch(console.error);\n    }\n    getProjectId(callback) {\n        if (this.auth && 'getProjectId' in this.auth) {\n            return this.auth.getProjectId(callback);\n        }\n        if (callback) {\n            callback(new Error('Cannot determine project ID.'));\n        }\n        else {\n            return Promise.reject('Cannot determine project ID.');\n        }\n    }\n    // Service calls\n    getOperationInternal(request, options, callback) {\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Gets the latest state of a long-running operation.  Clients can use this\n     * method to poll the operation result at intervals as recommended by the API\n     * service.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @param {function(?Error, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}. The promise has a method named\n     * \"cancel\" which cancels the ongoing API call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const name = '';\n     * const [response] = await client.getOperation({name});\n     * // doThingsWith(response)\n     */\n    getOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Lists operations that match the specified filter in the request. If the\n     * server doesn't support this method, it returns `UNIMPLEMENTED`.\n     *\n     * NOTE: the `name` binding below allows API services to override the binding\n     * to use different resource name schemes.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, it contains the\n     * result in a single response. If the response indicates the next page\n     * exists, the third parameter is set to be used for the next request object.\n     * The fourth parameter keeps the raw response object of an object\n     * representing [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, the array has\n     * three elements. The first element is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"} in a single response. The second\n     * element is the next request object if the response indicates the next page\n     * exists, or null. The third element is an object representing\n     * [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *     name: '',\n     *     filter: ''\n     * };\n     * // Iterate over all elements.\n     * const [resources] = await client.listOperations(request);\n     * for (const resource of resources) {\n     *   console.log(resources);\n     * }\n     *\n     * // Or obtain the paged response.\n     * const options = {autoPaginate: false};\n     * let nextRequest = request;\n     * while(nextRequest) {\n     *   const response = await client.listOperations(nextRequest, options);\n     *   const resources = response[0];\n     *   nextRequest = response[1];\n     *   const rawResponse = response[2];\n     *   for (const resource of resources) {\n     *     // doThingsWith(resource);\n     *   }\n     * };\n     */\n    listOperations(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.listOperations(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listOperations} continuously\n     * and invokes the callback registered for 'data' event for each element in\n     * the responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *   name: '',\n     *   filter: ''\n     * };\n     * client.listOperationsStream(request)\n     *   .on('data', element => {\n     *     // doThingsWith(element)\n     *   })\n     *   .on('error', err => {\n     *     console.error(err);\n     *   });\n     */\n    listOperationsStream(request, options) {\n        const callSettings = new gax.CallSettings(options);\n        return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n    listOperationsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Starts asynchronous cancellation on a long-running operation.  The server\n     * makes a best effort to cancel the operation, but success is not\n     * guaranteed.  If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n     * {@link Operations.GetOperation} or\n     * other methods to check whether the cancellation succeeded or whether the\n     * operation completed despite cancellation. On successful cancellation,\n     * the operation is not deleted; instead, it becomes an operation with\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n     * 1, corresponding to `Code.CANCELLED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be cancelled.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.cancelOperation({name: ''});\n     */\n    cancelOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.cancelOperation(request, options, callback);\n    }\n    /**\n     * Deletes a long-running operation. This method indicates that the client is\n     * no longer interested in the operation result. It does not cancel the\n     * operation. If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be deleted.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.deleteOperation({name: ''});\n     */\n    deleteOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.deleteOperation(request, options, callback);\n    }\n}\nexports.OperationsClient = OperationsClient;\nclass OperationsClientBuilder {\n    operationsClient;\n    /**\n     * Builds a new Operations Client\n     * @param gaxGrpc {GrpcClient}\n     */\n    constructor(gaxGrpc, protoJson) {\n        if (protoJson && gaxGrpc.httpRules) {\n            // overwrite the http rules if provide in service yaml.\n            (0, transcoding_1.overrideHttpRules)(gaxGrpc.httpRules, protoJson);\n        }\n        const operationsProtos = protoJson ?? gaxGrpc.loadProtoJSON(operationProtoJson);\n        /**\n         * Build a new instance of {@link OperationsClient}.\n         *\n         * @param {Object=} opts - The optional parameters.\n         * @param {String=} opts.servicePath - Domain name of the API remote host.\n         * @param {number=} opts.port - The port on which to connect to the remote host.\n         * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n         * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n         */\n        this.operationsClient = opts => {\n            if (gaxGrpc.fallback) {\n                opts.fallback = gaxGrpc.fallback;\n            }\n            return new OperationsClient(gaxGrpc, operationsProtos, opts);\n        };\n        Object.assign(this.operationsClient, OperationsClient);\n    }\n}\nexports.OperationsClientBuilder = OperationsClientBuilder;\n//# sourceMappingURL=operationsClient.js.map"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACItB,cAAcA,CAAC2B,OAAO,EAAEE,iBAAiB,EAAEP,QAAQ,EAAE;IACjD,IAAIxC,OAAO;IACX,IAAI+C,iBAAiB,YAAYC,QAAQ,IAAIR,QAAQ,KAAKrF,SAAS,EAAE;MACjEqF,QAAQ,GAAGO,iBAAiB;MAC5B/C,OAAO,GAAG,CAAC,CAAC;IAChB,CAAC,MACI;MACDA,OAAO,GAAG+C,iBAAiB;IAC/B;IACAF,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB7C,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,OAAO,IAAI,CAACN,aAAa,CAACwB,cAAc,CAAC2B,OAAO,EAAE7C,OAAO,EAAEwC,QAAQ,CAAC;EACxE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIS,oBAAoBA,CAACJ,OAAO,EAAE7C,OAAO,EAAE;IACnC,MAAMkD,YAAY,GAAG,IAAIhE,GAAG,CAACiE,YAAY,CAACnD,OAAO,CAAC;IAClD,OAAO,IAAI,CAACL,UAAU,CAACuB,cAAc,CAACkC,YAAY,CAAC,IAAI,CAAC1D,aAAa,CAACwB,cAAc,EAAE2B,OAAO,EAAEK,YAAY,CAAC;EAChH;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,mBAAmBA,CAACR,OAAO,EAAE7C,OAAO,EAAE;IAClC6C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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}