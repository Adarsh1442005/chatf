{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toProto3JSON = toProto3JSON;\nconst any_1 = require(\"./any\");\nconst bytes_1 = require(\"./bytes\");\nconst util_1 = require(\"./util\");\nconst enum_1 = require(\"./enum\");\nconst value_1 = require(\"./value\");\nconst duration_1 = require(\"./duration\");\nconst timestamp_1 = require(\"./timestamp\");\nconst wrappers_1 = require(\"./wrappers\");\nconst fieldmask_1 = require(\"./fieldmask\");\n// Convert a single value, which might happen to be an instance of Long, to JSONValue\nfunction convertSingleValue(value) {\n  if (typeof value === 'object') {\n    if (value?.constructor?.name === 'Long') {\n      return value.toString();\n    }\n    throw new Error(`toProto3JSON: don't know how to convert value ${value}`);\n  }\n  return value;\n}\nfunction toProto3JSON(obj, options) {\n  const objType = obj.$type;\n  if (!objType) {\n    throw new Error('Cannot serialize object to proto3 JSON since its .$type is unknown. Use Type.fromObject(obj) before calling toProto3JSON.');\n  }\n  objType.resolveAll();\n  const typeName = (0, util_1.getFullyQualifiedTypeName)(objType);\n  // Types that require special handling according to\n  // https://developers.google.com/protocol-buffers/docs/proto3#json\n  if (typeName === '.google.protobuf.Any') {\n    return (0, any_1.googleProtobufAnyToProto3JSON)(obj, options);\n  }\n  if (typeName === '.google.protobuf.Value') {\n    return (0, value_1.googleProtobufValueToProto3JSON)(obj);\n  }\n  if (typeName === '.google.protobuf.Struct') {\n    return (0, value_1.googleProtobufStructToProto3JSON)(obj);\n  }\n  if (typeName === '.google.protobuf.ListValue') {\n    return (0, value_1.googleProtobufListValueToProto3JSON)(obj);\n  }\n  if (typeName === '.google.protobuf.Duration') {\n    return (0, duration_1.googleProtobufDurationToProto3JSON)(obj);\n  }\n  if (typeName === '.google.protobuf.Timestamp') {\n    return (0, timestamp_1.googleProtobufTimestampToProto3JSON)(obj);\n  }\n  if (typeName === '.google.protobuf.FieldMask') {\n    return (0, fieldmask_1.googleProtobufFieldMaskToProto3JSON)(obj);\n  }\n  if (util_1.wrapperTypes.has(typeName)) {\n    return (0, wrappers_1.wrapperToProto3JSON)(obj);\n  }\n  const result = {};\n  for (const [key, value] of Object.entries(obj)) {\n    const field = objType.fields[key];\n    const fieldResolvedType = field.resolvedType;\n    const fieldFullyQualifiedTypeName = fieldResolvedType ? (0, util_1.getFullyQualifiedTypeName)(fieldResolvedType) : null;\n    if (value === null) {\n      result[key] = null;\n      continue;\n    }\n    if (Array.isArray(value)) {\n      if (value.length === 0) {\n        // ignore repeated fields with no values\n        continue;\n      }\n      // if the repeated value has a complex type, convert it to proto3 JSON, otherwise use as is\n      result[key] = value.map(fieldResolvedType ? element => {\n        return toProto3JSON(element, options);\n      } : convertSingleValue);\n      continue;\n    }\n    if (field.map) {\n      const map = {};\n      for (const [mapKey, mapValue] of Object.entries(value)) {\n        // if the map value has a complex type, convert it to proto3 JSON, otherwise use as is\n        map[mapKey] = fieldResolvedType ? toProto3JSON(mapValue, options) : convertSingleValue(mapValue);\n      }\n      result[key] = map;\n      continue;\n    }\n    if (fieldFullyQualifiedTypeName === '.google.protobuf.NullValue') {\n      result[key] = null;\n      continue;\n    }\n    if (fieldResolvedType && 'values' in fieldResolvedType && value !== null) {\n      if (options?.numericEnums) {\n        result[key] = (0, enum_1.resolveEnumValueToNumber)(fieldResolvedType, value);\n      } else {\n        result[key] = (0, enum_1.resolveEnumValueToString)(fieldResolvedType, value);\n      }\n      continue;\n    }\n    if (fieldResolvedType) {\n      result[key] = toProto3JSON(value, options);\n      continue;\n    }\n    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean' || value === null) {\n      if (typeof value === 'number' && !Number.isFinite(value)) {\n        result[key] = value.toString();\n        continue;\n      }\n      result[key] = value;\n      continue;\n    }\n    if (Buffer.isBuffer(value) || value instanceof Uint8Array) {\n      result[key] = (0, bytes_1.bytesToProto3JSON)(value);\n      continue;\n    }\n    result[key] = convertSingleValue(value);\n    continue;\n  }\n  return result;\n}","map":{"version":3,"names":["exports","toProto3JSON","any_1","require","bytes_1","util_1","enum_1","value_1","duration_1","timestamp_1","wrappers_1","fieldmask_1","convertSingleValue","value","constructor","name","toString","Error","obj","options","objType","$type","resolveAll","typeName","getFullyQualifiedTypeName","googleProtobufAnyToProto3JSON","googleProtobufValueToProto3JSON","googleProtobufStructToProto3JSON","googleProtobufListValueToProto3JSON","googleProtobufDurationToProto3JSON","googleProtobufTimestampToProto3JSON","googleProtobufFieldMaskToProto3JSON","wrapperTypes","has","wrapperToProto3JSON","result","key","Object","entries","field","fields","fieldResolvedType","resolvedType","fieldFullyQualifiedTypeName","Array","isArray","length","map","element","mapKey","mapValue","numericEnums","resolveEnumValueToNumber","resolveEnumValueToString","Number","isFinite","Buffer","isBuffer","Uint8Array","bytesToProto3JSON"],"sources":["../../typescript/src/toproto3json.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}