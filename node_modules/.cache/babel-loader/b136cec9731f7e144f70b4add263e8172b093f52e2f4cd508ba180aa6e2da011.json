{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIT\\\\chatboot\\\\src\\\\chatboot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { SessionsClient } from '@google-cloud/dialogflow'; // Import Dialogflow's SessionsClient\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatbotApp = () => {\n  _s();\n  const [userMessage, setUserMessage] = useState('');\n  const [botResponse, setBotResponse] = useState('');\n\n  // Function to send the user input to Dialogflow and get the response\n  const handleSendMessage = async () => {\n    const sessionClient = new SessionsClient({\n      keyFilename: 'path-to-your-service-account-key.json' // Path to your JSON file\n    });\n    const sessionId = '123456'; // Replace with a unique session ID\n    const sessionPath = sessionClient.projectAgentSessionPath('our-shift-452817-q9',\n    // Replace with your Dialogflow project ID\n    sessionId);\n    const request = {\n      session: sessionPath,\n      queryInput: {\n        text: {\n          text: userMessage,\n          languageCode: 'en'\n        }\n      }\n    };\n    try {\n      const responses = await sessionClient.detectIntent(request);\n      setBotResponse(responses[0].queryResult.fulfillmentText); // Update state with the response\n    } catch (error) {\n      console.error('Error fetching response from Dialogflow:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chatbot App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userMessage,\n      onChange: e => setUserMessage(e.target.value),\n      placeholder: \"Type your message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Bot Response: \", botResponse]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatbotApp, \"DICP3s1RinSn/Sis5nFlTxA3sJc=\");\n_c = ChatbotApp;\nexport default ChatbotApp;\nvar _c;\n$RefreshReg$(_c, \"ChatbotApp\");","map":{"version":3,"names":["React","useState","SessionsClient","jsxDEV","_jsxDEV","ChatbotApp","_s","userMessage","setUserMessage","botResponse","setBotResponse","handleSendMessage","sessionClient","keyFilename","sessionId","sessionPath","projectAgentSessionPath","request","session","queryInput","text","languageCode","responses","detectIntent","queryResult","fulfillmentText","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/BIT/chatboot/src/chatboot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { SessionsClient } from '@google-cloud/dialogflow'; // Import Dialogflow's SessionsClient\r\n\r\nconst ChatbotApp = () => {\r\n  const [userMessage, setUserMessage] = useState('');\r\n  const [botResponse, setBotResponse] = useState('');\r\n\r\n  // Function to send the user input to Dialogflow and get the response\r\n  const handleSendMessage = async () => {\r\n    const sessionClient = new SessionsClient({\r\n      keyFilename: 'path-to-your-service-account-key.json', // Path to your JSON file\r\n    });\r\n\r\n    const sessionId = '123456'; // Replace with a unique session ID\r\n    const sessionPath = sessionClient.projectAgentSessionPath(\r\n      'our-shift-452817-q9', // Replace with your Dialogflow project ID\r\n      sessionId\r\n    );\r\n\r\n    const request = {\r\n      session: sessionPath,\r\n      queryInput: {\r\n        text: {\r\n          text: userMessage,\r\n          languageCode: 'en',\r\n        },\r\n      },\r\n    };\r\n\r\n    try {\r\n      const responses = await sessionClient.detectIntent(request);\r\n      setBotResponse(responses[0].queryResult.fulfillmentText); // Update state with the response\r\n    } catch (error) {\r\n      console.error('Error fetching response from Dialogflow:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Chatbot App</h1>\r\n      <input\r\n        type=\"text\"\r\n        value={userMessage}\r\n        onChange={(e) => setUserMessage(e.target.value)}\r\n        placeholder=\"Type your message...\"\r\n      />\r\n      <button onClick={handleSendMessage}>Send</button>\r\n      <p>Bot Response: {botResponse}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatbotApp;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,cAAc,QAAQ,0BAA0B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAMU,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,MAAMC,aAAa,GAAG,IAAIV,cAAc,CAAC;MACvCW,WAAW,EAAE,uCAAuC,CAAE;IACxD,CAAC,CAAC;IAEF,MAAMC,SAAS,GAAG,QAAQ,CAAC,CAAC;IAC5B,MAAMC,WAAW,GAAGH,aAAa,CAACI,uBAAuB,CACvD,qBAAqB;IAAE;IACvBF,SACF,CAAC;IAED,MAAMG,OAAO,GAAG;MACdC,OAAO,EAAEH,WAAW;MACpBI,UAAU,EAAE;QACVC,IAAI,EAAE;UACJA,IAAI,EAAEb,WAAW;UACjBc,YAAY,EAAE;QAChB;MACF;IACF,CAAC;IAED,IAAI;MACF,MAAMC,SAAS,GAAG,MAAMV,aAAa,CAACW,YAAY,CAACN,OAAO,CAAC;MAC3DP,cAAc,CAACY,SAAS,CAAC,CAAC,CAAC,CAACE,WAAW,CAACC,eAAe,CAAC,CAAC,CAAC;IAC5D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAClE;EACF,CAAC;EAED,oBACEtB,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB5B,OAAA;MACE6B,IAAI,EAAC,MAAM;MACXC,KAAK,EAAE3B,WAAY;MACnB4B,QAAQ,EAAGC,CAAC,IAAK5B,cAAc,CAAC4B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAChDI,WAAW,EAAC;IAAsB;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eACF5B,OAAA;MAAQmC,OAAO,EAAE5B,iBAAkB;MAAAiB,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACjD5B,OAAA;MAAAwB,QAAA,GAAG,gBAAc,EAACnB,WAAW;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA/CID,UAAU;AAAAmC,EAAA,GAAVnC,UAAU;AAiDhB,eAAeA,UAAU;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}