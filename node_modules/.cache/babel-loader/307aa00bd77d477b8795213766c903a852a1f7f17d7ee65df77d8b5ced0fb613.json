{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function () {\n  var ownKeys = function (o) {\n    ownKeys = Object.getOwnPropertyNames || function (o) {\n      var ar = [];\n      for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n      return ar;\n    };\n    return ownKeys(o);\n  };\n  return function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\nconst status_1 = require(\"./status\");\nconst protobuf = __importStar(require(\"protobufjs\"));\nconst serializer = __importStar(require(\"proto3-json-serializer\"));\nconst fallback_1 = require(\"./fallback\");\nclass GoogleError extends Error {\n  code;\n  note;\n  metadata;\n  statusDetails;\n  reason;\n  domain;\n  errorInfoMetadata;\n  // Parse details field in google.rpc.status wire over gRPC medatadata.\n  // Promote google.rpc.ErrorInfo if exist.\n  static parseGRPCStatusDetails(err) {\n    const decoder = new GoogleErrorDecoder();\n    try {\n      if (err.metadata && err.metadata.get('grpc-status-details-bin')) {\n        const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get('grpc-status-details-bin'));\n        if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {\n          err.statusDetails = statusDetailsObj.details;\n        }\n        if (statusDetailsObj && statusDetailsObj.errorInfo) {\n          err.reason = statusDetailsObj.errorInfo.reason;\n          err.domain = statusDetailsObj.errorInfo.domain;\n          err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n        }\n      }\n    } catch (decodeErr) {\n      // ignoring the error\n    }\n    return err;\n  }\n  // Parse http JSON error and promote google.rpc.ErrorInfo if exist.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static parseHttpError(json) {\n    if (Array.isArray(json)) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      json = json.find(obj => {\n        return 'error' in obj;\n      });\n    }\n    // fallback logic.\n    // related issue: https://github.com/googleapis/gax-nodejs/issues/1303\n    // google error mapping: https://cloud.google.com/apis/design/errors\n    // if input json doesn't have 'error' fields, wrap the whole object with 'error' field\n    if (!json['error']) {\n      json['error'] = {};\n      Object.keys(json).filter(key => key !== 'error').forEach(key => {\n        json['error'][key] = json[key];\n        delete json[key];\n      });\n    }\n    const decoder = new GoogleErrorDecoder();\n    const proto3Error = decoder.decodeHTTPError(json['error']);\n    const error = Object.assign(new GoogleError(json['error']['message']), proto3Error);\n    // Get gRPC Status Code\n    if (json['error']['status'] && status_1.Status[json['error']['status']]) {\n      error.code = status_1.Status[json['error']['status']];\n    } else if (json['error']['code']) {\n      // Map Http Status Code to gRPC Status Code\n      error.code = (0, status_1.rpcCodeFromHttpStatusCode)(json['error']['code']);\n    } else {\n      // If error code is absent, proto3 message default value is 0. We should\n      // keep error code as undefined.\n      delete error.code;\n    }\n    // Keep consistency with gRPC statusDetails fields. gRPC details has been occupied before.\n    // Rename \"details\" to \"statusDetails\".\n    if (error.details) {\n      try {\n        const statusDetailsObj = decoder.decodeHttpStatusDetails(error.details);\n        if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {\n          error.statusDetails = statusDetailsObj.details;\n        }\n        if (statusDetailsObj && statusDetailsObj.errorInfo) {\n          error.reason = statusDetailsObj.errorInfo.reason;\n          error.domain = statusDetailsObj.errorInfo.domain;\n          // error.metadata has been occupied for gRPC metadata, so we use\n          // errorInfoMetadata to represent ErrorInfo' metadata field. Keep\n          // consistency with gRPC ErrorInfo metadata field name.\n          error.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n        }\n      } catch (decodeErr) {\n        // ignoring the error\n      }\n    }\n    return error;\n  }\n}\nexports.GoogleError = GoogleError;\nclass GoogleErrorDecoder {\n  root;\n  anyType;\n  statusType;\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const errorProtoJson = require('../../build/protos/status.json');\n    this.root = protobuf.Root.fromJSON(errorProtoJson);\n    this.anyType = this.root.lookupType('google.protobuf.Any');\n    this.statusType = this.root.lookupType('google.rpc.Status');\n  }\n  decodeProtobufAny(anyValue) {\n    const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n    if (!match) {\n      throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n    }\n    const typeName = match[1];\n    const type = this.root.lookupType(typeName);\n    if (!type) {\n      throw new Error(`Cannot lookup type ${typeName}`);\n    }\n    return type.decode(anyValue.value);\n  }\n  // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n  decodeRpcStatus(buffer) {\n    const uint8array = new Uint8Array(buffer);\n    const status = this.statusType.decode(uint8array);\n    // google.rpc.Status contains an array of google.protobuf.Any\n    // which need a special treatment\n    const details = [];\n    let errorInfo;\n    for (const detail of status.details) {\n      try {\n        const decodedDetail = this.decodeProtobufAny(detail);\n        details.push(decodedDetail);\n        if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n          errorInfo = decodedDetail;\n        }\n      } catch (err) {\n        // cannot decode detail, likely because of the unknown type - just skip it\n      }\n    }\n    const result = {\n      code: status.code,\n      message: status.message,\n      statusDetails: details,\n      reason: errorInfo?.reason,\n      domain: errorInfo?.domain,\n      errorInfoMetadata: errorInfo?.metadata\n    };\n    return result;\n  }\n  // Construct an Error from a StatusObject.\n  // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n  callErrorFromStatus(status) {\n    status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n    return Object.assign(new GoogleError(status.message), status);\n  }\n  // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n  // and puts it into the object similar to gRPC ServiceError object.\n  decodeErrorFromBuffer(buffer) {\n    return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n  }\n  // Decodes gRPC metadata error details which is an instance of google.rpc.Status.\n  decodeGRPCStatusDetails(bufferArr) {\n    const details = [];\n    let errorInfo;\n    bufferArr.forEach(buffer => {\n      const uint8array = new Uint8Array(buffer);\n      const rpcStatus = this.statusType.decode(uint8array);\n      for (const detail of rpcStatus.details) {\n        try {\n          const decodedDetail = this.decodeProtobufAny(detail);\n          details.push(decodedDetail);\n          if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n            errorInfo = decodedDetail;\n          }\n        } catch (err) {\n          // cannot decode detail, likely because of the unknown type - just skip it\n        }\n      }\n    });\n    const result = {\n      details,\n      errorInfo\n    };\n    return result;\n  }\n  // Decodes http error which is an instance of google.rpc.Status.\n  decodeHTTPError(json) {\n    const errorMessage = serializer.fromProto3JSON(this.statusType, json);\n    if (!errorMessage) {\n      throw new Error(`Received error message ${json}, but failed to serialize as proto3 message`);\n    }\n    return this.statusType.toObject(errorMessage, fallback_1.defaultToObjectOptions);\n  }\n  // Decodes http error details which is an instance of Array<google.protobuf.Any>.\n  decodeHttpStatusDetails(rawDetails) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const details = [];\n    let errorInfo;\n    for (const detail of rawDetails) {\n      try {\n        const decodedDetail = this.decodeProtobufAny(detail);\n        details.push(decodedDetail);\n        if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n          errorInfo = decodedDetail;\n        }\n      } catch (err) {\n        // cannot decode detail, likely because of the unknown type - just skip it\n      }\n    }\n    return {\n      details,\n      errorInfo\n    };\n  }\n}\nexports.GoogleErrorDecoder = GoogleErrorDecoder;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","ownKeys","getOwnPropertyNames","ar","prototype","hasOwnProperty","call","length","mod","result","i","exports","GoogleErrorDecoder","GoogleError","status_1","require","protobuf","serializer","fallback_1","Error","code","note","metadata","statusDetails","reason","domain","errorInfoMetadata","parseGRPCStatusDetails","err","decoder","statusDetailsObj","decodeGRPCStatusDetails","details","errorInfo","decodeErr","parseHttpError","json","Array","isArray","find","obj","keys","filter","key","forEach","proto3Error","decodeHTTPError","error","assign","Status","rpcCodeFromHttpStatusCode","decodeHttpStatusDetails","root","anyType","statusType","constructor","errorProtoJson","Root","fromJSON","lookupType","decodeProtobufAny","anyValue","match","type_url","typeName","type","decode","decodeRpcStatus","buffer","uint8array","Uint8Array","status","detail","decodedDetail","push","message","callErrorFromStatus","decodeErrorFromBuffer","bufferArr","rpcStatus","errorMessage","fromProto3JSON","toObject","defaultToObjectOptions","rawDetails"],"sources":["C:/Users/BIT/chatboot/node_modules/google-gax/build/src/googleError.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\nconst status_1 = require(\"./status\");\nconst protobuf = __importStar(require(\"protobufjs\"));\nconst serializer = __importStar(require(\"proto3-json-serializer\"));\nconst fallback_1 = require(\"./fallback\");\nclass GoogleError extends Error {\n    code;\n    note;\n    metadata;\n    statusDetails;\n    reason;\n    domain;\n    errorInfoMetadata;\n    // Parse details field in google.rpc.status wire over gRPC medatadata.\n    // Promote google.rpc.ErrorInfo if exist.\n    static parseGRPCStatusDetails(err) {\n        const decoder = new GoogleErrorDecoder();\n        try {\n            if (err.metadata && err.metadata.get('grpc-status-details-bin')) {\n                const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get('grpc-status-details-bin'));\n                if (statusDetailsObj &&\n                    statusDetailsObj.details &&\n                    statusDetailsObj.details.length > 0) {\n                    err.statusDetails = statusDetailsObj.details;\n                }\n                if (statusDetailsObj && statusDetailsObj.errorInfo) {\n                    err.reason = statusDetailsObj.errorInfo.reason;\n                    err.domain = statusDetailsObj.errorInfo.domain;\n                    err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n                }\n            }\n        }\n        catch (decodeErr) {\n            // ignoring the error\n        }\n        return err;\n    }\n    // Parse http JSON error and promote google.rpc.ErrorInfo if exist.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static parseHttpError(json) {\n        if (Array.isArray(json)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            json = json.find((obj) => {\n                return 'error' in obj;\n            });\n        }\n        // fallback logic.\n        // related issue: https://github.com/googleapis/gax-nodejs/issues/1303\n        // google error mapping: https://cloud.google.com/apis/design/errors\n        // if input json doesn't have 'error' fields, wrap the whole object with 'error' field\n        if (!json['error']) {\n            json['error'] = {};\n            Object.keys(json)\n                .filter(key => key !== 'error')\n                .forEach(key => {\n                json['error'][key] = json[key];\n                delete json[key];\n            });\n        }\n        const decoder = new GoogleErrorDecoder();\n        const proto3Error = decoder.decodeHTTPError(json['error']);\n        const error = Object.assign(new GoogleError(json['error']['message']), proto3Error);\n        // Get gRPC Status Code\n        if (json['error']['status'] &&\n            status_1.Status[json['error']['status']]) {\n            error.code = status_1.Status[json['error']['status']];\n        }\n        else if (json['error']['code']) {\n            // Map Http Status Code to gRPC Status Code\n            error.code = (0, status_1.rpcCodeFromHttpStatusCode)(json['error']['code']);\n        }\n        else {\n            // If error code is absent, proto3 message default value is 0. We should\n            // keep error code as undefined.\n            delete error.code;\n        }\n        // Keep consistency with gRPC statusDetails fields. gRPC details has been occupied before.\n        // Rename \"details\" to \"statusDetails\".\n        if (error.details) {\n            try {\n                const statusDetailsObj = decoder.decodeHttpStatusDetails(error.details);\n                if (statusDetailsObj &&\n                    statusDetailsObj.details &&\n                    statusDetailsObj.details.length > 0) {\n                    error.statusDetails = statusDetailsObj.details;\n                }\n                if (statusDetailsObj && statusDetailsObj.errorInfo) {\n                    error.reason = statusDetailsObj.errorInfo.reason;\n                    error.domain = statusDetailsObj.errorInfo.domain;\n                    // error.metadata has been occupied for gRPC metadata, so we use\n                    // errorInfoMetadata to represent ErrorInfo' metadata field. Keep\n                    // consistency with gRPC ErrorInfo metadata field name.\n                    error.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n                }\n            }\n            catch (decodeErr) {\n                // ignoring the error\n            }\n        }\n        return error;\n    }\n}\nexports.GoogleError = GoogleError;\nclass GoogleErrorDecoder {\n    root;\n    anyType;\n    statusType;\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const errorProtoJson = require('../../build/protos/status.json');\n        this.root = protobuf.Root.fromJSON(errorProtoJson);\n        this.anyType = this.root.lookupType('google.protobuf.Any');\n        this.statusType = this.root.lookupType('google.rpc.Status');\n    }\n    decodeProtobufAny(anyValue) {\n        const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n        if (!match) {\n            throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n        }\n        const typeName = match[1];\n        const type = this.root.lookupType(typeName);\n        if (!type) {\n            throw new Error(`Cannot lookup type ${typeName}`);\n        }\n        return type.decode(anyValue.value);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n    decodeRpcStatus(buffer) {\n        const uint8array = new Uint8Array(buffer);\n        const status = this.statusType.decode(uint8array);\n        // google.rpc.Status contains an array of google.protobuf.Any\n        // which need a special treatment\n        const details = [];\n        let errorInfo;\n        for (const detail of status.details) {\n            try {\n                const decodedDetail = this.decodeProtobufAny(detail);\n                details.push(decodedDetail);\n                if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                    errorInfo = decodedDetail;\n                }\n            }\n            catch (err) {\n                // cannot decode detail, likely because of the unknown type - just skip it\n            }\n        }\n        const result = {\n            code: status.code,\n            message: status.message,\n            statusDetails: details,\n            reason: errorInfo?.reason,\n            domain: errorInfo?.domain,\n            errorInfoMetadata: errorInfo?.metadata,\n        };\n        return result;\n    }\n    // Construct an Error from a StatusObject.\n    // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n    callErrorFromStatus(status) {\n        status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n        return Object.assign(new GoogleError(status.message), status);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n    // and puts it into the object similar to gRPC ServiceError object.\n    decodeErrorFromBuffer(buffer) {\n        return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n    }\n    // Decodes gRPC metadata error details which is an instance of google.rpc.Status.\n    decodeGRPCStatusDetails(bufferArr) {\n        const details = [];\n        let errorInfo;\n        bufferArr.forEach(buffer => {\n            const uint8array = new Uint8Array(buffer);\n            const rpcStatus = this.statusType.decode(uint8array);\n            for (const detail of rpcStatus.details) {\n                try {\n                    const decodedDetail = this.decodeProtobufAny(detail);\n                    details.push(decodedDetail);\n                    if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                        errorInfo = decodedDetail;\n                    }\n                }\n                catch (err) {\n                    // cannot decode detail, likely because of the unknown type - just skip it\n                }\n            }\n        });\n        const result = {\n            details,\n            errorInfo,\n        };\n        return result;\n    }\n    // Decodes http error which is an instance of google.rpc.Status.\n    decodeHTTPError(json) {\n        const errorMessage = serializer.fromProto3JSON(this.statusType, json);\n        if (!errorMessage) {\n            throw new Error(`Received error message ${json}, but failed to serialize as proto3 message`);\n        }\n        return this.statusType.toObject(errorMessage, fallback_1.defaultToObjectOptions);\n    }\n    // Decodes http error details which is an instance of Array<google.protobuf.Any>.\n    decodeHttpStatusDetails(rawDetails) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const details = [];\n        let errorInfo;\n        for (const detail of rawDetails) {\n            try {\n                const decodedDetail = this.decodeProtobufAny(detail);\n                details.push(decodedDetail);\n                if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                    errorInfo = decodedDetail;\n                }\n            }\n            catch (err) {\n                // cannot decode detail, likely because of the unknown type - just skip it\n            }\n        }\n        return { details, errorInfo };\n    }\n}\nexports.GoogleErrorDecoder = GoogleErrorDecoder;\n//# sourceMappingURL=googleError.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}