{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoadBalancingCall = void 0;\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst constants_1 = require(\"./constants\");\nconst deadline_1 = require(\"./deadline\");\nconst metadata_1 = require(\"./metadata\");\nconst picker_1 = require(\"./picker\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst logging = require(\"./logging\");\nconst control_plane_status_1 = require(\"./control-plane-status\");\nconst http2 = require(\"http2\");\nconst TRACER_NAME = 'load_balancing_call';\nclass LoadBalancingCall {\n  constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber) {\n    var _a, _b;\n    this.channel = channel;\n    this.callConfig = callConfig;\n    this.methodName = methodName;\n    this.host = host;\n    this.credentials = credentials;\n    this.deadline = deadline;\n    this.callNumber = callNumber;\n    this.child = null;\n    this.readPending = false;\n    this.pendingMessage = null;\n    this.pendingHalfClose = false;\n    this.ended = false;\n    this.metadata = null;\n    this.listener = null;\n    this.onCallEnded = null;\n    this.childStartTime = null;\n    const splitPath = this.methodName.split('/');\n    let serviceName = '';\n    /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\n     * by '/', the first item should be empty and the second should be the\n     * service name */\n    if (splitPath.length >= 2) {\n      serviceName = splitPath[1];\n    }\n    const hostname = (_b = (_a = (0, uri_parser_1.splitHostPort)(this.host)) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : 'localhost';\n    /* Currently, call credentials are only allowed on HTTPS connections, so we\n     * can assume that the scheme is \"https\" */\n    this.serviceUrl = `https://${hostname}/${serviceName}`;\n    this.startTime = new Date();\n  }\n  getDeadlineInfo() {\n    var _a, _b;\n    const deadlineInfo = [];\n    if (this.childStartTime) {\n      if (this.childStartTime > this.startTime) {\n        if ((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.getOptions().waitForReady) {\n          deadlineInfo.push('wait_for_ready');\n        }\n        deadlineInfo.push(`LB pick: ${(0, deadline_1.formatDateDifference)(this.startTime, this.childStartTime)}`);\n      }\n      deadlineInfo.push(...this.child.getDeadlineInfo());\n      return deadlineInfo;\n    } else {\n      if ((_b = this.metadata) === null || _b === void 0 ? void 0 : _b.getOptions().waitForReady) {\n        deadlineInfo.push('wait_for_ready');\n      }\n      deadlineInfo.push('Waiting for LB pick');\n    }\n    return deadlineInfo;\n  }\n  trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\n  }\n  outputStatus(status, progress) {\n    var _a, _b;\n    if (!this.ended) {\n      this.ended = true;\n      this.trace('ended with status: code=' + status.code + ' details=\"' + status.details + '\" start time=' + this.startTime.toISOString());\n      const finalStatus = Object.assign(Object.assign({}, status), {\n        progress\n      });\n      (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(finalStatus);\n      (_b = this.onCallEnded) === null || _b === void 0 ? void 0 : _b.call(this, finalStatus.code);\n    }\n  }\n  doPick() {\n    var _a, _b;\n    if (this.ended) {\n      return;\n    }\n    if (!this.metadata) {\n      throw new Error('doPick called before start');\n    }\n    this.trace('Pick called');\n    const finalMetadata = this.metadata.clone();\n    const pickResult = this.channel.doPick(finalMetadata, this.callConfig.pickInformation);\n    const subchannelString = pickResult.subchannel ? '(' + pickResult.subchannel.getChannelzRef().id + ') ' + pickResult.subchannel.getAddress() : '' + pickResult.subchannel;\n    this.trace('Pick result: ' + picker_1.PickResultType[pickResult.pickResultType] + ' subchannel: ' + subchannelString + ' status: ' + ((_a = pickResult.status) === null || _a === void 0 ? void 0 : _a.code) + ' ' + ((_b = pickResult.status) === null || _b === void 0 ? void 0 : _b.details));\n    switch (pickResult.pickResultType) {\n      case picker_1.PickResultType.COMPLETE:\n        const combinedCallCredentials = this.credentials.compose(pickResult.subchannel.getCallCredentials());\n        combinedCallCredentials.generateMetadata({\n          method_name: this.methodName,\n          service_url: this.serviceUrl\n        }).then(credsMetadata => {\n          var _a;\n          /* If this call was cancelled (e.g. by the deadline) before\n           * metadata generation finished, we shouldn't do anything with\n           * it. */\n          if (this.ended) {\n            this.trace('Credentials metadata generation finished after call ended');\n            return;\n          }\n          finalMetadata.merge(credsMetadata);\n          if (finalMetadata.get('authorization').length > 1) {\n            this.outputStatus({\n              code: constants_1.Status.INTERNAL,\n              details: '\"authorization\" metadata cannot have multiple values',\n              metadata: new metadata_1.Metadata()\n            }, 'PROCESSED');\n          }\n          if (pickResult.subchannel.getConnectivityState() !== connectivity_state_1.ConnectivityState.READY) {\n            this.trace('Picked subchannel ' + subchannelString + ' has state ' + connectivity_state_1.ConnectivityState[pickResult.subchannel.getConnectivityState()] + ' after getting credentials metadata. Retrying pick');\n            this.doPick();\n            return;\n          }\n          if (this.deadline !== Infinity) {\n            finalMetadata.set('grpc-timeout', (0, deadline_1.getDeadlineTimeoutString)(this.deadline));\n          }\n          try {\n            this.child = pickResult.subchannel.getRealSubchannel().createCall(finalMetadata, this.host, this.methodName, {\n              onReceiveMetadata: metadata => {\n                this.trace('Received metadata');\n                this.listener.onReceiveMetadata(metadata);\n              },\n              onReceiveMessage: message => {\n                this.trace('Received message');\n                this.listener.onReceiveMessage(message);\n              },\n              onReceiveStatus: status => {\n                this.trace('Received status');\n                if (status.rstCode === http2.constants.NGHTTP2_REFUSED_STREAM) {\n                  this.outputStatus(status, 'REFUSED');\n                } else {\n                  this.outputStatus(status, 'PROCESSED');\n                }\n              }\n            });\n            this.childStartTime = new Date();\n          } catch (error) {\n            this.trace('Failed to start call on picked subchannel ' + subchannelString + ' with error ' + error.message);\n            this.outputStatus({\n              code: constants_1.Status.INTERNAL,\n              details: 'Failed to start HTTP/2 stream with error ' + error.message,\n              metadata: new metadata_1.Metadata()\n            }, 'NOT_STARTED');\n            return;\n          }\n          (_a = pickResult.onCallStarted) === null || _a === void 0 ? void 0 : _a.call(pickResult);\n          this.onCallEnded = pickResult.onCallEnded;\n          this.trace('Created child call [' + this.child.getCallNumber() + ']');\n          if (this.readPending) {\n            this.child.startRead();\n          }\n          if (this.pendingMessage) {\n            this.child.sendMessageWithContext(this.pendingMessage.context, this.pendingMessage.message);\n          }\n          if (this.pendingHalfClose) {\n            this.child.halfClose();\n          }\n        }, error => {\n          // We assume the error code isn't 0 (Status.OK)\n          const {\n            code,\n            details\n          } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(typeof error.code === 'number' ? error.code : constants_1.Status.UNKNOWN, `Getting metadata from plugin failed with error: ${error.message}`);\n          this.outputStatus({\n            code: code,\n            details: details,\n            metadata: new metadata_1.Metadata()\n          }, 'PROCESSED');\n        });\n        break;\n      case picker_1.PickResultType.DROP:\n        const {\n          code,\n          details\n        } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);\n        setImmediate(() => {\n          this.outputStatus({\n            code,\n            details,\n            metadata: pickResult.status.metadata\n          }, 'DROP');\n        });\n        break;\n      case picker_1.PickResultType.TRANSIENT_FAILURE:\n        if (this.metadata.getOptions().waitForReady) {\n          this.channel.queueCallForPick(this);\n        } else {\n          const {\n            code,\n            details\n          } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);\n          setImmediate(() => {\n            this.outputStatus({\n              code,\n              details,\n              metadata: pickResult.status.metadata\n            }, 'PROCESSED');\n          });\n        }\n        break;\n      case picker_1.PickResultType.QUEUE:\n        this.channel.queueCallForPick(this);\n    }\n  }\n  cancelWithStatus(status, details) {\n    var _a;\n    this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n    (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);\n    this.outputStatus({\n      code: status,\n      details: details,\n      metadata: new metadata_1.Metadata()\n    }, 'PROCESSED');\n  }\n  getPeer() {\n    var _a, _b;\n    return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\n  }\n  start(metadata, listener) {\n    this.trace('start called');\n    this.listener = listener;\n    this.metadata = metadata;\n    this.doPick();\n  }\n  sendMessageWithContext(context, message) {\n    this.trace('write() called with message of length ' + message.length);\n    if (this.child) {\n      this.child.sendMessageWithContext(context, message);\n    } else {\n      this.pendingMessage = {\n        context,\n        message\n      };\n    }\n  }\n  startRead() {\n    this.trace('startRead called');\n    if (this.child) {\n      this.child.startRead();\n    } else {\n      this.readPending = true;\n    }\n  }\n  halfClose() {\n    this.trace('halfClose called');\n    if (this.child) {\n      this.child.halfClose();\n    } else {\n      this.pendingHalfClose = true;\n    }\n  }\n  setCredentials(credentials) {\n    throw new Error('Method not implemented.');\n  }\n  getCallNumber() {\n    return this.callNumber;\n  }\n}\nexports.LoadBalancingCall = LoadBalancingCall;","map":{"version":3,"names":["connectivity_state_1","require","constants_1","deadline_1","metadata_1","picker_1","uri_parser_1","logging","control_plane_status_1","http2","TRACER_NAME","LoadBalancingCall","constructor","channel","callConfig","methodName","host","credentials","deadline","callNumber","child","readPending","pendingMessage","pendingHalfClose","ended","metadata","listener","onCallEnded","childStartTime","splitPath","split","serviceName","length","hostname","_b","_a","splitHostPort","serviceUrl","startTime","Date","getDeadlineInfo","deadlineInfo","getOptions","waitForReady","push","formatDateDifference","trace","text","LogVerbosity","DEBUG","outputStatus","status","progress","code","details","toISOString","finalStatus","Object","assign","onReceiveStatus","call","doPick","Error","finalMetadata","clone","pickResult","pickInformation","subchannelString","subchannel","getChannelzRef","id","getAddress","PickResultType","pickResultType","COMPLETE","combinedCallCredentials","compose","getCallCredentials","generateMetadata","method_name","service_url","then","credsMetadata","merge","get","Status","INTERNAL","Metadata","getConnectivityState","ConnectivityState","READY","Infinity","set","getDeadlineTimeoutString","getRealSubchannel","createCall","onReceiveMetadata","onReceiveMessage","message","rstCode","constants","NGHTTP2_REFUSED_STREAM","error","onCallStarted","getCallNumber","startRead","sendMessageWithContext","context","halfClose","restrictControlPlaneStatusCode","UNKNOWN","DROP","setImmediate","TRANSIENT_FAILURE","queueCallForPick","QUEUE","cancelWithStatus","getPeer","getTarget","start","setCredentials","exports"],"sources":["C:\\Users\\BIT\\chatboot\\node_modules\\@grpc\\grpc-js\\src\\load-balancing-call.ts"],"sourcesContent":["/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { CallCredentials } from './call-credentials';\nimport {\n  Call,\n  DeadlineInfoProvider,\n  InterceptingListener,\n  MessageContext,\n  StatusObject,\n} from './call-interface';\nimport { SubchannelCall } from './subchannel-call';\nimport { ConnectivityState } from './connectivity-state';\nimport { LogVerbosity, Status } from './constants';\nimport { Deadline, formatDateDifference, getDeadlineTimeoutString } from './deadline';\nimport { InternalChannel } from './internal-channel';\nimport { Metadata } from './metadata';\nimport { PickResultType } from './picker';\nimport { CallConfig } from './resolver';\nimport { splitHostPort } from './uri-parser';\nimport * as logging from './logging';\nimport { restrictControlPlaneStatusCode } from './control-plane-status';\nimport * as http2 from 'http2';\n\nconst TRACER_NAME = 'load_balancing_call';\n\nexport type RpcProgress = 'NOT_STARTED' | 'DROP' | 'REFUSED' | 'PROCESSED';\n\nexport interface StatusObjectWithProgress extends StatusObject {\n  progress: RpcProgress;\n}\n\nexport interface LoadBalancingCallInterceptingListener\n  extends InterceptingListener {\n  onReceiveStatus(status: StatusObjectWithProgress): void;\n}\n\nexport class LoadBalancingCall implements Call, DeadlineInfoProvider {\n  private child: SubchannelCall | null = null;\n  private readPending = false;\n  private pendingMessage: { context: MessageContext; message: Buffer } | null =\n    null;\n  private pendingHalfClose = false;\n  private ended = false;\n  private serviceUrl: string;\n  private metadata: Metadata | null = null;\n  private listener: InterceptingListener | null = null;\n  private onCallEnded: ((statusCode: Status) => void) | null = null;\n  private startTime: Date;\n  private childStartTime: Date | null = null;\n  constructor(\n    private readonly channel: InternalChannel,\n    private readonly callConfig: CallConfig,\n    private readonly methodName: string,\n    private readonly host: string,\n    private readonly credentials: CallCredentials,\n    private readonly deadline: Deadline,\n    private readonly callNumber: number\n  ) {\n    const splitPath: string[] = this.methodName.split('/');\n    let serviceName = '';\n    /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\n     * by '/', the first item should be empty and the second should be the\n     * service name */\n    if (splitPath.length >= 2) {\n      serviceName = splitPath[1];\n    }\n    const hostname = splitHostPort(this.host)?.host ?? 'localhost';\n    /* Currently, call credentials are only allowed on HTTPS connections, so we\n     * can assume that the scheme is \"https\" */\n    this.serviceUrl = `https://${hostname}/${serviceName}`;\n    this.startTime = new Date();\n  }\n  getDeadlineInfo(): string[] {\n    const deadlineInfo: string[] = [];\n    if (this.childStartTime) {\n      if (this.childStartTime > this.startTime) {\n        if (this.metadata?.getOptions().waitForReady) {\n          deadlineInfo.push('wait_for_ready');\n        }\n        deadlineInfo.push(`LB pick: ${formatDateDifference(this.startTime, this.childStartTime)}`);\n      }\n      deadlineInfo.push(...this.child!.getDeadlineInfo());\n      return deadlineInfo;\n    } else {\n      if (this.metadata?.getOptions().waitForReady) {\n        deadlineInfo.push('wait_for_ready');\n      }\n      deadlineInfo.push('Waiting for LB pick');\n    }\n    return deadlineInfo;\n  }\n\n  private trace(text: string): void {\n    logging.trace(\n      LogVerbosity.DEBUG,\n      TRACER_NAME,\n      '[' + this.callNumber + '] ' + text\n    );\n  }\n\n  private outputStatus(status: StatusObject, progress: RpcProgress) {\n    if (!this.ended) {\n      this.ended = true;\n      this.trace(\n        'ended with status: code=' +\n          status.code +\n          ' details=\"' +\n          status.details +\n          '\" start time=' +\n          this.startTime.toISOString()\n      );\n      const finalStatus = { ...status, progress };\n      this.listener?.onReceiveStatus(finalStatus);\n      this.onCallEnded?.(finalStatus.code);\n    }\n  }\n\n  doPick() {\n    if (this.ended) {\n      return;\n    }\n    if (!this.metadata) {\n      throw new Error('doPick called before start');\n    }\n    this.trace('Pick called');\n    const finalMetadata = this.metadata.clone();\n    const pickResult = this.channel.doPick(\n      finalMetadata,\n      this.callConfig.pickInformation\n    );\n    const subchannelString = pickResult.subchannel\n      ? '(' +\n        pickResult.subchannel.getChannelzRef().id +\n        ') ' +\n        pickResult.subchannel.getAddress()\n      : '' + pickResult.subchannel;\n    this.trace(\n      'Pick result: ' +\n        PickResultType[pickResult.pickResultType] +\n        ' subchannel: ' +\n        subchannelString +\n        ' status: ' +\n        pickResult.status?.code +\n        ' ' +\n        pickResult.status?.details\n    );\n    switch (pickResult.pickResultType) {\n      case PickResultType.COMPLETE:\n        const combinedCallCredentials = this.credentials.compose(pickResult.subchannel!.getCallCredentials());\n        combinedCallCredentials\n          .generateMetadata({ method_name: this.methodName, service_url: this.serviceUrl })\n          .then(\n            credsMetadata => {\n              /* If this call was cancelled (e.g. by the deadline) before\n               * metadata generation finished, we shouldn't do anything with\n               * it. */\n              if (this.ended) {\n                this.trace(\n                  'Credentials metadata generation finished after call ended'\n                );\n                return;\n              }\n              finalMetadata.merge(credsMetadata);\n              if (finalMetadata.get('authorization').length > 1) {\n                this.outputStatus(\n                  {\n                    code: Status.INTERNAL,\n                    details:\n                      '\"authorization\" metadata cannot have multiple values',\n                    metadata: new Metadata(),\n                  },\n                  'PROCESSED'\n                );\n              }\n              if (\n                pickResult.subchannel!.getConnectivityState() !==\n                ConnectivityState.READY\n              ) {\n                this.trace(\n                  'Picked subchannel ' +\n                    subchannelString +\n                    ' has state ' +\n                    ConnectivityState[\n                      pickResult.subchannel!.getConnectivityState()\n                    ] +\n                    ' after getting credentials metadata. Retrying pick'\n                );\n                this.doPick();\n                return;\n              }\n\n              if (this.deadline !== Infinity) {\n                finalMetadata.set(\n                  'grpc-timeout',\n                  getDeadlineTimeoutString(this.deadline)\n                );\n              }\n              try {\n                this.child = pickResult\n                  .subchannel!.getRealSubchannel()\n                  .createCall(finalMetadata, this.host, this.methodName, {\n                    onReceiveMetadata: metadata => {\n                      this.trace('Received metadata');\n                      this.listener!.onReceiveMetadata(metadata);\n                    },\n                    onReceiveMessage: message => {\n                      this.trace('Received message');\n                      this.listener!.onReceiveMessage(message);\n                    },\n                    onReceiveStatus: status => {\n                      this.trace('Received status');\n                      if (\n                        status.rstCode ===\n                        http2.constants.NGHTTP2_REFUSED_STREAM\n                      ) {\n                        this.outputStatus(status, 'REFUSED');\n                      } else {\n                        this.outputStatus(status, 'PROCESSED');\n                      }\n                    },\n                  });\n                this.childStartTime = new Date();\n              } catch (error) {\n                this.trace(\n                  'Failed to start call on picked subchannel ' +\n                    subchannelString +\n                    ' with error ' +\n                    (error as Error).message\n                );\n                this.outputStatus(\n                  {\n                    code: Status.INTERNAL,\n                    details:\n                      'Failed to start HTTP/2 stream with error ' +\n                      (error as Error).message,\n                    metadata: new Metadata(),\n                  },\n                  'NOT_STARTED'\n                );\n                return;\n              }\n              pickResult.onCallStarted?.();\n              this.onCallEnded = pickResult.onCallEnded;\n              this.trace(\n                'Created child call [' + this.child.getCallNumber() + ']'\n              );\n              if (this.readPending) {\n                this.child.startRead();\n              }\n              if (this.pendingMessage) {\n                this.child.sendMessageWithContext(\n                  this.pendingMessage.context,\n                  this.pendingMessage.message\n                );\n              }\n              if (this.pendingHalfClose) {\n                this.child.halfClose();\n              }\n            },\n            (error: Error & { code: number }) => {\n              // We assume the error code isn't 0 (Status.OK)\n              const { code, details } = restrictControlPlaneStatusCode(\n                typeof error.code === 'number' ? error.code : Status.UNKNOWN,\n                `Getting metadata from plugin failed with error: ${error.message}`\n              );\n              this.outputStatus(\n                {\n                  code: code,\n                  details: details,\n                  metadata: new Metadata(),\n                },\n                'PROCESSED'\n              );\n            }\n          );\n        break;\n      case PickResultType.DROP:\n        const { code, details } = restrictControlPlaneStatusCode(\n          pickResult.status!.code,\n          pickResult.status!.details\n        );\n        setImmediate(() => {\n          this.outputStatus(\n            { code, details, metadata: pickResult.status!.metadata },\n            'DROP'\n          );\n        });\n        break;\n      case PickResultType.TRANSIENT_FAILURE:\n        if (this.metadata.getOptions().waitForReady) {\n          this.channel.queueCallForPick(this);\n        } else {\n          const { code, details } = restrictControlPlaneStatusCode(\n            pickResult.status!.code,\n            pickResult.status!.details\n          );\n          setImmediate(() => {\n            this.outputStatus(\n              { code, details, metadata: pickResult.status!.metadata },\n              'PROCESSED'\n            );\n          });\n        }\n        break;\n      case PickResultType.QUEUE:\n        this.channel.queueCallForPick(this);\n    }\n  }\n\n  cancelWithStatus(status: Status, details: string): void {\n    this.trace(\n      'cancelWithStatus code: ' + status + ' details: \"' + details + '\"'\n    );\n    this.child?.cancelWithStatus(status, details);\n    this.outputStatus(\n      { code: status, details: details, metadata: new Metadata() },\n      'PROCESSED'\n    );\n  }\n  getPeer(): string {\n    return this.child?.getPeer() ?? this.channel.getTarget();\n  }\n  start(\n    metadata: Metadata,\n    listener: LoadBalancingCallInterceptingListener\n  ): void {\n    this.trace('start called');\n    this.listener = listener;\n    this.metadata = metadata;\n    this.doPick();\n  }\n  sendMessageWithContext(context: MessageContext, message: Buffer): void {\n    this.trace('write() called with message of length ' + message.length);\n    if (this.child) {\n      this.child.sendMessageWithContext(context, message);\n    } else {\n      this.pendingMessage = { context, message };\n    }\n  }\n  startRead(): void {\n    this.trace('startRead called');\n    if (this.child) {\n      this.child.startRead();\n    } else {\n      this.readPending = true;\n    }\n  }\n  halfClose(): void {\n    this.trace('halfClose called');\n    if (this.child) {\n      this.child.halfClose();\n    } else {\n      this.pendingHalfClose = true;\n    }\n  }\n  setCredentials(credentials: CallCredentials): void {\n    throw new Error('Method not implemented.');\n  }\n\n  getCallNumber(): number {\n    return this.callNumber;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}