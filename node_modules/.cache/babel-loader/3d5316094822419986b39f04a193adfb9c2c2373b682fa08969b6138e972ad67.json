{"ast":null,"code":"\"use strict\";\n\n// Copyright 2025 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConversationsClient = void 0;\nconst jsonProtos = require(\"../../protos/protos.json\");\nconst google_gax_1 = require(\"google-gax\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v2/conversations_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./conversations_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  Service for managing\n *  {@link protos.google.cloud.dialogflow.v2.Conversation|Conversations}.\n * @class\n * @memberof v2\n */\nclass ConversationsClient {\n  _terminated = false;\n  _opts;\n  _providedCustomServicePath;\n  _gaxModule;\n  _gaxGrpc;\n  _protos;\n  _defaults;\n  _universeDomain;\n  _servicePath;\n  _log = google_gax_1.loggingUtils.log('dialogflow');\n  auth;\n  descriptors = {\n    page: {},\n    stream: {},\n    longrunning: {},\n    batching: {}\n  };\n  warn;\n  innerApiCalls;\n  locationsClient;\n  pathTemplates;\n  conversationsStub;\n  /**\n   * Construct an instance of ConversationsClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n   *     For more information, please check the\n   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n   *     need to avoid loading the default gRPC version and want to use the fallback\n   *     HTTP implementation. Load only fallback version and pass it to the constructor:\n   *     ```\n   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n   *     const client = new ConversationsClient({fallback: true}, gax);\n   *     ```\n   */\n  constructor(opts, gaxInstance) {\n    // Ensure that options include all the required fields.\n    const staticMembers = this.constructor;\n    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {\n      throw new Error('Please set either universe_domain or universeDomain, but not both.');\n    }\n    const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object' ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;\n    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';\n    this._servicePath = 'dialogflow.' + this._universeDomain;\n    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;\n    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);\n    const port = opts?.port || staticMembers.port;\n    const clientConfig = opts?.clientConfig ?? {};\n    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts);\n    // Request numeric enum values if REST transport is used.\n    opts.numericEnums = true;\n    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n    if (servicePath !== this._servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    }\n    // Load google-gax module synchronously if needed\n    if (!gaxInstance) {\n      gaxInstance = require('google-gax');\n    }\n    // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n    // Save options to use in initialize() method.\n    this._opts = opts;\n    // Save the auth object to the client, for use by other methods.\n    this.auth = this._gaxGrpc.auth;\n    // Set useJWTAccessWithScope on the auth object.\n    this.auth.useJWTAccessWithScope = true;\n    // Set defaultServicePath on the auth object.\n    this.auth.defaultServicePath = this._servicePath;\n    // Set the default scopes in auth client if needed.\n    if (servicePath === this._servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    }\n    this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);\n    // Determine the client header string.\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n    if (typeof process === 'object' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    } else {\n      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n    }\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    }\n    // Load the applicable protos.\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n    // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n    this.pathTemplates = {\n      conversationDatasetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversationDatasets/{conversation_dataset}'),\n      encryptionSpecPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/encryptionSpec'),\n      generatorPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/generators/{generator}'),\n      locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),\n      projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),\n      projectAgentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent'),\n      projectAgentEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/entityTypes/{entity_type}'),\n      projectAgentEnvironmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/environments/{environment}'),\n      projectAgentEnvironmentUserSessionContextPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/environments/{environment}/users/{user}/sessions/{session}/contexts/{context}'),\n      projectAgentEnvironmentUserSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/environments/{environment}/users/{user}/sessions/{session}/entityTypes/{entity_type}'),\n      projectAgentFulfillmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/fulfillment'),\n      projectAgentIntentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/intents/{intent}'),\n      projectAgentSessionContextPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/sessions/{session}/contexts/{context}'),\n      projectAgentSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/sessions/{session}/entityTypes/{entity_type}'),\n      projectAgentVersionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/versions/{version}'),\n      projectAnswerRecordPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/answerRecords/{answer_record}'),\n      projectConversationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/conversations/{conversation}'),\n      projectConversationMessagePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/conversations/{conversation}/messages/{message}'),\n      projectConversationModelPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/conversationModels/{conversation_model}'),\n      projectConversationModelEvaluationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/conversationModels/{conversation_model}/evaluations/{evaluation}'),\n      projectConversationParticipantPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/conversations/{conversation}/participants/{participant}'),\n      projectConversationProfilePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/conversationProfiles/{conversation_profile}'),\n      projectKnowledgeBasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/knowledgeBases/{knowledge_base}'),\n      projectKnowledgeBaseDocumentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/knowledgeBases/{knowledge_base}/documents/{document}'),\n      projectLocationAgentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent'),\n      projectLocationAgentEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/entityTypes/{entity_type}'),\n      projectLocationAgentEnvironmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/environments/{environment}'),\n      projectLocationAgentEnvironmentUserSessionContextPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/environments/{environment}/users/{user}/sessions/{session}/contexts/{context}'),\n      projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/environments/{environment}/users/{user}/sessions/{session}/entityTypes/{entity_type}'),\n      projectLocationAgentFulfillmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/fulfillment'),\n      projectLocationAgentIntentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/intents/{intent}'),\n      projectLocationAgentSessionContextPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/sessions/{session}/contexts/{context}'),\n      projectLocationAgentSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/sessions/{session}/entityTypes/{entity_type}'),\n      projectLocationAgentVersionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/versions/{version}'),\n      projectLocationAnswerRecordPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/answerRecords/{answer_record}'),\n      projectLocationConversationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversations/{conversation}'),\n      projectLocationConversationMessagePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversations/{conversation}/messages/{message}'),\n      projectLocationConversationModelPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversationModels/{conversation_model}'),\n      projectLocationConversationModelEvaluationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversationModels/{conversation_model}/evaluations/{evaluation}'),\n      projectLocationConversationParticipantPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversations/{conversation}/participants/{participant}'),\n      projectLocationConversationProfilePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversationProfiles/{conversation_profile}'),\n      projectLocationKnowledgeBasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/knowledgeBases/{knowledge_base}'),\n      projectLocationKnowledgeBaseDocumentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/knowledgeBases/{knowledge_base}/documents/{document}')\n    };\n    // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n    this.descriptors.page = {\n      listConversations: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'conversations'),\n      listMessages: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'messages')\n    };\n    // Put together the default options sent with requests.\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.dialogflow.v2.Conversations', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    });\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this.innerApiCalls = {};\n    // Add a warn function to the client constructor so it can be easily tested.\n    this.warn = this._gaxModule.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.conversationsStub) {\n      return this.conversationsStub;\n    }\n    // Put together the \"service stub\" for\n    // google.cloud.dialogflow.v2.Conversations.\n    this.conversationsStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.dialogflow.v2.Conversations') :\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.dialogflow.v2.Conversations, this._opts, this._providedCustomServicePath);\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const conversationsStubMethods = ['createConversation', 'listConversations', 'getConversation', 'completeConversation', 'ingestContextReferences', 'listMessages', 'suggestConversationSummary', 'generateStatelessSummary', 'generateStatelessSuggestion', 'searchKnowledge', 'generateSuggestions'];\n    for (const methodName of conversationsStubMethods) {\n      const callPromise = this.conversationsStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || undefined;\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n      this.innerApiCalls[methodName] = apiCall;\n    }\n    return this.conversationsStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @deprecated Use the apiEndpoint method of the client instance.\n   * @returns {string} The DNS address for this service.\n   */\n  static get servicePath() {\n    if (typeof process === 'object' && typeof process.emitWarning === 'function') {\n      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');\n    }\n    return 'dialogflow.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath.\n   * @deprecated Use the apiEndpoint method of the client instance.\n   * @returns {string} The DNS address for this service.\n   */\n  static get apiEndpoint() {\n    if (typeof process === 'object' && typeof process.emitWarning === 'function') {\n      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');\n    }\n    return 'dialogflow.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n  get apiEndpoint() {\n    return this._servicePath;\n  }\n  get universeDomain() {\n    return this._universeDomain;\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/dialogflow'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n    return this.auth.getProjectId();\n  }\n  createConversation(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: request.parent ?? ''\n    });\n    this.initialize();\n    this._log.info('createConversation request %j', request);\n    const wrappedCallback = callback ? (error, response, options, rawResponse) => {\n      this._log.info('createConversation response %j', response);\n      callback(error, response, options, rawResponse); // We verified callback above.\n    } : undefined;\n    return this.innerApiCalls.createConversation(request, options, wrappedCallback)?.then(([response, options, rawResponse]) => {\n      this._log.info('createConversation response %j', response);\n      return [response, options, rawResponse];\n    });\n  }\n  getConversation(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      name: request.name ?? ''\n    });\n    this.initialize();\n    this._log.info('getConversation request %j', request);\n    const wrappedCallback = callback ? (error, response, options, rawResponse) => {\n      this._log.info('getConversation response %j', response);\n      callback(error, response, options, rawResponse); // We verified callback above.\n    } : undefined;\n    return this.innerApiCalls.getConversation(request, options, wrappedCallback)?.then(([response, options, rawResponse]) => {\n      this._log.info('getConversation response %j', response);\n      return [response, options, rawResponse];\n    });\n  }\n  completeConversation(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      name: request.name ?? ''\n    });\n    this.initialize();\n    this._log.info('completeConversation request %j', request);\n    const wrappedCallback = callback ? (error, response, options, rawResponse) => {\n      this._log.info('completeConversation response %j', response);\n      callback(error, response, options, rawResponse); // We verified callback above.\n    } : undefined;\n    return this.innerApiCalls.completeConversation(request, options, wrappedCallback)?.then(([response, options, rawResponse]) => {\n      this._log.info('completeConversation response %j', response);\n      return [response, options, rawResponse];\n    });\n  }\n  ingestContextReferences(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      conversation: request.conversation ?? ''\n    });\n    this.initialize();\n    this._log.info('ingestContextReferences request %j', request);\n    const wrappedCallback = callback ? (error, response, options, rawResponse) => {\n      this._log.info('ingestContextReferences response %j', response);\n      callback(error, response, options, rawResponse); // We verified callback above.\n    } : undefined;\n    return this.innerApiCalls.ingestContextReferences(request, options, wrappedCallback)?.then(([response, options, rawResponse]) => {\n      this._log.info('ingestContextReferences response %j', response);\n      return [response, options, rawResponse];\n    });\n  }\n  suggestConversationSummary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      conversation: request.conversation ?? ''\n    });\n    this.initialize();\n    this._log.info('suggestConversationSummary request %j', request);\n    const wrappedCallback = callback ? (error, response, options, rawResponse) => {\n      this._log.info('suggestConversationSummary response %j', response);\n      callback(error, response, options, rawResponse); // We verified callback above.\n    } : undefined;\n    return this.innerApiCalls.suggestConversationSummary(request, options, wrappedCallback)?.then(([response, options, rawResponse]) => {\n      this._log.info('suggestConversationSummary response %j', response);\n      return [response, options, rawResponse];\n    });\n  }\n  generateStatelessSummary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      'stateless_conversation.parent': request.statelessConversation.parent ?? ''\n    });\n    this.initialize();\n    this._log.info('generateStatelessSummary request %j', request);\n    const wrappedCallback = callback ? (error, response, options, rawResponse) => {\n      this._log.info('generateStatelessSummary response %j', response);\n      callback(error, response, options, rawResponse); // We verified callback above.\n    } : undefined;\n    return this.innerApiCalls.generateStatelessSummary(request, options, wrappedCallback)?.then(([response, options, rawResponse]) => {\n      this._log.info('generateStatelessSummary response %j', response);\n      return [response, options, rawResponse];\n    });\n  }\n  generateStatelessSuggestion(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: request.parent ?? ''\n    });\n    this.initialize();\n    this._log.info('generateStatelessSuggestion request %j', request);\n    const wrappedCallback = callback ? (error, response, options, rawResponse) => {\n      this._log.info('generateStatelessSuggestion response %j', response);\n      callback(error, response, options, rawResponse); // We verified callback above.\n    } : undefined;\n    return this.innerApiCalls.generateStatelessSuggestion(request, options, wrappedCallback)?.then(([response, options, rawResponse]) => {\n      this._log.info('generateStatelessSuggestion response %j', response);\n      return [response, options, rawResponse];\n    });\n  }\n  searchKnowledge(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: request.parent ?? '',\n      conversation: request.conversation ?? ''\n    });\n    this.initialize();\n    this._log.info('searchKnowledge request %j', request);\n    const wrappedCallback = callback ? (error, response, options, rawResponse) => {\n      this._log.info('searchKnowledge response %j', response);\n      callback(error, response, options, rawResponse); // We verified callback above.\n    } : undefined;\n    return this.innerApiCalls.searchKnowledge(request, options, wrappedCallback)?.then(([response, options, rawResponse]) => {\n      this._log.info('searchKnowledge response %j', response);\n      return [response, options, rawResponse];\n    });\n  }\n  generateSuggestions(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      conversation: request.conversation ?? ''\n    });\n    this.initialize();\n    this._log.info('generateSuggestions request %j', request);\n    const wrappedCallback = callback ? (error, response, options, rawResponse) => {\n      this._log.info('generateSuggestions response %j', response);\n      callback(error, response, options, rawResponse); // We verified callback above.\n    } : undefined;\n    return this.innerApiCalls.generateSuggestions(request, options, wrappedCallback)?.then(([response, options, rawResponse]) => {\n      this._log.info('generateSuggestions response %j', response);\n      return [response, options, rawResponse];\n    });\n  }\n  listConversations(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: request.parent ?? ''\n    });\n    this.initialize();\n    const wrappedCallback = callback ? (error, values, nextPageRequest, rawResponse) => {\n      this._log.info('listConversations values %j', values);\n      callback(error, values, nextPageRequest, rawResponse); // We verified callback above.\n    } : undefined;\n    this._log.info('listConversations request %j', request);\n    return this.innerApiCalls.listConversations(request, options, wrappedCallback)?.then(([response, input, output]) => {\n      this._log.info('listConversations values %j', response);\n      return [response, input, output];\n    });\n  }\n  /**\n   * Equivalent to `listConversations`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project from which to list all conversation.\n   *   Format: `projects/<Project ID>/locations/<Location ID>`.\n   * @param {number} [request.pageSize]\n   *   Optional. The maximum number of items to return in a single page. By\n   *   default 100 and at most 1000.\n   * @param {string} [request.pageToken]\n   *   Optional. The next_page_token value returned from a previous list request.\n   * @param {string} [request.filter]\n   *   Optional. A filter expression that filters conversations listed in the\n   *   response. Only `lifecycle_state` can be filtered on in this way. For\n   *   example, the following expression only returns `COMPLETED` conversations:\n   *\n   *   `lifecycle_state = \"COMPLETED\"`\n   *\n   *   For more information about filtering, see\n   *   [API Filtering](https://aip.dev/160).\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing {@link protos.google.cloud.dialogflow.v2.Conversation|Conversation} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listConversationsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n   *   for more details and examples.\n   */\n  listConversationsStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: request.parent ?? ''\n    });\n    const defaultCallSettings = this._defaults['listConversations'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    this._log.info('listConversations stream %j', request);\n    return this.descriptors.page.listConversations.createStream(this.innerApiCalls.listConversations, request, callSettings);\n  }\n  /**\n   * Equivalent to `listConversations`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project from which to list all conversation.\n   *   Format: `projects/<Project ID>/locations/<Location ID>`.\n   * @param {number} [request.pageSize]\n   *   Optional. The maximum number of items to return in a single page. By\n   *   default 100 and at most 1000.\n   * @param {string} [request.pageToken]\n   *   Optional. The next_page_token value returned from a previous list request.\n   * @param {string} [request.filter]\n   *   Optional. A filter expression that filters conversations listed in the\n   *   response. Only `lifecycle_state` can be filtered on in this way. For\n   *   example, the following expression only returns `COMPLETED` conversations:\n   *\n   *   `lifecycle_state = \"COMPLETED\"`\n   *\n   *   For more information about filtering, see\n   *   [API Filtering](https://aip.dev/160).\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   {@link protos.google.cloud.dialogflow.v2.Conversation|Conversation}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n   *   for more details and examples.\n   * @example <caption>include:samples/generated/v2/conversations.list_conversations.js</caption>\n   * region_tag:dialogflow_v2_generated_Conversations_ListConversations_async\n   */\n  listConversationsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: request.parent ?? ''\n    });\n    const defaultCallSettings = this._defaults['listConversations'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    this._log.info('listConversations iterate %j', request);\n    return this.descriptors.page.listConversations.asyncIterate(this.innerApiCalls['listConversations'], request, callSettings);\n  }\n  listMessages(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: request.parent ?? ''\n    });\n    this.initialize();\n    const wrappedCallback = callback ? (error, values, nextPageRequest, rawResponse) => {\n      this._log.info('listMessages values %j', values);\n      callback(error, values, nextPageRequest, rawResponse); // We verified callback above.\n    } : undefined;\n    this._log.info('listMessages request %j', request);\n    return this.innerApiCalls.listMessages(request, options, wrappedCallback)?.then(([response, input, output]) => {\n      this._log.info('listMessages values %j', response);\n      return [response, input, output];\n    });\n  }\n  /**\n   * Equivalent to `listMessages`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the conversation to list messages for.\n   *   Format: `projects/<Project ID>/locations/<Location\n   *   ID>/conversations/<Conversation ID>`\n   * @param {string} [request.filter]\n   *   Optional. Filter on message fields. Currently predicates on `create_time`\n   *   and `create_time_epoch_microseconds` are supported. `create_time` only\n   *   support milliseconds accuracy. E.g.,\n   *   `create_time_epoch_microseconds > 1551790877964485` or\n   *   `create_time > 2017-01-15T01:30:15.01Z`.\n   *\n   *   For more information about filtering, see\n   *   [API Filtering](https://aip.dev/160).\n   * @param {number} [request.pageSize]\n   *   Optional. The maximum number of items to return in a single page. By\n   *   default 100 and at most 1000.\n   * @param {string} [request.pageToken]\n   *   Optional. The next_page_token value returned from a previous list request.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing {@link protos.google.cloud.dialogflow.v2.Message|Message} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listMessagesAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n   *   for more details and examples.\n   */\n  listMessagesStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: request.parent ?? ''\n    });\n    const defaultCallSettings = this._defaults['listMessages'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    this._log.info('listMessages stream %j', request);\n    return this.descriptors.page.listMessages.createStream(this.innerApiCalls.listMessages, request, callSettings);\n  }\n  /**\n   * Equivalent to `listMessages`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the conversation to list messages for.\n   *   Format: `projects/<Project ID>/locations/<Location\n   *   ID>/conversations/<Conversation ID>`\n   * @param {string} [request.filter]\n   *   Optional. Filter on message fields. Currently predicates on `create_time`\n   *   and `create_time_epoch_microseconds` are supported. `create_time` only\n   *   support milliseconds accuracy. E.g.,\n   *   `create_time_epoch_microseconds > 1551790877964485` or\n   *   `create_time > 2017-01-15T01:30:15.01Z`.\n   *\n   *   For more information about filtering, see\n   *   [API Filtering](https://aip.dev/160).\n   * @param {number} [request.pageSize]\n   *   Optional. The maximum number of items to return in a single page. By\n   *   default 100 and at most 1000.\n   * @param {string} [request.pageToken]\n   *   Optional. The next_page_token value returned from a previous list request.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   {@link protos.google.cloud.dialogflow.v2.Message|Message}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n   *   for more details and examples.\n   * @example <caption>include:samples/generated/v2/conversations.list_messages.js</caption>\n   * region_tag:dialogflow_v2_generated_Conversations_ListMessages_async\n   */\n  listMessagesAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: request.parent ?? ''\n    });\n    const defaultCallSettings = this._defaults['listMessages'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    this._log.info('listMessages iterate %j', request);\n    return this.descriptors.page.listMessages.asyncIterate(this.innerApiCalls['listMessages'], request, callSettings);\n  }\n  /**\n   * Gets information about a location.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Resource name for the location.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }\n   *   for more details and examples.\n   * @example\n   * ```\n   * const [response] = await client.getLocation(request);\n   * ```\n   */\n  getLocation(request, options, callback) {\n    return this.locationsClient.getLocation(request, options, callback);\n  }\n  /**\n   * Lists information about the supported locations for this service. Returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The resource that owns the locations collection, if applicable.\n   * @param {string} request.filter\n   *   The standard list filter.\n   * @param {number} request.pageSize\n   *   The standard list page size.\n   * @param {string} request.pageToken\n   *   The standard list page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n   *   for more details and examples.\n   * @example\n   * ```\n   * const iterable = client.listLocationsAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   * ```\n   */\n  listLocationsAsync(request, options) {\n    return this.locationsClient.listLocationsAsync(request, options);\n  }\n  // --------------------\n  // -- Path templates --\n  // --------------------\n  /**\n   * Return a fully-qualified conversationDataset resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} conversation_dataset\n   * @returns {string} Resource name string.\n   */\n  conversationDatasetPath(project, location, conversationDataset) {\n    return this.pathTemplates.conversationDatasetPathTemplate.render({\n      project: project,\n      location: location,\n      conversation_dataset: conversationDataset\n    });\n  }\n  /**\n   * Parse the project from ConversationDataset resource.\n   *\n   * @param {string} conversationDatasetName\n   *   A fully-qualified path representing ConversationDataset resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromConversationDatasetName(conversationDatasetName) {\n    return this.pathTemplates.conversationDatasetPathTemplate.match(conversationDatasetName).project;\n  }\n  /**\n   * Parse the location from ConversationDataset resource.\n   *\n   * @param {string} conversationDatasetName\n   *   A fully-qualified path representing ConversationDataset resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromConversationDatasetName(conversationDatasetName) {\n    return this.pathTemplates.conversationDatasetPathTemplate.match(conversationDatasetName).location;\n  }\n  /**\n   * Parse the conversation_dataset from ConversationDataset resource.\n   *\n   * @param {string} conversationDatasetName\n   *   A fully-qualified path representing ConversationDataset resource.\n   * @returns {string} A string representing the conversation_dataset.\n   */\n  matchConversationDatasetFromConversationDatasetName(conversationDatasetName) {\n    return this.pathTemplates.conversationDatasetPathTemplate.match(conversationDatasetName).conversation_dataset;\n  }\n  /**\n   * Return a fully-qualified encryptionSpec resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @returns {string} Resource name string.\n   */\n  encryptionSpecPath(project, location) {\n    return this.pathTemplates.encryptionSpecPathTemplate.render({\n      project: project,\n      location: location\n    });\n  }\n  /**\n   * Parse the project from EncryptionSpec resource.\n   *\n   * @param {string} encryptionSpecName\n   *   A fully-qualified path representing EncryptionSpec resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromEncryptionSpecName(encryptionSpecName) {\n    return this.pathTemplates.encryptionSpecPathTemplate.match(encryptionSpecName).project;\n  }\n  /**\n   * Parse the location from EncryptionSpec resource.\n   *\n   * @param {string} encryptionSpecName\n   *   A fully-qualified path representing EncryptionSpec resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromEncryptionSpecName(encryptionSpecName) {\n    return this.pathTemplates.encryptionSpecPathTemplate.match(encryptionSpecName).location;\n  }\n  /**\n   * Return a fully-qualified generator resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} generator\n   * @returns {string} Resource name string.\n   */\n  generatorPath(project, location, generator) {\n    return this.pathTemplates.generatorPathTemplate.render({\n      project: project,\n      location: location,\n      generator: generator\n    });\n  }\n  /**\n   * Parse the project from Generator resource.\n   *\n   * @param {string} generatorName\n   *   A fully-qualified path representing Generator resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromGeneratorName(generatorName) {\n    return this.pathTemplates.generatorPathTemplate.match(generatorName).project;\n  }\n  /**\n   * Parse the location from Generator resource.\n   *\n   * @param {string} generatorName\n   *   A fully-qualified path representing Generator resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromGeneratorName(generatorName) {\n    return this.pathTemplates.generatorPathTemplate.match(generatorName).location;\n  }\n  /**\n   * Parse the generator from Generator resource.\n   *\n   * @param {string} generatorName\n   *   A fully-qualified path representing Generator resource.\n   * @returns {string} A string representing the generator.\n   */\n  matchGeneratorFromGeneratorName(generatorName) {\n    return this.pathTemplates.generatorPathTemplate.match(generatorName).generator;\n  }\n  /**\n   * Return a fully-qualified location resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @returns {string} Resource name string.\n   */\n  locationPath(project, location) {\n    return this.pathTemplates.locationPathTemplate.render({\n      project: project,\n      location: location\n    });\n  }\n  /**\n   * Parse the project from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromLocationName(locationName) {\n    return this.pathTemplates.locationPathTemplate.match(locationName).project;\n  }\n  /**\n   * Parse the location from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromLocationName(locationName) {\n    return this.pathTemplates.locationPathTemplate.match(locationName).location;\n  }\n  /**\n   * Return a fully-qualified project resource name string.\n   *\n   * @param {string} project\n   * @returns {string} Resource name string.\n   */\n  projectPath(project) {\n    return this.pathTemplates.projectPathTemplate.render({\n      project: project\n    });\n  }\n  /**\n   * Parse the project from Project resource.\n   *\n   * @param {string} projectName\n   *   A fully-qualified path representing Project resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectName(projectName) {\n    return this.pathTemplates.projectPathTemplate.match(projectName).project;\n  }\n  /**\n   * Return a fully-qualified projectAgent resource name string.\n   *\n   * @param {string} project\n   * @returns {string} Resource name string.\n   */\n  projectAgentPath(project) {\n    return this.pathTemplates.projectAgentPathTemplate.render({\n      project: project\n    });\n  }\n  /**\n   * Parse the project from ProjectAgent resource.\n   *\n   * @param {string} projectAgentName\n   *   A fully-qualified path representing project_agent resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectAgentName(projectAgentName) {\n    return this.pathTemplates.projectAgentPathTemplate.match(projectAgentName).project;\n  }\n  /**\n   * Return a fully-qualified projectAgentEntityType resource name string.\n   *\n   * @param {string} project\n   * @param {string} entity_type\n   * @returns {string} Resource name string.\n   */\n  projectAgentEntityTypePath(project, entityType) {\n    return this.pathTemplates.projectAgentEntityTypePathTemplate.render({\n      project: project,\n      entity_type: entityType\n    });\n  }\n  /**\n   * Parse the project from ProjectAgentEntityType resource.\n   *\n   * @param {string} projectAgentEntityTypeName\n   *   A fully-qualified path representing project_agent_entity_type resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectAgentEntityTypeName(projectAgentEntityTypeName) {\n    return this.pathTemplates.projectAgentEntityTypePathTemplate.match(projectAgentEntityTypeName).project;\n  }\n  /**\n   * Parse the entity_type from ProjectAgentEntityType resource.\n   *\n   * @param {string} projectAgentEntityTypeName\n   *   A fully-qualified path representing project_agent_entity_type resource.\n   * @returns {string} A string representing the entity_type.\n   */\n  matchEntityTypeFromProjectAgentEntityTypeName(projectAgentEntityTypeName) {\n    return this.pathTemplates.projectAgentEntityTypePathTemplate.match(projectAgentEntityTypeName).entity_type;\n  }\n  /**\n   * Return a fully-qualified projectAgentEnvironment resource name string.\n   *\n   * @param {string} project\n   * @param {string} environment\n   * @returns {string} Resource name string.\n   */\n  projectAgentEnvironmentPath(project, environment) {\n    return this.pathTemplates.projectAgentEnvironmentPathTemplate.render({\n      project: project,\n      environment: environment\n    });\n  }\n  /**\n   * Parse the project from ProjectAgentEnvironment resource.\n   *\n   * @param {string} projectAgentEnvironmentName\n   *   A fully-qualified path representing project_agent_environment resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectAgentEnvironmentName(projectAgentEnvironmentName) {\n    return this.pathTemplates.projectAgentEnvironmentPathTemplate.match(projectAgentEnvironmentName).project;\n  }\n  /**\n   * Parse the environment from ProjectAgentEnvironment resource.\n   *\n   * @param {string} projectAgentEnvironmentName\n   *   A fully-qualified path representing project_agent_environment resource.\n   * @returns {string} A string representing the environment.\n   */\n  matchEnvironmentFromProjectAgentEnvironmentName(projectAgentEnvironmentName) {\n    return this.pathTemplates.projectAgentEnvironmentPathTemplate.match(projectAgentEnvironmentName).environment;\n  }\n  /**\n   * Return a fully-qualified projectAgentEnvironmentUserSessionContext resource name string.\n   *\n   * @param {string} project\n   * @param {string} environment\n   * @param {string} user\n   * @param {string} session\n   * @param {string} context\n   * @returns {string} Resource name string.\n   */\n  projectAgentEnvironmentUserSessionContextPath(project, environment, user, session, context) {\n    return this.pathTemplates.projectAgentEnvironmentUserSessionContextPathTemplate.render({\n      project: project,\n      environment: environment,\n      user: user,\n      session: session,\n      context: context\n    });\n  }\n  /**\n   * Parse the project from ProjectAgentEnvironmentUserSessionContext resource.\n   *\n   * @param {string} projectAgentEnvironmentUserSessionContextName\n   *   A fully-qualified path representing project_agent_environment_user_session_context resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName) {\n    return this.pathTemplates.projectAgentEnvironmentUserSessionContextPathTemplate.match(projectAgentEnvironmentUserSessionContextName).project;\n  }\n  /**\n   * Parse the environment from ProjectAgentEnvironmentUserSessionContext resource.\n   *\n   * @param {string} projectAgentEnvironmentUserSessionContextName\n   *   A fully-qualified path representing project_agent_environment_user_session_context resource.\n   * @returns {string} A string representing the environment.\n   */\n  matchEnvironmentFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName) {\n    return this.pathTemplates.projectAgentEnvironmentUserSessionContextPathTemplate.match(projectAgentEnvironmentUserSessionContextName).environment;\n  }\n  /**\n   * Parse the user from ProjectAgentEnvironmentUserSessionContext resource.\n   *\n   * @param {string} projectAgentEnvironmentUserSessionContextName\n   *   A fully-qualified path representing project_agent_environment_user_session_context resource.\n   * @returns {string} A string representing the user.\n   */\n  matchUserFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName) {\n    return this.pathTemplates.projectAgentEnvironmentUserSessionContextPathTemplate.match(projectAgentEnvironmentUserSessionContextName).user;\n  }\n  /**\n   * Parse the session from ProjectAgentEnvironmentUserSessionContext resource.\n   *\n   * @param {string} projectAgentEnvironmentUserSessionContextName\n   *   A fully-qualified path representing project_agent_environment_user_session_context resource.\n   * @returns {string} A string representing the session.\n   */\n  matchSessionFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName) {\n    return this.pathTemplates.projectAgentEnvironmentUserSessionContextPathTemplate.match(projectAgentEnvironmentUserSessionContextName).session;\n  }\n  /**\n   * Parse the context from ProjectAgentEnvironmentUserSessionContext resource.\n   *\n   * @param {string} projectAgentEnvironmentUserSessionContextName\n   *   A fully-qualified path representing project_agent_environment_user_session_context resource.\n   * @returns {string} A string representing the context.\n   */\n  matchContextFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName) {\n    return this.pathTemplates.projectAgentEnvironmentUserSessionContextPathTemplate.match(projectAgentEnvironmentUserSessionContextName).context;\n  }\n  /**\n   * Return a fully-qualified projectAgentEnvironmentUserSessionEntityType resource name string.\n   *\n   * @param {string} project\n   * @param {string} environment\n   * @param {string} user\n   * @param {string} session\n   * @param {string} entity_type\n   * @returns {string} Resource name string.\n   */\n  projectAgentEnvironmentUserSessionEntityTypePath(project, environment, user, session, entityType) {\n    return this.pathTemplates.projectAgentEnvironmentUserSessionEntityTypePathTemplate.render({\n      project: project,\n      environment: environment,\n      user: user,\n      session: session,\n      entity_type: entityType\n    });\n  }\n  /**\n   * Parse the project from ProjectAgentEnvironmentUserSessionEntityType resource.\n   *\n   * @param {string} projectAgentEnvironmentUserSessionEntityTypeName\n   *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName) {\n    return this.pathTemplates.projectAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectAgentEnvironmentUserSessionEntityTypeName).project;\n  }\n  /**\n   * Parse the environment from ProjectAgentEnvironmentUserSessionEntityType resource.\n   *\n   * @param {string} projectAgentEnvironmentUserSessionEntityTypeName\n   *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.\n   * @returns {string} A string representing the environment.\n   */\n  matchEnvironmentFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName) {\n    return this.pathTemplates.projectAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectAgentEnvironmentUserSessionEntityTypeName).environment;\n  }\n  /**\n   * Parse the user from ProjectAgentEnvironmentUserSessionEntityType resource.\n   *\n   * @param {string} projectAgentEnvironmentUserSessionEntityTypeName\n   *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.\n   * @returns {string} A string representing the user.\n   */\n  matchUserFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName) {\n    return this.pathTemplates.projectAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectAgentEnvironmentUserSessionEntityTypeName).user;\n  }\n  /**\n   * Parse the session from ProjectAgentEnvironmentUserSessionEntityType resource.\n   *\n   * @param {string} projectAgentEnvironmentUserSessionEntityTypeName\n   *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.\n   * @returns {string} A string representing the session.\n   */\n  matchSessionFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName) {\n    return this.pathTemplates.projectAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectAgentEnvironmentUserSessionEntityTypeName).session;\n  }\n  /**\n   * Parse the entity_type from ProjectAgentEnvironmentUserSessionEntityType resource.\n   *\n   * @param {string} projectAgentEnvironmentUserSessionEntityTypeName\n   *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.\n   * @returns {string} A string representing the entity_type.\n   */\n  matchEntityTypeFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName) {\n    return this.pathTemplates.projectAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectAgentEnvironmentUserSessionEntityTypeName).entity_type;\n  }\n  /**\n   * Return a fully-qualified projectAgentFulfillment resource name string.\n   *\n   * @param {string} project\n   * @returns {string} Resource name string.\n   */\n  projectAgentFulfillmentPath(project) {\n    return this.pathTemplates.projectAgentFulfillmentPathTemplate.render({\n      project: project\n    });\n  }\n  /**\n   * Parse the project from ProjectAgentFulfillment resource.\n   *\n   * @param {string} projectAgentFulfillmentName\n   *   A fully-qualified path representing project_agent_fulfillment resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectAgentFulfillmentName(projectAgentFulfillmentName) {\n    return this.pathTemplates.projectAgentFulfillmentPathTemplate.match(projectAgentFulfillmentName).project;\n  }\n  /**\n   * Return a fully-qualified projectAgentIntent resource name string.\n   *\n   * @param {string} project\n   * @param {string} intent\n   * @returns {string} Resource name string.\n   */\n  projectAgentIntentPath(project, intent) {\n    return this.pathTemplates.projectAgentIntentPathTemplate.render({\n      project: project,\n      intent: intent\n    });\n  }\n  /**\n   * Parse the project from ProjectAgentIntent resource.\n   *\n   * @param {string} projectAgentIntentName\n   *   A fully-qualified path representing project_agent_intent resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectAgentIntentName(projectAgentIntentName) {\n    return this.pathTemplates.projectAgentIntentPathTemplate.match(projectAgentIntentName).project;\n  }\n  /**\n   * Parse the intent from ProjectAgentIntent resource.\n   *\n   * @param {string} projectAgentIntentName\n   *   A fully-qualified path representing project_agent_intent resource.\n   * @returns {string} A string representing the intent.\n   */\n  matchIntentFromProjectAgentIntentName(projectAgentIntentName) {\n    return this.pathTemplates.projectAgentIntentPathTemplate.match(projectAgentIntentName).intent;\n  }\n  /**\n   * Return a fully-qualified projectAgentSessionContext resource name string.\n   *\n   * @param {string} project\n   * @param {string} session\n   * @param {string} context\n   * @returns {string} Resource name string.\n   */\n  projectAgentSessionContextPath(project, session, context) {\n    return this.pathTemplates.projectAgentSessionContextPathTemplate.render({\n      project: project,\n      session: session,\n      context: context\n    });\n  }\n  /**\n   * Parse the project from ProjectAgentSessionContext resource.\n   *\n   * @param {string} projectAgentSessionContextName\n   *   A fully-qualified path representing project_agent_session_context resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectAgentSessionContextName(projectAgentSessionContextName) {\n    return this.pathTemplates.projectAgentSessionContextPathTemplate.match(projectAgentSessionContextName).project;\n  }\n  /**\n   * Parse the session from ProjectAgentSessionContext resource.\n   *\n   * @param {string} projectAgentSessionContextName\n   *   A fully-qualified path representing project_agent_session_context resource.\n   * @returns {string} A string representing the session.\n   */\n  matchSessionFromProjectAgentSessionContextName(projectAgentSessionContextName) {\n    return this.pathTemplates.projectAgentSessionContextPathTemplate.match(projectAgentSessionContextName).session;\n  }\n  /**\n   * Parse the context from ProjectAgentSessionContext resource.\n   *\n   * @param {string} projectAgentSessionContextName\n   *   A fully-qualified path representing project_agent_session_context resource.\n   * @returns {string} A string representing the context.\n   */\n  matchContextFromProjectAgentSessionContextName(projectAgentSessionContextName) {\n    return this.pathTemplates.projectAgentSessionContextPathTemplate.match(projectAgentSessionContextName).context;\n  }\n  /**\n   * Return a fully-qualified projectAgentSessionEntityType resource name string.\n   *\n   * @param {string} project\n   * @param {string} session\n   * @param {string} entity_type\n   * @returns {string} Resource name string.\n   */\n  projectAgentSessionEntityTypePath(project, session, entityType) {\n    return this.pathTemplates.projectAgentSessionEntityTypePathTemplate.render({\n      project: project,\n      session: session,\n      entity_type: entityType\n    });\n  }\n  /**\n   * Parse the project from ProjectAgentSessionEntityType resource.\n   *\n   * @param {string} projectAgentSessionEntityTypeName\n   *   A fully-qualified path representing project_agent_session_entity_type resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectAgentSessionEntityTypeName(projectAgentSessionEntityTypeName) {\n    return this.pathTemplates.projectAgentSessionEntityTypePathTemplate.match(projectAgentSessionEntityTypeName).project;\n  }\n  /**\n   * Parse the session from ProjectAgentSessionEntityType resource.\n   *\n   * @param {string} projectAgentSessionEntityTypeName\n   *   A fully-qualified path representing project_agent_session_entity_type resource.\n   * @returns {string} A string representing the session.\n   */\n  matchSessionFromProjectAgentSessionEntityTypeName(projectAgentSessionEntityTypeName) {\n    return this.pathTemplates.projectAgentSessionEntityTypePathTemplate.match(projectAgentSessionEntityTypeName).session;\n  }\n  /**\n   * Parse the entity_type from ProjectAgentSessionEntityType resource.\n   *\n   * @param {string} projectAgentSessionEntityTypeName\n   *   A fully-qualified path representing project_agent_session_entity_type resource.\n   * @returns {string} A string representing the entity_type.\n   */\n  matchEntityTypeFromProjectAgentSessionEntityTypeName(projectAgentSessionEntityTypeName) {\n    return this.pathTemplates.projectAgentSessionEntityTypePathTemplate.match(projectAgentSessionEntityTypeName).entity_type;\n  }\n  /**\n   * Return a fully-qualified projectAgentVersion resource name string.\n   *\n   * @param {string} project\n   * @param {string} version\n   * @returns {string} Resource name string.\n   */\n  projectAgentVersionPath(project, version) {\n    return this.pathTemplates.projectAgentVersionPathTemplate.render({\n      project: project,\n      version: version\n    });\n  }\n  /**\n   * Parse the project from ProjectAgentVersion resource.\n   *\n   * @param {string} projectAgentVersionName\n   *   A fully-qualified path representing project_agent_version resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectAgentVersionName(projectAgentVersionName) {\n    return this.pathTemplates.projectAgentVersionPathTemplate.match(projectAgentVersionName).project;\n  }\n  /**\n   * Parse the version from ProjectAgentVersion resource.\n   *\n   * @param {string} projectAgentVersionName\n   *   A fully-qualified path representing project_agent_version resource.\n   * @returns {string} A string representing the version.\n   */\n  matchVersionFromProjectAgentVersionName(projectAgentVersionName) {\n    return this.pathTemplates.projectAgentVersionPathTemplate.match(projectAgentVersionName).version;\n  }\n  /**\n   * Return a fully-qualified projectAnswerRecord resource name string.\n   *\n   * @param {string} project\n   * @param {string} answer_record\n   * @returns {string} Resource name string.\n   */\n  projectAnswerRecordPath(project, answerRecord) {\n    return this.pathTemplates.projectAnswerRecordPathTemplate.render({\n      project: project,\n      answer_record: answerRecord\n    });\n  }\n  /**\n   * Parse the project from ProjectAnswerRecord resource.\n   *\n   * @param {string} projectAnswerRecordName\n   *   A fully-qualified path representing project_answer_record resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectAnswerRecordName(projectAnswerRecordName) {\n    return this.pathTemplates.projectAnswerRecordPathTemplate.match(projectAnswerRecordName).project;\n  }\n  /**\n   * Parse the answer_record from ProjectAnswerRecord resource.\n   *\n   * @param {string} projectAnswerRecordName\n   *   A fully-qualified path representing project_answer_record resource.\n   * @returns {string} A string representing the answer_record.\n   */\n  matchAnswerRecordFromProjectAnswerRecordName(projectAnswerRecordName) {\n    return this.pathTemplates.projectAnswerRecordPathTemplate.match(projectAnswerRecordName).answer_record;\n  }\n  /**\n   * Return a fully-qualified projectConversation resource name string.\n   *\n   * @param {string} project\n   * @param {string} conversation\n   * @returns {string} Resource name string.\n   */\n  projectConversationPath(project, conversation) {\n    return this.pathTemplates.projectConversationPathTemplate.render({\n      project: project,\n      conversation: conversation\n    });\n  }\n  /**\n   * Parse the project from ProjectConversation resource.\n   *\n   * @param {string} projectConversationName\n   *   A fully-qualified path representing project_conversation resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectConversationName(projectConversationName) {\n    return this.pathTemplates.projectConversationPathTemplate.match(projectConversationName).project;\n  }\n  /**\n   * Parse the conversation from ProjectConversation resource.\n   *\n   * @param {string} projectConversationName\n   *   A fully-qualified path representing project_conversation resource.\n   * @returns {string} A string representing the conversation.\n   */\n  matchConversationFromProjectConversationName(projectConversationName) {\n    return this.pathTemplates.projectConversationPathTemplate.match(projectConversationName).conversation;\n  }\n  /**\n   * Return a fully-qualified projectConversationMessage resource name string.\n   *\n   * @param {string} project\n   * @param {string} conversation\n   * @param {string} message\n   * @returns {string} Resource name string.\n   */\n  projectConversationMessagePath(project, conversation, message) {\n    return this.pathTemplates.projectConversationMessagePathTemplate.render({\n      project: project,\n      conversation: conversation,\n      message: message\n    });\n  }\n  /**\n   * Parse the project from ProjectConversationMessage resource.\n   *\n   * @param {string} projectConversationMessageName\n   *   A fully-qualified path representing project_conversation_message resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectConversationMessageName(projectConversationMessageName) {\n    return this.pathTemplates.projectConversationMessagePathTemplate.match(projectConversationMessageName).project;\n  }\n  /**\n   * Parse the conversation from ProjectConversationMessage resource.\n   *\n   * @param {string} projectConversationMessageName\n   *   A fully-qualified path representing project_conversation_message resource.\n   * @returns {string} A string representing the conversation.\n   */\n  matchConversationFromProjectConversationMessageName(projectConversationMessageName) {\n    return this.pathTemplates.projectConversationMessagePathTemplate.match(projectConversationMessageName).conversation;\n  }\n  /**\n   * Parse the message from ProjectConversationMessage resource.\n   *\n   * @param {string} projectConversationMessageName\n   *   A fully-qualified path representing project_conversation_message resource.\n   * @returns {string} A string representing the message.\n   */\n  matchMessageFromProjectConversationMessageName(projectConversationMessageName) {\n    return this.pathTemplates.projectConversationMessagePathTemplate.match(projectConversationMessageName).message;\n  }\n  /**\n   * Return a fully-qualified projectConversationModel resource name string.\n   *\n   * @param {string} project\n   * @param {string} conversation_model\n   * @returns {string} Resource name string.\n   */\n  projectConversationModelPath(project, conversationModel) {\n    return this.pathTemplates.projectConversationModelPathTemplate.render({\n      project: project,\n      conversation_model: conversationModel\n    });\n  }\n  /**\n   * Parse the project from ProjectConversationModel resource.\n   *\n   * @param {string} projectConversationModelName\n   *   A fully-qualified path representing project_conversation_model resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectConversationModelName(projectConversationModelName) {\n    return this.pathTemplates.projectConversationModelPathTemplate.match(projectConversationModelName).project;\n  }\n  /**\n   * Parse the conversation_model from ProjectConversationModel resource.\n   *\n   * @param {string} projectConversationModelName\n   *   A fully-qualified path representing project_conversation_model resource.\n   * @returns {string} A string representing the conversation_model.\n   */\n  matchConversationModelFromProjectConversationModelName(projectConversationModelName) {\n    return this.pathTemplates.projectConversationModelPathTemplate.match(projectConversationModelName).conversation_model;\n  }\n  /**\n   * Return a fully-qualified projectConversationModelEvaluation resource name string.\n   *\n   * @param {string} project\n   * @param {string} conversation_model\n   * @param {string} evaluation\n   * @returns {string} Resource name string.\n   */\n  projectConversationModelEvaluationPath(project, conversationModel, evaluation) {\n    return this.pathTemplates.projectConversationModelEvaluationPathTemplate.render({\n      project: project,\n      conversation_model: conversationModel,\n      evaluation: evaluation\n    });\n  }\n  /**\n   * Parse the project from ProjectConversationModelEvaluation resource.\n   *\n   * @param {string} projectConversationModelEvaluationName\n   *   A fully-qualified path representing project_conversation_model_evaluation resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectConversationModelEvaluationName(projectConversationModelEvaluationName) {\n    return this.pathTemplates.projectConversationModelEvaluationPathTemplate.match(projectConversationModelEvaluationName).project;\n  }\n  /**\n   * Parse the conversation_model from ProjectConversationModelEvaluation resource.\n   *\n   * @param {string} projectConversationModelEvaluationName\n   *   A fully-qualified path representing project_conversation_model_evaluation resource.\n   * @returns {string} A string representing the conversation_model.\n   */\n  matchConversationModelFromProjectConversationModelEvaluationName(projectConversationModelEvaluationName) {\n    return this.pathTemplates.projectConversationModelEvaluationPathTemplate.match(projectConversationModelEvaluationName).conversation_model;\n  }\n  /**\n   * Parse the evaluation from ProjectConversationModelEvaluation resource.\n   *\n   * @param {string} projectConversationModelEvaluationName\n   *   A fully-qualified path representing project_conversation_model_evaluation resource.\n   * @returns {string} A string representing the evaluation.\n   */\n  matchEvaluationFromProjectConversationModelEvaluationName(projectConversationModelEvaluationName) {\n    return this.pathTemplates.projectConversationModelEvaluationPathTemplate.match(projectConversationModelEvaluationName).evaluation;\n  }\n  /**\n   * Return a fully-qualified projectConversationParticipant resource name string.\n   *\n   * @param {string} project\n   * @param {string} conversation\n   * @param {string} participant\n   * @returns {string} Resource name string.\n   */\n  projectConversationParticipantPath(project, conversation, participant) {\n    return this.pathTemplates.projectConversationParticipantPathTemplate.render({\n      project: project,\n      conversation: conversation,\n      participant: participant\n    });\n  }\n  /**\n   * Parse the project from ProjectConversationParticipant resource.\n   *\n   * @param {string} projectConversationParticipantName\n   *   A fully-qualified path representing project_conversation_participant resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectConversationParticipantName(projectConversationParticipantName) {\n    return this.pathTemplates.projectConversationParticipantPathTemplate.match(projectConversationParticipantName).project;\n  }\n  /**\n   * Parse the conversation from ProjectConversationParticipant resource.\n   *\n   * @param {string} projectConversationParticipantName\n   *   A fully-qualified path representing project_conversation_participant resource.\n   * @returns {string} A string representing the conversation.\n   */\n  matchConversationFromProjectConversationParticipantName(projectConversationParticipantName) {\n    return this.pathTemplates.projectConversationParticipantPathTemplate.match(projectConversationParticipantName).conversation;\n  }\n  /**\n   * Parse the participant from ProjectConversationParticipant resource.\n   *\n   * @param {string} projectConversationParticipantName\n   *   A fully-qualified path representing project_conversation_participant resource.\n   * @returns {string} A string representing the participant.\n   */\n  matchParticipantFromProjectConversationParticipantName(projectConversationParticipantName) {\n    return this.pathTemplates.projectConversationParticipantPathTemplate.match(projectConversationParticipantName).participant;\n  }\n  /**\n   * Return a fully-qualified projectConversationProfile resource name string.\n   *\n   * @param {string} project\n   * @param {string} conversation_profile\n   * @returns {string} Resource name string.\n   */\n  projectConversationProfilePath(project, conversationProfile) {\n    return this.pathTemplates.projectConversationProfilePathTemplate.render({\n      project: project,\n      conversation_profile: conversationProfile\n    });\n  }\n  /**\n   * Parse the project from ProjectConversationProfile resource.\n   *\n   * @param {string} projectConversationProfileName\n   *   A fully-qualified path representing project_conversation_profile resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectConversationProfileName(projectConversationProfileName) {\n    return this.pathTemplates.projectConversationProfilePathTemplate.match(projectConversationProfileName).project;\n  }\n  /**\n   * Parse the conversation_profile from ProjectConversationProfile resource.\n   *\n   * @param {string} projectConversationProfileName\n   *   A fully-qualified path representing project_conversation_profile resource.\n   * @returns {string} A string representing the conversation_profile.\n   */\n  matchConversationProfileFromProjectConversationProfileName(projectConversationProfileName) {\n    return this.pathTemplates.projectConversationProfilePathTemplate.match(projectConversationProfileName).conversation_profile;\n  }\n  /**\n   * Return a fully-qualified projectKnowledgeBase resource name string.\n   *\n   * @param {string} project\n   * @param {string} knowledge_base\n   * @returns {string} Resource name string.\n   */\n  projectKnowledgeBasePath(project, knowledgeBase) {\n    return this.pathTemplates.projectKnowledgeBasePathTemplate.render({\n      project: project,\n      knowledge_base: knowledgeBase\n    });\n  }\n  /**\n   * Parse the project from ProjectKnowledgeBase resource.\n   *\n   * @param {string} projectKnowledgeBaseName\n   *   A fully-qualified path representing project_knowledge_base resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectKnowledgeBaseName(projectKnowledgeBaseName) {\n    return this.pathTemplates.projectKnowledgeBasePathTemplate.match(projectKnowledgeBaseName).project;\n  }\n  /**\n   * Parse the knowledge_base from ProjectKnowledgeBase resource.\n   *\n   * @param {string} projectKnowledgeBaseName\n   *   A fully-qualified path representing project_knowledge_base resource.\n   * @returns {string} A string representing the knowledge_base.\n   */\n  matchKnowledgeBaseFromProjectKnowledgeBaseName(projectKnowledgeBaseName) {\n    return this.pathTemplates.projectKnowledgeBasePathTemplate.match(projectKnowledgeBaseName).knowledge_base;\n  }\n  /**\n   * Return a fully-qualified projectKnowledgeBaseDocument resource name string.\n   *\n   * @param {string} project\n   * @param {string} knowledge_base\n   * @param {string} document\n   * @returns {string} Resource name string.\n   */\n  projectKnowledgeBaseDocumentPath(project, knowledgeBase, document) {\n    return this.pathTemplates.projectKnowledgeBaseDocumentPathTemplate.render({\n      project: project,\n      knowledge_base: knowledgeBase,\n      document: document\n    });\n  }\n  /**\n   * Parse the project from ProjectKnowledgeBaseDocument resource.\n   *\n   * @param {string} projectKnowledgeBaseDocumentName\n   *   A fully-qualified path representing project_knowledge_base_document resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectKnowledgeBaseDocumentName(projectKnowledgeBaseDocumentName) {\n    return this.pathTemplates.projectKnowledgeBaseDocumentPathTemplate.match(projectKnowledgeBaseDocumentName).project;\n  }\n  /**\n   * Parse the knowledge_base from ProjectKnowledgeBaseDocument resource.\n   *\n   * @param {string} projectKnowledgeBaseDocumentName\n   *   A fully-qualified path representing project_knowledge_base_document resource.\n   * @returns {string} A string representing the knowledge_base.\n   */\n  matchKnowledgeBaseFromProjectKnowledgeBaseDocumentName(projectKnowledgeBaseDocumentName) {\n    return this.pathTemplates.projectKnowledgeBaseDocumentPathTemplate.match(projectKnowledgeBaseDocumentName).knowledge_base;\n  }\n  /**\n   * Parse the document from ProjectKnowledgeBaseDocument resource.\n   *\n   * @param {string} projectKnowledgeBaseDocumentName\n   *   A fully-qualified path representing project_knowledge_base_document resource.\n   * @returns {string} A string representing the document.\n   */\n  matchDocumentFromProjectKnowledgeBaseDocumentName(projectKnowledgeBaseDocumentName) {\n    return this.pathTemplates.projectKnowledgeBaseDocumentPathTemplate.match(projectKnowledgeBaseDocumentName).document;\n  }\n  /**\n   * Return a fully-qualified projectLocationAgent resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @returns {string} Resource name string.\n   */\n  projectLocationAgentPath(project, location) {\n    return this.pathTemplates.projectLocationAgentPathTemplate.render({\n      project: project,\n      location: location\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationAgent resource.\n   *\n   * @param {string} projectLocationAgentName\n   *   A fully-qualified path representing project_location_agent resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationAgentName(projectLocationAgentName) {\n    return this.pathTemplates.projectLocationAgentPathTemplate.match(projectLocationAgentName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationAgent resource.\n   *\n   * @param {string} projectLocationAgentName\n   *   A fully-qualified path representing project_location_agent resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationAgentName(projectLocationAgentName) {\n    return this.pathTemplates.projectLocationAgentPathTemplate.match(projectLocationAgentName).location;\n  }\n  /**\n   * Return a fully-qualified projectLocationAgentEntityType resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} entity_type\n   * @returns {string} Resource name string.\n   */\n  projectLocationAgentEntityTypePath(project, location, entityType) {\n    return this.pathTemplates.projectLocationAgentEntityTypePathTemplate.render({\n      project: project,\n      location: location,\n      entity_type: entityType\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationAgentEntityType resource.\n   *\n   * @param {string} projectLocationAgentEntityTypeName\n   *   A fully-qualified path representing project_location_agent_entity_type resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationAgentEntityTypeName(projectLocationAgentEntityTypeName) {\n    return this.pathTemplates.projectLocationAgentEntityTypePathTemplate.match(projectLocationAgentEntityTypeName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationAgentEntityType resource.\n   *\n   * @param {string} projectLocationAgentEntityTypeName\n   *   A fully-qualified path representing project_location_agent_entity_type resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationAgentEntityTypeName(projectLocationAgentEntityTypeName) {\n    return this.pathTemplates.projectLocationAgentEntityTypePathTemplate.match(projectLocationAgentEntityTypeName).location;\n  }\n  /**\n   * Parse the entity_type from ProjectLocationAgentEntityType resource.\n   *\n   * @param {string} projectLocationAgentEntityTypeName\n   *   A fully-qualified path representing project_location_agent_entity_type resource.\n   * @returns {string} A string representing the entity_type.\n   */\n  matchEntityTypeFromProjectLocationAgentEntityTypeName(projectLocationAgentEntityTypeName) {\n    return this.pathTemplates.projectLocationAgentEntityTypePathTemplate.match(projectLocationAgentEntityTypeName).entity_type;\n  }\n  /**\n   * Return a fully-qualified projectLocationAgentEnvironment resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} environment\n   * @returns {string} Resource name string.\n   */\n  projectLocationAgentEnvironmentPath(project, location, environment) {\n    return this.pathTemplates.projectLocationAgentEnvironmentPathTemplate.render({\n      project: project,\n      location: location,\n      environment: environment\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationAgentEnvironment resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentName\n   *   A fully-qualified path representing project_location_agent_environment resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationAgentEnvironmentName(projectLocationAgentEnvironmentName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentPathTemplate.match(projectLocationAgentEnvironmentName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationAgentEnvironment resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentName\n   *   A fully-qualified path representing project_location_agent_environment resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationAgentEnvironmentName(projectLocationAgentEnvironmentName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentPathTemplate.match(projectLocationAgentEnvironmentName).location;\n  }\n  /**\n   * Parse the environment from ProjectLocationAgentEnvironment resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentName\n   *   A fully-qualified path representing project_location_agent_environment resource.\n   * @returns {string} A string representing the environment.\n   */\n  matchEnvironmentFromProjectLocationAgentEnvironmentName(projectLocationAgentEnvironmentName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentPathTemplate.match(projectLocationAgentEnvironmentName).environment;\n  }\n  /**\n   * Return a fully-qualified projectLocationAgentEnvironmentUserSessionContext resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} environment\n   * @param {string} user\n   * @param {string} session\n   * @param {string} context\n   * @returns {string} Resource name string.\n   */\n  projectLocationAgentEnvironmentUserSessionContextPath(project, location, environment, user, session, context) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.render({\n      project: project,\n      location: location,\n      environment: environment,\n      user: user,\n      session: session,\n      context: context\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationAgentEnvironmentUserSessionContext resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentUserSessionContextName\n   *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.match(projectLocationAgentEnvironmentUserSessionContextName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationAgentEnvironmentUserSessionContext resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentUserSessionContextName\n   *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.match(projectLocationAgentEnvironmentUserSessionContextName).location;\n  }\n  /**\n   * Parse the environment from ProjectLocationAgentEnvironmentUserSessionContext resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentUserSessionContextName\n   *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.\n   * @returns {string} A string representing the environment.\n   */\n  matchEnvironmentFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.match(projectLocationAgentEnvironmentUserSessionContextName).environment;\n  }\n  /**\n   * Parse the user from ProjectLocationAgentEnvironmentUserSessionContext resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentUserSessionContextName\n   *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.\n   * @returns {string} A string representing the user.\n   */\n  matchUserFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.match(projectLocationAgentEnvironmentUserSessionContextName).user;\n  }\n  /**\n   * Parse the session from ProjectLocationAgentEnvironmentUserSessionContext resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentUserSessionContextName\n   *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.\n   * @returns {string} A string representing the session.\n   */\n  matchSessionFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.match(projectLocationAgentEnvironmentUserSessionContextName).session;\n  }\n  /**\n   * Parse the context from ProjectLocationAgentEnvironmentUserSessionContext resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentUserSessionContextName\n   *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.\n   * @returns {string} A string representing the context.\n   */\n  matchContextFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.match(projectLocationAgentEnvironmentUserSessionContextName).context;\n  }\n  /**\n   * Return a fully-qualified projectLocationAgentEnvironmentUserSessionEntityType resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} environment\n   * @param {string} user\n   * @param {string} session\n   * @param {string} entity_type\n   * @returns {string} Resource name string.\n   */\n  projectLocationAgentEnvironmentUserSessionEntityTypePath(project, location, environment, user, session, entityType) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.render({\n      project: project,\n      location: location,\n      environment: environment,\n      user: user,\n      session: session,\n      entity_type: entityType\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationAgentEnvironmentUserSessionEntityType resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName\n   *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentUserSessionEntityTypeName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationAgentEnvironmentUserSessionEntityType resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName\n   *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentUserSessionEntityTypeName).location;\n  }\n  /**\n   * Parse the environment from ProjectLocationAgentEnvironmentUserSessionEntityType resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName\n   *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.\n   * @returns {string} A string representing the environment.\n   */\n  matchEnvironmentFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentUserSessionEntityTypeName).environment;\n  }\n  /**\n   * Parse the user from ProjectLocationAgentEnvironmentUserSessionEntityType resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName\n   *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.\n   * @returns {string} A string representing the user.\n   */\n  matchUserFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentUserSessionEntityTypeName).user;\n  }\n  /**\n   * Parse the session from ProjectLocationAgentEnvironmentUserSessionEntityType resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName\n   *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.\n   * @returns {string} A string representing the session.\n   */\n  matchSessionFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentUserSessionEntityTypeName).session;\n  }\n  /**\n   * Parse the entity_type from ProjectLocationAgentEnvironmentUserSessionEntityType resource.\n   *\n   * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName\n   *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.\n   * @returns {string} A string representing the entity_type.\n   */\n  matchEntityTypeFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName) {\n    return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentUserSessionEntityTypeName).entity_type;\n  }\n  /**\n   * Return a fully-qualified projectLocationAgentFulfillment resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @returns {string} Resource name string.\n   */\n  projectLocationAgentFulfillmentPath(project, location) {\n    return this.pathTemplates.projectLocationAgentFulfillmentPathTemplate.render({\n      project: project,\n      location: location\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationAgentFulfillment resource.\n   *\n   * @param {string} projectLocationAgentFulfillmentName\n   *   A fully-qualified path representing project_location_agent_fulfillment resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationAgentFulfillmentName(projectLocationAgentFulfillmentName) {\n    return this.pathTemplates.projectLocationAgentFulfillmentPathTemplate.match(projectLocationAgentFulfillmentName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationAgentFulfillment resource.\n   *\n   * @param {string} projectLocationAgentFulfillmentName\n   *   A fully-qualified path representing project_location_agent_fulfillment resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationAgentFulfillmentName(projectLocationAgentFulfillmentName) {\n    return this.pathTemplates.projectLocationAgentFulfillmentPathTemplate.match(projectLocationAgentFulfillmentName).location;\n  }\n  /**\n   * Return a fully-qualified projectLocationAgentIntent resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} intent\n   * @returns {string} Resource name string.\n   */\n  projectLocationAgentIntentPath(project, location, intent) {\n    return this.pathTemplates.projectLocationAgentIntentPathTemplate.render({\n      project: project,\n      location: location,\n      intent: intent\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationAgentIntent resource.\n   *\n   * @param {string} projectLocationAgentIntentName\n   *   A fully-qualified path representing project_location_agent_intent resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationAgentIntentName(projectLocationAgentIntentName) {\n    return this.pathTemplates.projectLocationAgentIntentPathTemplate.match(projectLocationAgentIntentName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationAgentIntent resource.\n   *\n   * @param {string} projectLocationAgentIntentName\n   *   A fully-qualified path representing project_location_agent_intent resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationAgentIntentName(projectLocationAgentIntentName) {\n    return this.pathTemplates.projectLocationAgentIntentPathTemplate.match(projectLocationAgentIntentName).location;\n  }\n  /**\n   * Parse the intent from ProjectLocationAgentIntent resource.\n   *\n   * @param {string} projectLocationAgentIntentName\n   *   A fully-qualified path representing project_location_agent_intent resource.\n   * @returns {string} A string representing the intent.\n   */\n  matchIntentFromProjectLocationAgentIntentName(projectLocationAgentIntentName) {\n    return this.pathTemplates.projectLocationAgentIntentPathTemplate.match(projectLocationAgentIntentName).intent;\n  }\n  /**\n   * Return a fully-qualified projectLocationAgentSessionContext resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} session\n   * @param {string} context\n   * @returns {string} Resource name string.\n   */\n  projectLocationAgentSessionContextPath(project, location, session, context) {\n    return this.pathTemplates.projectLocationAgentSessionContextPathTemplate.render({\n      project: project,\n      location: location,\n      session: session,\n      context: context\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationAgentSessionContext resource.\n   *\n   * @param {string} projectLocationAgentSessionContextName\n   *   A fully-qualified path representing project_location_agent_session_context resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationAgentSessionContextName(projectLocationAgentSessionContextName) {\n    return this.pathTemplates.projectLocationAgentSessionContextPathTemplate.match(projectLocationAgentSessionContextName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationAgentSessionContext resource.\n   *\n   * @param {string} projectLocationAgentSessionContextName\n   *   A fully-qualified path representing project_location_agent_session_context resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationAgentSessionContextName(projectLocationAgentSessionContextName) {\n    return this.pathTemplates.projectLocationAgentSessionContextPathTemplate.match(projectLocationAgentSessionContextName).location;\n  }\n  /**\n   * Parse the session from ProjectLocationAgentSessionContext resource.\n   *\n   * @param {string} projectLocationAgentSessionContextName\n   *   A fully-qualified path representing project_location_agent_session_context resource.\n   * @returns {string} A string representing the session.\n   */\n  matchSessionFromProjectLocationAgentSessionContextName(projectLocationAgentSessionContextName) {\n    return this.pathTemplates.projectLocationAgentSessionContextPathTemplate.match(projectLocationAgentSessionContextName).session;\n  }\n  /**\n   * Parse the context from ProjectLocationAgentSessionContext resource.\n   *\n   * @param {string} projectLocationAgentSessionContextName\n   *   A fully-qualified path representing project_location_agent_session_context resource.\n   * @returns {string} A string representing the context.\n   */\n  matchContextFromProjectLocationAgentSessionContextName(projectLocationAgentSessionContextName) {\n    return this.pathTemplates.projectLocationAgentSessionContextPathTemplate.match(projectLocationAgentSessionContextName).context;\n  }\n  /**\n   * Return a fully-qualified projectLocationAgentSessionEntityType resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} session\n   * @param {string} entity_type\n   * @returns {string} Resource name string.\n   */\n  projectLocationAgentSessionEntityTypePath(project, location, session, entityType) {\n    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.render({\n      project: project,\n      location: location,\n      session: session,\n      entity_type: entityType\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationAgentSessionEntityType resource.\n   *\n   * @param {string} projectLocationAgentSessionEntityTypeName\n   *   A fully-qualified path representing project_location_agent_session_entity_type resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {\n    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationAgentSessionEntityType resource.\n   *\n   * @param {string} projectLocationAgentSessionEntityTypeName\n   *   A fully-qualified path representing project_location_agent_session_entity_type resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {\n    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).location;\n  }\n  /**\n   * Parse the session from ProjectLocationAgentSessionEntityType resource.\n   *\n   * @param {string} projectLocationAgentSessionEntityTypeName\n   *   A fully-qualified path representing project_location_agent_session_entity_type resource.\n   * @returns {string} A string representing the session.\n   */\n  matchSessionFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {\n    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).session;\n  }\n  /**\n   * Parse the entity_type from ProjectLocationAgentSessionEntityType resource.\n   *\n   * @param {string} projectLocationAgentSessionEntityTypeName\n   *   A fully-qualified path representing project_location_agent_session_entity_type resource.\n   * @returns {string} A string representing the entity_type.\n   */\n  matchEntityTypeFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {\n    return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).entity_type;\n  }\n  /**\n   * Return a fully-qualified projectLocationAgentVersion resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} version\n   * @returns {string} Resource name string.\n   */\n  projectLocationAgentVersionPath(project, location, version) {\n    return this.pathTemplates.projectLocationAgentVersionPathTemplate.render({\n      project: project,\n      location: location,\n      version: version\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationAgentVersion resource.\n   *\n   * @param {string} projectLocationAgentVersionName\n   *   A fully-qualified path representing project_location_agent_version resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationAgentVersionName(projectLocationAgentVersionName) {\n    return this.pathTemplates.projectLocationAgentVersionPathTemplate.match(projectLocationAgentVersionName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationAgentVersion resource.\n   *\n   * @param {string} projectLocationAgentVersionName\n   *   A fully-qualified path representing project_location_agent_version resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationAgentVersionName(projectLocationAgentVersionName) {\n    return this.pathTemplates.projectLocationAgentVersionPathTemplate.match(projectLocationAgentVersionName).location;\n  }\n  /**\n   * Parse the version from ProjectLocationAgentVersion resource.\n   *\n   * @param {string} projectLocationAgentVersionName\n   *   A fully-qualified path representing project_location_agent_version resource.\n   * @returns {string} A string representing the version.\n   */\n  matchVersionFromProjectLocationAgentVersionName(projectLocationAgentVersionName) {\n    return this.pathTemplates.projectLocationAgentVersionPathTemplate.match(projectLocationAgentVersionName).version;\n  }\n  /**\n   * Return a fully-qualified projectLocationAnswerRecord resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} answer_record\n   * @returns {string} Resource name string.\n   */\n  projectLocationAnswerRecordPath(project, location, answerRecord) {\n    return this.pathTemplates.projectLocationAnswerRecordPathTemplate.render({\n      project: project,\n      location: location,\n      answer_record: answerRecord\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationAnswerRecord resource.\n   *\n   * @param {string} projectLocationAnswerRecordName\n   *   A fully-qualified path representing project_location_answer_record resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationAnswerRecordName(projectLocationAnswerRecordName) {\n    return this.pathTemplates.projectLocationAnswerRecordPathTemplate.match(projectLocationAnswerRecordName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationAnswerRecord resource.\n   *\n   * @param {string} projectLocationAnswerRecordName\n   *   A fully-qualified path representing project_location_answer_record resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationAnswerRecordName(projectLocationAnswerRecordName) {\n    return this.pathTemplates.projectLocationAnswerRecordPathTemplate.match(projectLocationAnswerRecordName).location;\n  }\n  /**\n   * Parse the answer_record from ProjectLocationAnswerRecord resource.\n   *\n   * @param {string} projectLocationAnswerRecordName\n   *   A fully-qualified path representing project_location_answer_record resource.\n   * @returns {string} A string representing the answer_record.\n   */\n  matchAnswerRecordFromProjectLocationAnswerRecordName(projectLocationAnswerRecordName) {\n    return this.pathTemplates.projectLocationAnswerRecordPathTemplate.match(projectLocationAnswerRecordName).answer_record;\n  }\n  /**\n   * Return a fully-qualified projectLocationConversation resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} conversation\n   * @returns {string} Resource name string.\n   */\n  projectLocationConversationPath(project, location, conversation) {\n    return this.pathTemplates.projectLocationConversationPathTemplate.render({\n      project: project,\n      location: location,\n      conversation: conversation\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationConversation resource.\n   *\n   * @param {string} projectLocationConversationName\n   *   A fully-qualified path representing project_location_conversation resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationConversationName(projectLocationConversationName) {\n    return this.pathTemplates.projectLocationConversationPathTemplate.match(projectLocationConversationName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationConversation resource.\n   *\n   * @param {string} projectLocationConversationName\n   *   A fully-qualified path representing project_location_conversation resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationConversationName(projectLocationConversationName) {\n    return this.pathTemplates.projectLocationConversationPathTemplate.match(projectLocationConversationName).location;\n  }\n  /**\n   * Parse the conversation from ProjectLocationConversation resource.\n   *\n   * @param {string} projectLocationConversationName\n   *   A fully-qualified path representing project_location_conversation resource.\n   * @returns {string} A string representing the conversation.\n   */\n  matchConversationFromProjectLocationConversationName(projectLocationConversationName) {\n    return this.pathTemplates.projectLocationConversationPathTemplate.match(projectLocationConversationName).conversation;\n  }\n  /**\n   * Return a fully-qualified projectLocationConversationMessage resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} conversation\n   * @param {string} message\n   * @returns {string} Resource name string.\n   */\n  projectLocationConversationMessagePath(project, location, conversation, message) {\n    return this.pathTemplates.projectLocationConversationMessagePathTemplate.render({\n      project: project,\n      location: location,\n      conversation: conversation,\n      message: message\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationConversationMessage resource.\n   *\n   * @param {string} projectLocationConversationMessageName\n   *   A fully-qualified path representing project_location_conversation_message resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationConversationMessageName(projectLocationConversationMessageName) {\n    return this.pathTemplates.projectLocationConversationMessagePathTemplate.match(projectLocationConversationMessageName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationConversationMessage resource.\n   *\n   * @param {string} projectLocationConversationMessageName\n   *   A fully-qualified path representing project_location_conversation_message resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationConversationMessageName(projectLocationConversationMessageName) {\n    return this.pathTemplates.projectLocationConversationMessagePathTemplate.match(projectLocationConversationMessageName).location;\n  }\n  /**\n   * Parse the conversation from ProjectLocationConversationMessage resource.\n   *\n   * @param {string} projectLocationConversationMessageName\n   *   A fully-qualified path representing project_location_conversation_message resource.\n   * @returns {string} A string representing the conversation.\n   */\n  matchConversationFromProjectLocationConversationMessageName(projectLocationConversationMessageName) {\n    return this.pathTemplates.projectLocationConversationMessagePathTemplate.match(projectLocationConversationMessageName).conversation;\n  }\n  /**\n   * Parse the message from ProjectLocationConversationMessage resource.\n   *\n   * @param {string} projectLocationConversationMessageName\n   *   A fully-qualified path representing project_location_conversation_message resource.\n   * @returns {string} A string representing the message.\n   */\n  matchMessageFromProjectLocationConversationMessageName(projectLocationConversationMessageName) {\n    return this.pathTemplates.projectLocationConversationMessagePathTemplate.match(projectLocationConversationMessageName).message;\n  }\n  /**\n   * Return a fully-qualified projectLocationConversationModel resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} conversation_model\n   * @returns {string} Resource name string.\n   */\n  projectLocationConversationModelPath(project, location, conversationModel) {\n    return this.pathTemplates.projectLocationConversationModelPathTemplate.render({\n      project: project,\n      location: location,\n      conversation_model: conversationModel\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationConversationModel resource.\n   *\n   * @param {string} projectLocationConversationModelName\n   *   A fully-qualified path representing project_location_conversation_model resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationConversationModelName(projectLocationConversationModelName) {\n    return this.pathTemplates.projectLocationConversationModelPathTemplate.match(projectLocationConversationModelName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationConversationModel resource.\n   *\n   * @param {string} projectLocationConversationModelName\n   *   A fully-qualified path representing project_location_conversation_model resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationConversationModelName(projectLocationConversationModelName) {\n    return this.pathTemplates.projectLocationConversationModelPathTemplate.match(projectLocationConversationModelName).location;\n  }\n  /**\n   * Parse the conversation_model from ProjectLocationConversationModel resource.\n   *\n   * @param {string} projectLocationConversationModelName\n   *   A fully-qualified path representing project_location_conversation_model resource.\n   * @returns {string} A string representing the conversation_model.\n   */\n  matchConversationModelFromProjectLocationConversationModelName(projectLocationConversationModelName) {\n    return this.pathTemplates.projectLocationConversationModelPathTemplate.match(projectLocationConversationModelName).conversation_model;\n  }\n  /**\n   * Return a fully-qualified projectLocationConversationModelEvaluation resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} conversation_model\n   * @param {string} evaluation\n   * @returns {string} Resource name string.\n   */\n  projectLocationConversationModelEvaluationPath(project, location, conversationModel, evaluation) {\n    return this.pathTemplates.projectLocationConversationModelEvaluationPathTemplate.render({\n      project: project,\n      location: location,\n      conversation_model: conversationModel,\n      evaluation: evaluation\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationConversationModelEvaluation resource.\n   *\n   * @param {string} projectLocationConversationModelEvaluationName\n   *   A fully-qualified path representing project_location_conversation_model_evaluation resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationConversationModelEvaluationName(projectLocationConversationModelEvaluationName) {\n    return this.pathTemplates.projectLocationConversationModelEvaluationPathTemplate.match(projectLocationConversationModelEvaluationName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationConversationModelEvaluation resource.\n   *\n   * @param {string} projectLocationConversationModelEvaluationName\n   *   A fully-qualified path representing project_location_conversation_model_evaluation resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationConversationModelEvaluationName(projectLocationConversationModelEvaluationName) {\n    return this.pathTemplates.projectLocationConversationModelEvaluationPathTemplate.match(projectLocationConversationModelEvaluationName).location;\n  }\n  /**\n   * Parse the conversation_model from ProjectLocationConversationModelEvaluation resource.\n   *\n   * @param {string} projectLocationConversationModelEvaluationName\n   *   A fully-qualified path representing project_location_conversation_model_evaluation resource.\n   * @returns {string} A string representing the conversation_model.\n   */\n  matchConversationModelFromProjectLocationConversationModelEvaluationName(projectLocationConversationModelEvaluationName) {\n    return this.pathTemplates.projectLocationConversationModelEvaluationPathTemplate.match(projectLocationConversationModelEvaluationName).conversation_model;\n  }\n  /**\n   * Parse the evaluation from ProjectLocationConversationModelEvaluation resource.\n   *\n   * @param {string} projectLocationConversationModelEvaluationName\n   *   A fully-qualified path representing project_location_conversation_model_evaluation resource.\n   * @returns {string} A string representing the evaluation.\n   */\n  matchEvaluationFromProjectLocationConversationModelEvaluationName(projectLocationConversationModelEvaluationName) {\n    return this.pathTemplates.projectLocationConversationModelEvaluationPathTemplate.match(projectLocationConversationModelEvaluationName).evaluation;\n  }\n  /**\n   * Return a fully-qualified projectLocationConversationParticipant resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} conversation\n   * @param {string} participant\n   * @returns {string} Resource name string.\n   */\n  projectLocationConversationParticipantPath(project, location, conversation, participant) {\n    return this.pathTemplates.projectLocationConversationParticipantPathTemplate.render({\n      project: project,\n      location: location,\n      conversation: conversation,\n      participant: participant\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationConversationParticipant resource.\n   *\n   * @param {string} projectLocationConversationParticipantName\n   *   A fully-qualified path representing project_location_conversation_participant resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationConversationParticipantName(projectLocationConversationParticipantName) {\n    return this.pathTemplates.projectLocationConversationParticipantPathTemplate.match(projectLocationConversationParticipantName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationConversationParticipant resource.\n   *\n   * @param {string} projectLocationConversationParticipantName\n   *   A fully-qualified path representing project_location_conversation_participant resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationConversationParticipantName(projectLocationConversationParticipantName) {\n    return this.pathTemplates.projectLocationConversationParticipantPathTemplate.match(projectLocationConversationParticipantName).location;\n  }\n  /**\n   * Parse the conversation from ProjectLocationConversationParticipant resource.\n   *\n   * @param {string} projectLocationConversationParticipantName\n   *   A fully-qualified path representing project_location_conversation_participant resource.\n   * @returns {string} A string representing the conversation.\n   */\n  matchConversationFromProjectLocationConversationParticipantName(projectLocationConversationParticipantName) {\n    return this.pathTemplates.projectLocationConversationParticipantPathTemplate.match(projectLocationConversationParticipantName).conversation;\n  }\n  /**\n   * Parse the participant from ProjectLocationConversationParticipant resource.\n   *\n   * @param {string} projectLocationConversationParticipantName\n   *   A fully-qualified path representing project_location_conversation_participant resource.\n   * @returns {string} A string representing the participant.\n   */\n  matchParticipantFromProjectLocationConversationParticipantName(projectLocationConversationParticipantName) {\n    return this.pathTemplates.projectLocationConversationParticipantPathTemplate.match(projectLocationConversationParticipantName).participant;\n  }\n  /**\n   * Return a fully-qualified projectLocationConversationProfile resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} conversation_profile\n   * @returns {string} Resource name string.\n   */\n  projectLocationConversationProfilePath(project, location, conversationProfile) {\n    return this.pathTemplates.projectLocationConversationProfilePathTemplate.render({\n      project: project,\n      location: location,\n      conversation_profile: conversationProfile\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationConversationProfile resource.\n   *\n   * @param {string} projectLocationConversationProfileName\n   *   A fully-qualified path representing project_location_conversation_profile resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationConversationProfileName(projectLocationConversationProfileName) {\n    return this.pathTemplates.projectLocationConversationProfilePathTemplate.match(projectLocationConversationProfileName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationConversationProfile resource.\n   *\n   * @param {string} projectLocationConversationProfileName\n   *   A fully-qualified path representing project_location_conversation_profile resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationConversationProfileName(projectLocationConversationProfileName) {\n    return this.pathTemplates.projectLocationConversationProfilePathTemplate.match(projectLocationConversationProfileName).location;\n  }\n  /**\n   * Parse the conversation_profile from ProjectLocationConversationProfile resource.\n   *\n   * @param {string} projectLocationConversationProfileName\n   *   A fully-qualified path representing project_location_conversation_profile resource.\n   * @returns {string} A string representing the conversation_profile.\n   */\n  matchConversationProfileFromProjectLocationConversationProfileName(projectLocationConversationProfileName) {\n    return this.pathTemplates.projectLocationConversationProfilePathTemplate.match(projectLocationConversationProfileName).conversation_profile;\n  }\n  /**\n   * Return a fully-qualified projectLocationKnowledgeBase resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} knowledge_base\n   * @returns {string} Resource name string.\n   */\n  projectLocationKnowledgeBasePath(project, location, knowledgeBase) {\n    return this.pathTemplates.projectLocationKnowledgeBasePathTemplate.render({\n      project: project,\n      location: location,\n      knowledge_base: knowledgeBase\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationKnowledgeBase resource.\n   *\n   * @param {string} projectLocationKnowledgeBaseName\n   *   A fully-qualified path representing project_location_knowledge_base resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationKnowledgeBaseName(projectLocationKnowledgeBaseName) {\n    return this.pathTemplates.projectLocationKnowledgeBasePathTemplate.match(projectLocationKnowledgeBaseName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationKnowledgeBase resource.\n   *\n   * @param {string} projectLocationKnowledgeBaseName\n   *   A fully-qualified path representing project_location_knowledge_base resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationKnowledgeBaseName(projectLocationKnowledgeBaseName) {\n    return this.pathTemplates.projectLocationKnowledgeBasePathTemplate.match(projectLocationKnowledgeBaseName).location;\n  }\n  /**\n   * Parse the knowledge_base from ProjectLocationKnowledgeBase resource.\n   *\n   * @param {string} projectLocationKnowledgeBaseName\n   *   A fully-qualified path representing project_location_knowledge_base resource.\n   * @returns {string} A string representing the knowledge_base.\n   */\n  matchKnowledgeBaseFromProjectLocationKnowledgeBaseName(projectLocationKnowledgeBaseName) {\n    return this.pathTemplates.projectLocationKnowledgeBasePathTemplate.match(projectLocationKnowledgeBaseName).knowledge_base;\n  }\n  /**\n   * Return a fully-qualified projectLocationKnowledgeBaseDocument resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} knowledge_base\n   * @param {string} document\n   * @returns {string} Resource name string.\n   */\n  projectLocationKnowledgeBaseDocumentPath(project, location, knowledgeBase, document) {\n    return this.pathTemplates.projectLocationKnowledgeBaseDocumentPathTemplate.render({\n      project: project,\n      location: location,\n      knowledge_base: knowledgeBase,\n      document: document\n    });\n  }\n  /**\n   * Parse the project from ProjectLocationKnowledgeBaseDocument resource.\n   *\n   * @param {string} projectLocationKnowledgeBaseDocumentName\n   *   A fully-qualified path representing project_location_knowledge_base_document resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectLocationKnowledgeBaseDocumentName(projectLocationKnowledgeBaseDocumentName) {\n    return this.pathTemplates.projectLocationKnowledgeBaseDocumentPathTemplate.match(projectLocationKnowledgeBaseDocumentName).project;\n  }\n  /**\n   * Parse the location from ProjectLocationKnowledgeBaseDocument resource.\n   *\n   * @param {string} projectLocationKnowledgeBaseDocumentName\n   *   A fully-qualified path representing project_location_knowledge_base_document resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromProjectLocationKnowledgeBaseDocumentName(projectLocationKnowledgeBaseDocumentName) {\n    return this.pathTemplates.projectLocationKnowledgeBaseDocumentPathTemplate.match(projectLocationKnowledgeBaseDocumentName).location;\n  }\n  /**\n   * Parse the knowledge_base from ProjectLocationKnowledgeBaseDocument resource.\n   *\n   * @param {string} projectLocationKnowledgeBaseDocumentName\n   *   A fully-qualified path representing project_location_knowledge_base_document resource.\n   * @returns {string} A string representing the knowledge_base.\n   */\n  matchKnowledgeBaseFromProjectLocationKnowledgeBaseDocumentName(projectLocationKnowledgeBaseDocumentName) {\n    return this.pathTemplates.projectLocationKnowledgeBaseDocumentPathTemplate.match(projectLocationKnowledgeBaseDocumentName).knowledge_base;\n  }\n  /**\n   * Parse the document from ProjectLocationKnowledgeBaseDocument resource.\n   *\n   * @param {string} projectLocationKnowledgeBaseDocumentName\n   *   A fully-qualified path representing project_location_knowledge_base_document resource.\n   * @returns {string} A string representing the document.\n   */\n  matchDocumentFromProjectLocationKnowledgeBaseDocumentName(projectLocationKnowledgeBaseDocumentName) {\n    return this.pathTemplates.projectLocationKnowledgeBaseDocumentPathTemplate.match(projectLocationKnowledgeBaseDocumentName).document;\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n  close() {\n    if (this.conversationsStub && !this._terminated) {\n      return this.conversationsStub.then(stub => {\n        this._log.info('ending gRPC channel');\n        this._terminated = true;\n        stub.close();\n        this.locationsClient.close();\n      });\n    }\n    return Promise.resolve();\n  }\n}\nexports.ConversationsClient = ConversationsClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","ConversationsClient","jsonProtos","require","google_gax_1","gapicConfig","version","_terminated","_opts","_providedCustomServicePath","_gaxModule","_gaxGrpc","_protos","_defaults","_universeDomain","_servicePath","_log","loggingUtils","log","auth","descriptors","page","stream","longrunning","batching","warn","innerApiCalls","locationsClient","pathTemplates","conversationsStub","constructor","opts","gaxInstance","staticMembers","universe_domain","universeDomain","Error","universeDomainEnvVar","process","env","undefined","servicePath","apiEndpoint","port","clientConfig","fallback","window","fetch","assign","numericEnums","scopes","GrpcClient","useJWTAccessWithScope","defaultServicePath","defaultScopes","LocationsClient","clientHeader","push","versions","node","grpcVersion","libName","libVersion","loadProtoJSON","conversationDatasetPathTemplate","PathTemplate","encryptionSpecPathTemplate","generatorPathTemplate","locationPathTemplate","projectPathTemplate","projectAgentPathTemplate","projectAgentEntityTypePathTemplate","projectAgentEnvironmentPathTemplate","projectAgentEnvironmentUserSessionContextPathTemplate","projectAgentEnvironmentUserSessionEntityTypePathTemplate","projectAgentFulfillmentPathTemplate","projectAgentIntentPathTemplate","projectAgentSessionContextPathTemplate","projectAgentSessionEntityTypePathTemplate","projectAgentVersionPathTemplate","projectAnswerRecordPathTemplate","projectConversationPathTemplate","projectConversationMessagePathTemplate","projectConversationModelPathTemplate","projectConversationModelEvaluationPathTemplate","projectConversationParticipantPathTemplate","projectConversationProfilePathTemplate","projectKnowledgeBasePathTemplate","projectKnowledgeBaseDocumentPathTemplate","projectLocationAgentPathTemplate","projectLocationAgentEntityTypePathTemplate","projectLocationAgentEnvironmentPathTemplate","projectLocationAgentEnvironmentUserSessionContextPathTemplate","projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate","projectLocationAgentFulfillmentPathTemplate","projectLocationAgentIntentPathTemplate","projectLocationAgentSessionContextPathTemplate","projectLocationAgentSessionEntityTypePathTemplate","projectLocationAgentVersionPathTemplate","projectLocationAnswerRecordPathTemplate","projectLocationConversationPathTemplate","projectLocationConversationMessagePathTemplate","projectLocationConversationModelPathTemplate","projectLocationConversationModelEvaluationPathTemplate","projectLocationConversationParticipantPathTemplate","projectLocationConversationProfilePathTemplate","projectLocationKnowledgeBasePathTemplate","projectLocationKnowledgeBaseDocumentPathTemplate","listConversations","PageDescriptor","listMessages","constructSettings","join","initialize","createStub","lookupService","google","cloud","dialogflow","v2","Conversations","conversationsStubMethods","methodName","callPromise","then","stub","args","Promise","reject","func","apply","err","descriptor","apiCall","createApiCall","emitWarning","getProjectId","callback","createConversation","request","optionsOrCallback","options","otherArgs","headers","routingHeader","fromParams","parent","info","wrappedCallback","error","response","rawResponse","getConversation","name","completeConversation","ingestContextReferences","conversation","suggestConversationSummary","generateStatelessSummary","statelessConversation","generateStatelessSuggestion","searchKnowledge","generateSuggestions","values","nextPageRequest","input","output","listConversationsStream","defaultCallSettings","callSettings","merge","createStream","listConversationsAsync","asyncIterate","listMessagesStream","listMessagesAsync","getLocation","listLocationsAsync","conversationDatasetPath","project","location","conversationDataset","render","conversation_dataset","matchProjectFromConversationDatasetName","conversationDatasetName","match","matchLocationFromConversationDatasetName","matchConversationDatasetFromConversationDatasetName","encryptionSpecPath","matchProjectFromEncryptionSpecName","encryptionSpecName","matchLocationFromEncryptionSpecName","generatorPath","generator","matchProjectFromGeneratorName","generatorName","matchLocationFromGeneratorName","matchGeneratorFromGeneratorName","locationPath","matchProjectFromLocationName","locationName","matchLocationFromLocationName","projectPath","matchProjectFromProjectName","projectName","projectAgentPath","matchProjectFromProjectAgentName","projectAgentName","projectAgentEntityTypePath","entityType","entity_type","matchProjectFromProjectAgentEntityTypeName","projectAgentEntityTypeName","matchEntityTypeFromProjectAgentEntityTypeName","projectAgentEnvironmentPath","environment","matchProjectFromProjectAgentEnvironmentName","projectAgentEnvironmentName","matchEnvironmentFromProjectAgentEnvironmentName","projectAgentEnvironmentUserSessionContextPath","user","session","context","matchProjectFromProjectAgentEnvironmentUserSessionContextName","projectAgentEnvironmentUserSessionContextName","matchEnvironmentFromProjectAgentEnvironmentUserSessionContextName","matchUserFromProjectAgentEnvironmentUserSessionContextName","matchSessionFromProjectAgentEnvironmentUserSessionContextName","matchContextFromProjectAgentEnvironmentUserSessionContextName","projectAgentEnvironmentUserSessionEntityTypePath","matchProjectFromProjectAgentEnvironmentUserSessionEntityTypeName","projectAgentEnvironmentUserSessionEntityTypeName","matchEnvironmentFromProjectAgentEnvironmentUserSessionEntityTypeName","matchUserFromProjectAgentEnvironmentUserSessionEntityTypeName","matchSessionFromProjectAgentEnvironmentUserSessionEntityTypeName","matchEntityTypeFromProjectAgentEnvironmentUserSessionEntityTypeName","projectAgentFulfillmentPath","matchProjectFromProjectAgentFulfillmentName","projectAgentFulfillmentName","projectAgentIntentPath","intent","matchProjectFromProjectAgentIntentName","projectAgentIntentName","matchIntentFromProjectAgentIntentName","projectAgentSessionContextPath","matchProjectFromProjectAgentSessionContextName","projectAgentSessionContextName","matchSessionFromProjectAgentSessionContextName","matchContextFromProjectAgentSessionContextName","projectAgentSessionEntityTypePath","matchProjectFromProjectAgentSessionEntityTypeName","projectAgentSessionEntityTypeName","matchSessionFromProjectAgentSessionEntityTypeName","matchEntityTypeFromProjectAgentSessionEntityTypeName","projectAgentVersionPath","matchProjectFromProjectAgentVersionName","projectAgentVersionName","matchVersionFromProjectAgentVersionName","projectAnswerRecordPath","answerRecord","answer_record","matchProjectFromProjectAnswerRecordName","projectAnswerRecordName","matchAnswerRecordFromProjectAnswerRecordName","projectConversationPath","matchProjectFromProjectConversationName","projectConversationName","matchConversationFromProjectConversationName","projectConversationMessagePath","message","matchProjectFromProjectConversationMessageName","projectConversationMessageName","matchConversationFromProjectConversationMessageName","matchMessageFromProjectConversationMessageName","projectConversationModelPath","conversationModel","conversation_model","matchProjectFromProjectConversationModelName","projectConversationModelName","matchConversationModelFromProjectConversationModelName","projectConversationModelEvaluationPath","evaluation","matchProjectFromProjectConversationModelEvaluationName","projectConversationModelEvaluationName","matchConversationModelFromProjectConversationModelEvaluationName","matchEvaluationFromProjectConversationModelEvaluationName","projectConversationParticipantPath","participant","matchProjectFromProjectConversationParticipantName","projectConversationParticipantName","matchConversationFromProjectConversationParticipantName","matchParticipantFromProjectConversationParticipantName","projectConversationProfilePath","conversationProfile","conversation_profile","matchProjectFromProjectConversationProfileName","projectConversationProfileName","matchConversationProfileFromProjectConversationProfileName","projectKnowledgeBasePath","knowledgeBase","knowledge_base","matchProjectFromProjectKnowledgeBaseName","projectKnowledgeBaseName","matchKnowledgeBaseFromProjectKnowledgeBaseName","projectKnowledgeBaseDocumentPath","document","matchProjectFromProjectKnowledgeBaseDocumentName","projectKnowledgeBaseDocumentName","matchKnowledgeBaseFromProjectKnowledgeBaseDocumentName","matchDocumentFromProjectKnowledgeBaseDocumentName","projectLocationAgentPath","matchProjectFromProjectLocationAgentName","projectLocationAgentName","matchLocationFromProjectLocationAgentName","projectLocationAgentEntityTypePath","matchProjectFromProjectLocationAgentEntityTypeName","projectLocationAgentEntityTypeName","matchLocationFromProjectLocationAgentEntityTypeName","matchEntityTypeFromProjectLocationAgentEntityTypeName","projectLocationAgentEnvironmentPath","matchProjectFromProjectLocationAgentEnvironmentName","projectLocationAgentEnvironmentName","matchLocationFromProjectLocationAgentEnvironmentName","matchEnvironmentFromProjectLocationAgentEnvironmentName","projectLocationAgentEnvironmentUserSessionContextPath","matchProjectFromProjectLocationAgentEnvironmentUserSessionContextName","projectLocationAgentEnvironmentUserSessionContextName","matchLocationFromProjectLocationAgentEnvironmentUserSessionContextName","matchEnvironmentFromProjectLocationAgentEnvironmentUserSessionContextName","matchUserFromProjectLocationAgentEnvironmentUserSessionContextName","matchSessionFromProjectLocationAgentEnvironmentUserSessionContextName","matchContextFromProjectLocationAgentEnvironmentUserSessionContextName","projectLocationAgentEnvironmentUserSessionEntityTypePath","matchProjectFromProjectLocationAgentEnvironmentUserSessionEntityTypeName","projectLocationAgentEnvironmentUserSessionEntityTypeName","matchLocationFromProjectLocationAgentEnvironmentUserSessionEntityTypeName","matchEnvironmentFromProjectLocationAgentEnvironmentUserSessionEntityTypeName","matchUserFromProjectLocationAgentEnvironmentUserSessionEntityTypeName","matchSessionFromProjectLocationAgentEnvironmentUserSessionEntityTypeName","matchEntityTypeFromProjectLocationAgentEnvironmentUserSessionEntityTypeName","projectLocationAgentFulfillmentPath","matchProjectFromProjectLocationAgentFulfillmentName","projectLocationAgentFulfillmentName","matchLocationFromProjectLocationAgentFulfillmentName","projectLocationAgentIntentPath","matchProjectFromProjectLocationAgentIntentName","projectLocationAgentIntentName","matchLocationFromProjectLocationAgentIntentName","matchIntentFromProjectLocationAgentIntentName","projectLocationAgentSessionContextPath","matchProjectFromProjectLocationAgentSessionContextName","projectLocationAgentSessionContextName","matchLocationFromProjectLocationAgentSessionContextName","matchSessionFromProjectLocationAgentSessionContextName","matchContextFromProjectLocationAgentSessionContextName","projectLocationAgentSessionEntityTypePath","matchProjectFromProjectLocationAgentSessionEntityTypeName","projectLocationAgentSessionEntityTypeName","matchLocationFromProjectLocationAgentSessionEntityTypeName","matchSessionFromProjectLocationAgentSessionEntityTypeName","matchEntityTypeFromProjectLocationAgentSessionEntityTypeName","projectLocationAgentVersionPath","matchProjectFromProjectLocationAgentVersionName","projectLocationAgentVersionName","matchLocationFromProjectLocationAgentVersionName","matchVersionFromProjectLocationAgentVersionName","projectLocationAnswerRecordPath","matchProjectFromProjectLocationAnswerRecordName","projectLocationAnswerRecordName","matchLocationFromProjectLocationAnswerRecordName","matchAnswerRecordFromProjectLocationAnswerRecordName","projectLocationConversationPath","matchProjectFromProjectLocationConversationName","projectLocationConversationName","matchLocationFromProjectLocationConversationName","matchConversationFromProjectLocationConversationName","projectLocationConversationMessagePath","matchProjectFromProjectLocationConversationMessageName","projectLocationConversationMessageName","matchLocationFromProjectLocationConversationMessageName","matchConversationFromProjectLocationConversationMessageName","matchMessageFromProjectLocationConversationMessageName","projectLocationConversationModelPath","matchProjectFromProjectLocationConversationModelName","projectLocationConversationModelName","matchLocationFromProjectLocationConversationModelName","matchConversationModelFromProjectLocationConversationModelName","projectLocationConversationModelEvaluationPath","matchProjectFromProjectLocationConversationModelEvaluationName","projectLocationConversationModelEvaluationName","matchLocationFromProjectLocationConversationModelEvaluationName","matchConversationModelFromProjectLocationConversationModelEvaluationName","matchEvaluationFromProjectLocationConversationModelEvaluationName","projectLocationConversationParticipantPath","matchProjectFromProjectLocationConversationParticipantName","projectLocationConversationParticipantName","matchLocationFromProjectLocationConversationParticipantName","matchConversationFromProjectLocationConversationParticipantName","matchParticipantFromProjectLocationConversationParticipantName","projectLocationConversationProfilePath","matchProjectFromProjectLocationConversationProfileName","projectLocationConversationProfileName","matchLocationFromProjectLocationConversationProfileName","matchConversationProfileFromProjectLocationConversationProfileName","projectLocationKnowledgeBasePath","matchProjectFromProjectLocationKnowledgeBaseName","projectLocationKnowledgeBaseName","matchLocationFromProjectLocationKnowledgeBaseName","matchKnowledgeBaseFromProjectLocationKnowledgeBaseName","projectLocationKnowledgeBaseDocumentPath","matchProjectFromProjectLocationKnowledgeBaseDocumentName","projectLocationKnowledgeBaseDocumentName","matchLocationFromProjectLocationKnowledgeBaseDocumentName","matchKnowledgeBaseFromProjectLocationKnowledgeBaseDocumentName","matchDocumentFromProjectLocationKnowledgeBaseDocumentName","close","resolve"],"sources":["C:/Users/BIT/chatboot/node_modules/@google-cloud/dialogflow/build/src/v2/conversations_client.js"],"sourcesContent":["\"use strict\";\n// Copyright 2025 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConversationsClient = void 0;\nconst jsonProtos = require(\"../../protos/protos.json\");\nconst google_gax_1 = require(\"google-gax\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v2/conversations_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./conversations_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  Service for managing\n *  {@link protos.google.cloud.dialogflow.v2.Conversation|Conversations}.\n * @class\n * @memberof v2\n */\nclass ConversationsClient {\n    _terminated = false;\n    _opts;\n    _providedCustomServicePath;\n    _gaxModule;\n    _gaxGrpc;\n    _protos;\n    _defaults;\n    _universeDomain;\n    _servicePath;\n    _log = google_gax_1.loggingUtils.log('dialogflow');\n    auth;\n    descriptors = {\n        page: {},\n        stream: {},\n        longrunning: {},\n        batching: {},\n    };\n    warn;\n    innerApiCalls;\n    locationsClient;\n    pathTemplates;\n    conversationsStub;\n    /**\n     * Construct an instance of ConversationsClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n     *     For more information, please check the\n     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n     *     need to avoid loading the default gRPC version and want to use the fallback\n     *     HTTP implementation. Load only fallback version and pass it to the constructor:\n     *     ```\n     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n     *     const client = new ConversationsClient({fallback: true}, gax);\n     *     ```\n     */\n    constructor(opts, gaxInstance) {\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        if (opts?.universe_domain &&\n            opts?.universeDomain &&\n            opts?.universe_domain !== opts?.universeDomain) {\n            throw new Error('Please set either universe_domain or universeDomain, but not both.');\n        }\n        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'\n            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']\n            : undefined;\n        this._universeDomain =\n            opts?.universeDomain ??\n                opts?.universe_domain ??\n                universeDomainEnvVar ??\n                'googleapis.com';\n        this._servicePath = 'dialogflow.' + this._universeDomain;\n        const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;\n        this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);\n        const port = opts?.port || staticMembers.port;\n        const clientConfig = opts?.clientConfig ?? {};\n        const fallback = opts?.fallback ??\n            (typeof window !== 'undefined' && typeof window?.fetch === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // Request numeric enum values if REST transport is used.\n        opts.numericEnums = true;\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== this._servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Load google-gax module synchronously if needed\n        if (!gaxInstance) {\n            gaxInstance = require('google-gax');\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set useJWTAccessWithScope on the auth object.\n        this.auth.useJWTAccessWithScope = true;\n        // Set defaultServicePath on the auth object.\n        this.auth.defaultServicePath = this._servicePath;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === this._servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process === 'object' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this.pathTemplates = {\n            conversationDatasetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversationDatasets/{conversation_dataset}'),\n            encryptionSpecPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/encryptionSpec'),\n            generatorPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/generators/{generator}'),\n            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),\n            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),\n            projectAgentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent'),\n            projectAgentEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/entityTypes/{entity_type}'),\n            projectAgentEnvironmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/environments/{environment}'),\n            projectAgentEnvironmentUserSessionContextPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/environments/{environment}/users/{user}/sessions/{session}/contexts/{context}'),\n            projectAgentEnvironmentUserSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/environments/{environment}/users/{user}/sessions/{session}/entityTypes/{entity_type}'),\n            projectAgentFulfillmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/fulfillment'),\n            projectAgentIntentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/intents/{intent}'),\n            projectAgentSessionContextPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/sessions/{session}/contexts/{context}'),\n            projectAgentSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/sessions/{session}/entityTypes/{entity_type}'),\n            projectAgentVersionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/agent/versions/{version}'),\n            projectAnswerRecordPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/answerRecords/{answer_record}'),\n            projectConversationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/conversations/{conversation}'),\n            projectConversationMessagePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/conversations/{conversation}/messages/{message}'),\n            projectConversationModelPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/conversationModels/{conversation_model}'),\n            projectConversationModelEvaluationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/conversationModels/{conversation_model}/evaluations/{evaluation}'),\n            projectConversationParticipantPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/conversations/{conversation}/participants/{participant}'),\n            projectConversationProfilePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/conversationProfiles/{conversation_profile}'),\n            projectKnowledgeBasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/knowledgeBases/{knowledge_base}'),\n            projectKnowledgeBaseDocumentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/knowledgeBases/{knowledge_base}/documents/{document}'),\n            projectLocationAgentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent'),\n            projectLocationAgentEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/entityTypes/{entity_type}'),\n            projectLocationAgentEnvironmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/environments/{environment}'),\n            projectLocationAgentEnvironmentUserSessionContextPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/environments/{environment}/users/{user}/sessions/{session}/contexts/{context}'),\n            projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/environments/{environment}/users/{user}/sessions/{session}/entityTypes/{entity_type}'),\n            projectLocationAgentFulfillmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/fulfillment'),\n            projectLocationAgentIntentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/intents/{intent}'),\n            projectLocationAgentSessionContextPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/sessions/{session}/contexts/{context}'),\n            projectLocationAgentSessionEntityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/sessions/{session}/entityTypes/{entity_type}'),\n            projectLocationAgentVersionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/agent/versions/{version}'),\n            projectLocationAnswerRecordPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/answerRecords/{answer_record}'),\n            projectLocationConversationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversations/{conversation}'),\n            projectLocationConversationMessagePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversations/{conversation}/messages/{message}'),\n            projectLocationConversationModelPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversationModels/{conversation_model}'),\n            projectLocationConversationModelEvaluationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversationModels/{conversation_model}/evaluations/{evaluation}'),\n            projectLocationConversationParticipantPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversations/{conversation}/participants/{participant}'),\n            projectLocationConversationProfilePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/conversationProfiles/{conversation_profile}'),\n            projectLocationKnowledgeBasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/knowledgeBases/{knowledge_base}'),\n            projectLocationKnowledgeBaseDocumentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/knowledgeBases/{knowledge_base}/documents/{document}'),\n        };\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listConversations: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'conversations'),\n            listMessages: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'messages'),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.cloud.dialogflow.v2.Conversations', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = this._gaxModule.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.conversationsStub) {\n            return this.conversationsStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.dialogflow.v2.Conversations.\n        this.conversationsStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.dialogflow.v2.Conversations')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.dialogflow.v2.Conversations, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const conversationsStubMethods = [\n            'createConversation',\n            'listConversations',\n            'getConversation',\n            'completeConversation',\n            'ingestContextReferences',\n            'listMessages',\n            'suggestConversationSummary',\n            'generateStatelessSummary',\n            'generateStatelessSuggestion',\n            'searchKnowledge',\n            'generateSuggestions',\n        ];\n        for (const methodName of conversationsStubMethods) {\n            const callPromise = this.conversationsStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] || undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.conversationsStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'dialogflow.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'dialogflow.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    get apiEndpoint() {\n        return this._servicePath;\n    }\n    get universeDomain() {\n        return this._universeDomain;\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/dialogflow',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    createConversation(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: request.parent ?? '',\n            });\n        this.initialize();\n        this._log.info('createConversation request %j', request);\n        const wrappedCallback = callback\n            ? (error, response, options, rawResponse) => {\n                this._log.info('createConversation response %j', response);\n                callback(error, response, options, rawResponse); // We verified callback above.\n            }\n            : undefined;\n        return this.innerApiCalls\n            .createConversation(request, options, wrappedCallback)\n            ?.then(([response, options, rawResponse]) => {\n            this._log.info('createConversation response %j', response);\n            return [response, options, rawResponse];\n        });\n    }\n    getConversation(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: request.name ?? '',\n            });\n        this.initialize();\n        this._log.info('getConversation request %j', request);\n        const wrappedCallback = callback\n            ? (error, response, options, rawResponse) => {\n                this._log.info('getConversation response %j', response);\n                callback(error, response, options, rawResponse); // We verified callback above.\n            }\n            : undefined;\n        return this.innerApiCalls\n            .getConversation(request, options, wrappedCallback)\n            ?.then(([response, options, rawResponse]) => {\n            this._log.info('getConversation response %j', response);\n            return [response, options, rawResponse];\n        });\n    }\n    completeConversation(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: request.name ?? '',\n            });\n        this.initialize();\n        this._log.info('completeConversation request %j', request);\n        const wrappedCallback = callback\n            ? (error, response, options, rawResponse) => {\n                this._log.info('completeConversation response %j', response);\n                callback(error, response, options, rawResponse); // We verified callback above.\n            }\n            : undefined;\n        return this.innerApiCalls\n            .completeConversation(request, options, wrappedCallback)\n            ?.then(([response, options, rawResponse]) => {\n            this._log.info('completeConversation response %j', response);\n            return [response, options, rawResponse];\n        });\n    }\n    ingestContextReferences(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                conversation: request.conversation ?? '',\n            });\n        this.initialize();\n        this._log.info('ingestContextReferences request %j', request);\n        const wrappedCallback = callback\n            ? (error, response, options, rawResponse) => {\n                this._log.info('ingestContextReferences response %j', response);\n                callback(error, response, options, rawResponse); // We verified callback above.\n            }\n            : undefined;\n        return this.innerApiCalls\n            .ingestContextReferences(request, options, wrappedCallback)\n            ?.then(([response, options, rawResponse]) => {\n            this._log.info('ingestContextReferences response %j', response);\n            return [response, options, rawResponse];\n        });\n    }\n    suggestConversationSummary(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                conversation: request.conversation ?? '',\n            });\n        this.initialize();\n        this._log.info('suggestConversationSummary request %j', request);\n        const wrappedCallback = callback\n            ? (error, response, options, rawResponse) => {\n                this._log.info('suggestConversationSummary response %j', response);\n                callback(error, response, options, rawResponse); // We verified callback above.\n            }\n            : undefined;\n        return this.innerApiCalls\n            .suggestConversationSummary(request, options, wrappedCallback)\n            ?.then(([response, options, rawResponse]) => {\n            this._log.info('suggestConversationSummary response %j', response);\n            return [response, options, rawResponse];\n        });\n    }\n    generateStatelessSummary(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                'stateless_conversation.parent': request.statelessConversation.parent ?? '',\n            });\n        this.initialize();\n        this._log.info('generateStatelessSummary request %j', request);\n        const wrappedCallback = callback\n            ? (error, response, options, rawResponse) => {\n                this._log.info('generateStatelessSummary response %j', response);\n                callback(error, response, options, rawResponse); // We verified callback above.\n            }\n            : undefined;\n        return this.innerApiCalls\n            .generateStatelessSummary(request, options, wrappedCallback)\n            ?.then(([response, options, rawResponse]) => {\n            this._log.info('generateStatelessSummary response %j', response);\n            return [response, options, rawResponse];\n        });\n    }\n    generateStatelessSuggestion(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: request.parent ?? '',\n            });\n        this.initialize();\n        this._log.info('generateStatelessSuggestion request %j', request);\n        const wrappedCallback = callback\n            ? (error, response, options, rawResponse) => {\n                this._log.info('generateStatelessSuggestion response %j', response);\n                callback(error, response, options, rawResponse); // We verified callback above.\n            }\n            : undefined;\n        return this.innerApiCalls\n            .generateStatelessSuggestion(request, options, wrappedCallback)\n            ?.then(([response, options, rawResponse]) => {\n            this._log.info('generateStatelessSuggestion response %j', response);\n            return [response, options, rawResponse];\n        });\n    }\n    searchKnowledge(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: request.parent ?? '',\n                conversation: request.conversation ?? '',\n            });\n        this.initialize();\n        this._log.info('searchKnowledge request %j', request);\n        const wrappedCallback = callback\n            ? (error, response, options, rawResponse) => {\n                this._log.info('searchKnowledge response %j', response);\n                callback(error, response, options, rawResponse); // We verified callback above.\n            }\n            : undefined;\n        return this.innerApiCalls\n            .searchKnowledge(request, options, wrappedCallback)\n            ?.then(([response, options, rawResponse]) => {\n            this._log.info('searchKnowledge response %j', response);\n            return [response, options, rawResponse];\n        });\n    }\n    generateSuggestions(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                conversation: request.conversation ?? '',\n            });\n        this.initialize();\n        this._log.info('generateSuggestions request %j', request);\n        const wrappedCallback = callback\n            ? (error, response, options, rawResponse) => {\n                this._log.info('generateSuggestions response %j', response);\n                callback(error, response, options, rawResponse); // We verified callback above.\n            }\n            : undefined;\n        return this.innerApiCalls\n            .generateSuggestions(request, options, wrappedCallback)\n            ?.then(([response, options, rawResponse]) => {\n            this._log.info('generateSuggestions response %j', response);\n            return [response, options, rawResponse];\n        });\n    }\n    listConversations(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: request.parent ?? '',\n            });\n        this.initialize();\n        const wrappedCallback = callback\n            ? (error, values, nextPageRequest, rawResponse) => {\n                this._log.info('listConversations values %j', values);\n                callback(error, values, nextPageRequest, rawResponse); // We verified callback above.\n            }\n            : undefined;\n        this._log.info('listConversations request %j', request);\n        return this.innerApiCalls\n            .listConversations(request, options, wrappedCallback)\n            ?.then(([response, input, output]) => {\n            this._log.info('listConversations values %j', response);\n            return [response, input, output];\n        });\n    }\n    /**\n     * Equivalent to `listConversations`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project from which to list all conversation.\n     *   Format: `projects/<Project ID>/locations/<Location ID>`.\n     * @param {number} [request.pageSize]\n     *   Optional. The maximum number of items to return in a single page. By\n     *   default 100 and at most 1000.\n     * @param {string} [request.pageToken]\n     *   Optional. The next_page_token value returned from a previous list request.\n     * @param {string} [request.filter]\n     *   Optional. A filter expression that filters conversations listed in the\n     *   response. Only `lifecycle_state` can be filtered on in this way. For\n     *   example, the following expression only returns `COMPLETED` conversations:\n     *\n     *   `lifecycle_state = \"COMPLETED\"`\n     *\n     *   For more information about filtering, see\n     *   [API Filtering](https://aip.dev/160).\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.cloud.dialogflow.v2.Conversation|Conversation} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listConversationsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listConversationsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: request.parent ?? '',\n            });\n        const defaultCallSettings = this._defaults['listConversations'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        this._log.info('listConversations stream %j', request);\n        return this.descriptors.page.listConversations.createStream(this.innerApiCalls.listConversations, request, callSettings);\n    }\n    /**\n     * Equivalent to `listConversations`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project from which to list all conversation.\n     *   Format: `projects/<Project ID>/locations/<Location ID>`.\n     * @param {number} [request.pageSize]\n     *   Optional. The maximum number of items to return in a single page. By\n     *   default 100 and at most 1000.\n     * @param {string} [request.pageToken]\n     *   Optional. The next_page_token value returned from a previous list request.\n     * @param {string} [request.filter]\n     *   Optional. A filter expression that filters conversations listed in the\n     *   response. Only `lifecycle_state` can be filtered on in this way. For\n     *   example, the following expression only returns `COMPLETED` conversations:\n     *\n     *   `lifecycle_state = \"COMPLETED\"`\n     *\n     *   For more information about filtering, see\n     *   [API Filtering](https://aip.dev/160).\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.cloud.dialogflow.v2.Conversation|Conversation}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v2/conversations.list_conversations.js</caption>\n     * region_tag:dialogflow_v2_generated_Conversations_ListConversations_async\n     */\n    listConversationsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: request.parent ?? '',\n            });\n        const defaultCallSettings = this._defaults['listConversations'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        this._log.info('listConversations iterate %j', request);\n        return this.descriptors.page.listConversations.asyncIterate(this.innerApiCalls['listConversations'], request, callSettings);\n    }\n    listMessages(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: request.parent ?? '',\n            });\n        this.initialize();\n        const wrappedCallback = callback\n            ? (error, values, nextPageRequest, rawResponse) => {\n                this._log.info('listMessages values %j', values);\n                callback(error, values, nextPageRequest, rawResponse); // We verified callback above.\n            }\n            : undefined;\n        this._log.info('listMessages request %j', request);\n        return this.innerApiCalls\n            .listMessages(request, options, wrappedCallback)\n            ?.then(([response, input, output]) => {\n            this._log.info('listMessages values %j', response);\n            return [response, input, output];\n        });\n    }\n    /**\n     * Equivalent to `listMessages`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the conversation to list messages for.\n     *   Format: `projects/<Project ID>/locations/<Location\n     *   ID>/conversations/<Conversation ID>`\n     * @param {string} [request.filter]\n     *   Optional. Filter on message fields. Currently predicates on `create_time`\n     *   and `create_time_epoch_microseconds` are supported. `create_time` only\n     *   support milliseconds accuracy. E.g.,\n     *   `create_time_epoch_microseconds > 1551790877964485` or\n     *   `create_time > 2017-01-15T01:30:15.01Z`.\n     *\n     *   For more information about filtering, see\n     *   [API Filtering](https://aip.dev/160).\n     * @param {number} [request.pageSize]\n     *   Optional. The maximum number of items to return in a single page. By\n     *   default 100 and at most 1000.\n     * @param {string} [request.pageToken]\n     *   Optional. The next_page_token value returned from a previous list request.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.cloud.dialogflow.v2.Message|Message} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listMessagesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listMessagesStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: request.parent ?? '',\n            });\n        const defaultCallSettings = this._defaults['listMessages'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        this._log.info('listMessages stream %j', request);\n        return this.descriptors.page.listMessages.createStream(this.innerApiCalls.listMessages, request, callSettings);\n    }\n    /**\n     * Equivalent to `listMessages`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the conversation to list messages for.\n     *   Format: `projects/<Project ID>/locations/<Location\n     *   ID>/conversations/<Conversation ID>`\n     * @param {string} [request.filter]\n     *   Optional. Filter on message fields. Currently predicates on `create_time`\n     *   and `create_time_epoch_microseconds` are supported. `create_time` only\n     *   support milliseconds accuracy. E.g.,\n     *   `create_time_epoch_microseconds > 1551790877964485` or\n     *   `create_time > 2017-01-15T01:30:15.01Z`.\n     *\n     *   For more information about filtering, see\n     *   [API Filtering](https://aip.dev/160).\n     * @param {number} [request.pageSize]\n     *   Optional. The maximum number of items to return in a single page. By\n     *   default 100 and at most 1000.\n     * @param {string} [request.pageToken]\n     *   Optional. The next_page_token value returned from a previous list request.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.cloud.dialogflow.v2.Message|Message}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v2/conversations.list_messages.js</caption>\n     * region_tag:dialogflow_v2_generated_Conversations_ListMessages_async\n     */\n    listMessagesAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: request.parent ?? '',\n            });\n        const defaultCallSettings = this._defaults['listMessages'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        this._log.info('listMessages iterate %j', request);\n        return this.descriptors.page.listMessages.asyncIterate(this.innerApiCalls['listMessages'], request, callSettings);\n    }\n    /**\n     * Gets information about a location.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Resource name for the location.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }\n     *   for more details and examples.\n     * @example\n     * ```\n     * const [response] = await client.getLocation(request);\n     * ```\n     */\n    getLocation(request, options, callback) {\n        return this.locationsClient.getLocation(request, options, callback);\n    }\n    /**\n     * Lists information about the supported locations for this service. Returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example\n     * ```\n     * const iterable = client.listLocationsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     * ```\n     */\n    listLocationsAsync(request, options) {\n        return this.locationsClient.listLocationsAsync(request, options);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified conversationDataset resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} conversation_dataset\n     * @returns {string} Resource name string.\n     */\n    conversationDatasetPath(project, location, conversationDataset) {\n        return this.pathTemplates.conversationDatasetPathTemplate.render({\n            project: project,\n            location: location,\n            conversation_dataset: conversationDataset,\n        });\n    }\n    /**\n     * Parse the project from ConversationDataset resource.\n     *\n     * @param {string} conversationDatasetName\n     *   A fully-qualified path representing ConversationDataset resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromConversationDatasetName(conversationDatasetName) {\n        return this.pathTemplates.conversationDatasetPathTemplate.match(conversationDatasetName).project;\n    }\n    /**\n     * Parse the location from ConversationDataset resource.\n     *\n     * @param {string} conversationDatasetName\n     *   A fully-qualified path representing ConversationDataset resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromConversationDatasetName(conversationDatasetName) {\n        return this.pathTemplates.conversationDatasetPathTemplate.match(conversationDatasetName).location;\n    }\n    /**\n     * Parse the conversation_dataset from ConversationDataset resource.\n     *\n     * @param {string} conversationDatasetName\n     *   A fully-qualified path representing ConversationDataset resource.\n     * @returns {string} A string representing the conversation_dataset.\n     */\n    matchConversationDatasetFromConversationDatasetName(conversationDatasetName) {\n        return this.pathTemplates.conversationDatasetPathTemplate.match(conversationDatasetName).conversation_dataset;\n    }\n    /**\n     * Return a fully-qualified encryptionSpec resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @returns {string} Resource name string.\n     */\n    encryptionSpecPath(project, location) {\n        return this.pathTemplates.encryptionSpecPathTemplate.render({\n            project: project,\n            location: location,\n        });\n    }\n    /**\n     * Parse the project from EncryptionSpec resource.\n     *\n     * @param {string} encryptionSpecName\n     *   A fully-qualified path representing EncryptionSpec resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromEncryptionSpecName(encryptionSpecName) {\n        return this.pathTemplates.encryptionSpecPathTemplate.match(encryptionSpecName).project;\n    }\n    /**\n     * Parse the location from EncryptionSpec resource.\n     *\n     * @param {string} encryptionSpecName\n     *   A fully-qualified path representing EncryptionSpec resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromEncryptionSpecName(encryptionSpecName) {\n        return this.pathTemplates.encryptionSpecPathTemplate.match(encryptionSpecName).location;\n    }\n    /**\n     * Return a fully-qualified generator resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} generator\n     * @returns {string} Resource name string.\n     */\n    generatorPath(project, location, generator) {\n        return this.pathTemplates.generatorPathTemplate.render({\n            project: project,\n            location: location,\n            generator: generator,\n        });\n    }\n    /**\n     * Parse the project from Generator resource.\n     *\n     * @param {string} generatorName\n     *   A fully-qualified path representing Generator resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromGeneratorName(generatorName) {\n        return this.pathTemplates.generatorPathTemplate.match(generatorName)\n            .project;\n    }\n    /**\n     * Parse the location from Generator resource.\n     *\n     * @param {string} generatorName\n     *   A fully-qualified path representing Generator resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromGeneratorName(generatorName) {\n        return this.pathTemplates.generatorPathTemplate.match(generatorName)\n            .location;\n    }\n    /**\n     * Parse the generator from Generator resource.\n     *\n     * @param {string} generatorName\n     *   A fully-qualified path representing Generator resource.\n     * @returns {string} A string representing the generator.\n     */\n    matchGeneratorFromGeneratorName(generatorName) {\n        return this.pathTemplates.generatorPathTemplate.match(generatorName)\n            .generator;\n    }\n    /**\n     * Return a fully-qualified location resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @returns {string} Resource name string.\n     */\n    locationPath(project, location) {\n        return this.pathTemplates.locationPathTemplate.render({\n            project: project,\n            location: location,\n        });\n    }\n    /**\n     * Parse the project from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).project;\n    }\n    /**\n     * Parse the location from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).location;\n    }\n    /**\n     * Return a fully-qualified project resource name string.\n     *\n     * @param {string} project\n     * @returns {string} Resource name string.\n     */\n    projectPath(project) {\n        return this.pathTemplates.projectPathTemplate.render({\n            project: project,\n        });\n    }\n    /**\n     * Parse the project from Project resource.\n     *\n     * @param {string} projectName\n     *   A fully-qualified path representing Project resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectName(projectName) {\n        return this.pathTemplates.projectPathTemplate.match(projectName).project;\n    }\n    /**\n     * Return a fully-qualified projectAgent resource name string.\n     *\n     * @param {string} project\n     * @returns {string} Resource name string.\n     */\n    projectAgentPath(project) {\n        return this.pathTemplates.projectAgentPathTemplate.render({\n            project: project,\n        });\n    }\n    /**\n     * Parse the project from ProjectAgent resource.\n     *\n     * @param {string} projectAgentName\n     *   A fully-qualified path representing project_agent resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectAgentName(projectAgentName) {\n        return this.pathTemplates.projectAgentPathTemplate.match(projectAgentName)\n            .project;\n    }\n    /**\n     * Return a fully-qualified projectAgentEntityType resource name string.\n     *\n     * @param {string} project\n     * @param {string} entity_type\n     * @returns {string} Resource name string.\n     */\n    projectAgentEntityTypePath(project, entityType) {\n        return this.pathTemplates.projectAgentEntityTypePathTemplate.render({\n            project: project,\n            entity_type: entityType,\n        });\n    }\n    /**\n     * Parse the project from ProjectAgentEntityType resource.\n     *\n     * @param {string} projectAgentEntityTypeName\n     *   A fully-qualified path representing project_agent_entity_type resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectAgentEntityTypeName(projectAgentEntityTypeName) {\n        return this.pathTemplates.projectAgentEntityTypePathTemplate.match(projectAgentEntityTypeName).project;\n    }\n    /**\n     * Parse the entity_type from ProjectAgentEntityType resource.\n     *\n     * @param {string} projectAgentEntityTypeName\n     *   A fully-qualified path representing project_agent_entity_type resource.\n     * @returns {string} A string representing the entity_type.\n     */\n    matchEntityTypeFromProjectAgentEntityTypeName(projectAgentEntityTypeName) {\n        return this.pathTemplates.projectAgentEntityTypePathTemplate.match(projectAgentEntityTypeName).entity_type;\n    }\n    /**\n     * Return a fully-qualified projectAgentEnvironment resource name string.\n     *\n     * @param {string} project\n     * @param {string} environment\n     * @returns {string} Resource name string.\n     */\n    projectAgentEnvironmentPath(project, environment) {\n        return this.pathTemplates.projectAgentEnvironmentPathTemplate.render({\n            project: project,\n            environment: environment,\n        });\n    }\n    /**\n     * Parse the project from ProjectAgentEnvironment resource.\n     *\n     * @param {string} projectAgentEnvironmentName\n     *   A fully-qualified path representing project_agent_environment resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectAgentEnvironmentName(projectAgentEnvironmentName) {\n        return this.pathTemplates.projectAgentEnvironmentPathTemplate.match(projectAgentEnvironmentName).project;\n    }\n    /**\n     * Parse the environment from ProjectAgentEnvironment resource.\n     *\n     * @param {string} projectAgentEnvironmentName\n     *   A fully-qualified path representing project_agent_environment resource.\n     * @returns {string} A string representing the environment.\n     */\n    matchEnvironmentFromProjectAgentEnvironmentName(projectAgentEnvironmentName) {\n        return this.pathTemplates.projectAgentEnvironmentPathTemplate.match(projectAgentEnvironmentName).environment;\n    }\n    /**\n     * Return a fully-qualified projectAgentEnvironmentUserSessionContext resource name string.\n     *\n     * @param {string} project\n     * @param {string} environment\n     * @param {string} user\n     * @param {string} session\n     * @param {string} context\n     * @returns {string} Resource name string.\n     */\n    projectAgentEnvironmentUserSessionContextPath(project, environment, user, session, context) {\n        return this.pathTemplates.projectAgentEnvironmentUserSessionContextPathTemplate.render({\n            project: project,\n            environment: environment,\n            user: user,\n            session: session,\n            context: context,\n        });\n    }\n    /**\n     * Parse the project from ProjectAgentEnvironmentUserSessionContext resource.\n     *\n     * @param {string} projectAgentEnvironmentUserSessionContextName\n     *   A fully-qualified path representing project_agent_environment_user_session_context resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName) {\n        return this.pathTemplates.projectAgentEnvironmentUserSessionContextPathTemplate.match(projectAgentEnvironmentUserSessionContextName).project;\n    }\n    /**\n     * Parse the environment from ProjectAgentEnvironmentUserSessionContext resource.\n     *\n     * @param {string} projectAgentEnvironmentUserSessionContextName\n     *   A fully-qualified path representing project_agent_environment_user_session_context resource.\n     * @returns {string} A string representing the environment.\n     */\n    matchEnvironmentFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName) {\n        return this.pathTemplates.projectAgentEnvironmentUserSessionContextPathTemplate.match(projectAgentEnvironmentUserSessionContextName).environment;\n    }\n    /**\n     * Parse the user from ProjectAgentEnvironmentUserSessionContext resource.\n     *\n     * @param {string} projectAgentEnvironmentUserSessionContextName\n     *   A fully-qualified path representing project_agent_environment_user_session_context resource.\n     * @returns {string} A string representing the user.\n     */\n    matchUserFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName) {\n        return this.pathTemplates.projectAgentEnvironmentUserSessionContextPathTemplate.match(projectAgentEnvironmentUserSessionContextName).user;\n    }\n    /**\n     * Parse the session from ProjectAgentEnvironmentUserSessionContext resource.\n     *\n     * @param {string} projectAgentEnvironmentUserSessionContextName\n     *   A fully-qualified path representing project_agent_environment_user_session_context resource.\n     * @returns {string} A string representing the session.\n     */\n    matchSessionFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName) {\n        return this.pathTemplates.projectAgentEnvironmentUserSessionContextPathTemplate.match(projectAgentEnvironmentUserSessionContextName).session;\n    }\n    /**\n     * Parse the context from ProjectAgentEnvironmentUserSessionContext resource.\n     *\n     * @param {string} projectAgentEnvironmentUserSessionContextName\n     *   A fully-qualified path representing project_agent_environment_user_session_context resource.\n     * @returns {string} A string representing the context.\n     */\n    matchContextFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName) {\n        return this.pathTemplates.projectAgentEnvironmentUserSessionContextPathTemplate.match(projectAgentEnvironmentUserSessionContextName).context;\n    }\n    /**\n     * Return a fully-qualified projectAgentEnvironmentUserSessionEntityType resource name string.\n     *\n     * @param {string} project\n     * @param {string} environment\n     * @param {string} user\n     * @param {string} session\n     * @param {string} entity_type\n     * @returns {string} Resource name string.\n     */\n    projectAgentEnvironmentUserSessionEntityTypePath(project, environment, user, session, entityType) {\n        return this.pathTemplates.projectAgentEnvironmentUserSessionEntityTypePathTemplate.render({\n            project: project,\n            environment: environment,\n            user: user,\n            session: session,\n            entity_type: entityType,\n        });\n    }\n    /**\n     * Parse the project from ProjectAgentEnvironmentUserSessionEntityType resource.\n     *\n     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName\n     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName) {\n        return this.pathTemplates.projectAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectAgentEnvironmentUserSessionEntityTypeName).project;\n    }\n    /**\n     * Parse the environment from ProjectAgentEnvironmentUserSessionEntityType resource.\n     *\n     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName\n     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.\n     * @returns {string} A string representing the environment.\n     */\n    matchEnvironmentFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName) {\n        return this.pathTemplates.projectAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectAgentEnvironmentUserSessionEntityTypeName).environment;\n    }\n    /**\n     * Parse the user from ProjectAgentEnvironmentUserSessionEntityType resource.\n     *\n     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName\n     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.\n     * @returns {string} A string representing the user.\n     */\n    matchUserFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName) {\n        return this.pathTemplates.projectAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectAgentEnvironmentUserSessionEntityTypeName).user;\n    }\n    /**\n     * Parse the session from ProjectAgentEnvironmentUserSessionEntityType resource.\n     *\n     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName\n     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.\n     * @returns {string} A string representing the session.\n     */\n    matchSessionFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName) {\n        return this.pathTemplates.projectAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectAgentEnvironmentUserSessionEntityTypeName).session;\n    }\n    /**\n     * Parse the entity_type from ProjectAgentEnvironmentUserSessionEntityType resource.\n     *\n     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName\n     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.\n     * @returns {string} A string representing the entity_type.\n     */\n    matchEntityTypeFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName) {\n        return this.pathTemplates.projectAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectAgentEnvironmentUserSessionEntityTypeName).entity_type;\n    }\n    /**\n     * Return a fully-qualified projectAgentFulfillment resource name string.\n     *\n     * @param {string} project\n     * @returns {string} Resource name string.\n     */\n    projectAgentFulfillmentPath(project) {\n        return this.pathTemplates.projectAgentFulfillmentPathTemplate.render({\n            project: project,\n        });\n    }\n    /**\n     * Parse the project from ProjectAgentFulfillment resource.\n     *\n     * @param {string} projectAgentFulfillmentName\n     *   A fully-qualified path representing project_agent_fulfillment resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectAgentFulfillmentName(projectAgentFulfillmentName) {\n        return this.pathTemplates.projectAgentFulfillmentPathTemplate.match(projectAgentFulfillmentName).project;\n    }\n    /**\n     * Return a fully-qualified projectAgentIntent resource name string.\n     *\n     * @param {string} project\n     * @param {string} intent\n     * @returns {string} Resource name string.\n     */\n    projectAgentIntentPath(project, intent) {\n        return this.pathTemplates.projectAgentIntentPathTemplate.render({\n            project: project,\n            intent: intent,\n        });\n    }\n    /**\n     * Parse the project from ProjectAgentIntent resource.\n     *\n     * @param {string} projectAgentIntentName\n     *   A fully-qualified path representing project_agent_intent resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectAgentIntentName(projectAgentIntentName) {\n        return this.pathTemplates.projectAgentIntentPathTemplate.match(projectAgentIntentName).project;\n    }\n    /**\n     * Parse the intent from ProjectAgentIntent resource.\n     *\n     * @param {string} projectAgentIntentName\n     *   A fully-qualified path representing project_agent_intent resource.\n     * @returns {string} A string representing the intent.\n     */\n    matchIntentFromProjectAgentIntentName(projectAgentIntentName) {\n        return this.pathTemplates.projectAgentIntentPathTemplate.match(projectAgentIntentName).intent;\n    }\n    /**\n     * Return a fully-qualified projectAgentSessionContext resource name string.\n     *\n     * @param {string} project\n     * @param {string} session\n     * @param {string} context\n     * @returns {string} Resource name string.\n     */\n    projectAgentSessionContextPath(project, session, context) {\n        return this.pathTemplates.projectAgentSessionContextPathTemplate.render({\n            project: project,\n            session: session,\n            context: context,\n        });\n    }\n    /**\n     * Parse the project from ProjectAgentSessionContext resource.\n     *\n     * @param {string} projectAgentSessionContextName\n     *   A fully-qualified path representing project_agent_session_context resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectAgentSessionContextName(projectAgentSessionContextName) {\n        return this.pathTemplates.projectAgentSessionContextPathTemplate.match(projectAgentSessionContextName).project;\n    }\n    /**\n     * Parse the session from ProjectAgentSessionContext resource.\n     *\n     * @param {string} projectAgentSessionContextName\n     *   A fully-qualified path representing project_agent_session_context resource.\n     * @returns {string} A string representing the session.\n     */\n    matchSessionFromProjectAgentSessionContextName(projectAgentSessionContextName) {\n        return this.pathTemplates.projectAgentSessionContextPathTemplate.match(projectAgentSessionContextName).session;\n    }\n    /**\n     * Parse the context from ProjectAgentSessionContext resource.\n     *\n     * @param {string} projectAgentSessionContextName\n     *   A fully-qualified path representing project_agent_session_context resource.\n     * @returns {string} A string representing the context.\n     */\n    matchContextFromProjectAgentSessionContextName(projectAgentSessionContextName) {\n        return this.pathTemplates.projectAgentSessionContextPathTemplate.match(projectAgentSessionContextName).context;\n    }\n    /**\n     * Return a fully-qualified projectAgentSessionEntityType resource name string.\n     *\n     * @param {string} project\n     * @param {string} session\n     * @param {string} entity_type\n     * @returns {string} Resource name string.\n     */\n    projectAgentSessionEntityTypePath(project, session, entityType) {\n        return this.pathTemplates.projectAgentSessionEntityTypePathTemplate.render({\n            project: project,\n            session: session,\n            entity_type: entityType,\n        });\n    }\n    /**\n     * Parse the project from ProjectAgentSessionEntityType resource.\n     *\n     * @param {string} projectAgentSessionEntityTypeName\n     *   A fully-qualified path representing project_agent_session_entity_type resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectAgentSessionEntityTypeName(projectAgentSessionEntityTypeName) {\n        return this.pathTemplates.projectAgentSessionEntityTypePathTemplate.match(projectAgentSessionEntityTypeName).project;\n    }\n    /**\n     * Parse the session from ProjectAgentSessionEntityType resource.\n     *\n     * @param {string} projectAgentSessionEntityTypeName\n     *   A fully-qualified path representing project_agent_session_entity_type resource.\n     * @returns {string} A string representing the session.\n     */\n    matchSessionFromProjectAgentSessionEntityTypeName(projectAgentSessionEntityTypeName) {\n        return this.pathTemplates.projectAgentSessionEntityTypePathTemplate.match(projectAgentSessionEntityTypeName).session;\n    }\n    /**\n     * Parse the entity_type from ProjectAgentSessionEntityType resource.\n     *\n     * @param {string} projectAgentSessionEntityTypeName\n     *   A fully-qualified path representing project_agent_session_entity_type resource.\n     * @returns {string} A string representing the entity_type.\n     */\n    matchEntityTypeFromProjectAgentSessionEntityTypeName(projectAgentSessionEntityTypeName) {\n        return this.pathTemplates.projectAgentSessionEntityTypePathTemplate.match(projectAgentSessionEntityTypeName).entity_type;\n    }\n    /**\n     * Return a fully-qualified projectAgentVersion resource name string.\n     *\n     * @param {string} project\n     * @param {string} version\n     * @returns {string} Resource name string.\n     */\n    projectAgentVersionPath(project, version) {\n        return this.pathTemplates.projectAgentVersionPathTemplate.render({\n            project: project,\n            version: version,\n        });\n    }\n    /**\n     * Parse the project from ProjectAgentVersion resource.\n     *\n     * @param {string} projectAgentVersionName\n     *   A fully-qualified path representing project_agent_version resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectAgentVersionName(projectAgentVersionName) {\n        return this.pathTemplates.projectAgentVersionPathTemplate.match(projectAgentVersionName).project;\n    }\n    /**\n     * Parse the version from ProjectAgentVersion resource.\n     *\n     * @param {string} projectAgentVersionName\n     *   A fully-qualified path representing project_agent_version resource.\n     * @returns {string} A string representing the version.\n     */\n    matchVersionFromProjectAgentVersionName(projectAgentVersionName) {\n        return this.pathTemplates.projectAgentVersionPathTemplate.match(projectAgentVersionName).version;\n    }\n    /**\n     * Return a fully-qualified projectAnswerRecord resource name string.\n     *\n     * @param {string} project\n     * @param {string} answer_record\n     * @returns {string} Resource name string.\n     */\n    projectAnswerRecordPath(project, answerRecord) {\n        return this.pathTemplates.projectAnswerRecordPathTemplate.render({\n            project: project,\n            answer_record: answerRecord,\n        });\n    }\n    /**\n     * Parse the project from ProjectAnswerRecord resource.\n     *\n     * @param {string} projectAnswerRecordName\n     *   A fully-qualified path representing project_answer_record resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectAnswerRecordName(projectAnswerRecordName) {\n        return this.pathTemplates.projectAnswerRecordPathTemplate.match(projectAnswerRecordName).project;\n    }\n    /**\n     * Parse the answer_record from ProjectAnswerRecord resource.\n     *\n     * @param {string} projectAnswerRecordName\n     *   A fully-qualified path representing project_answer_record resource.\n     * @returns {string} A string representing the answer_record.\n     */\n    matchAnswerRecordFromProjectAnswerRecordName(projectAnswerRecordName) {\n        return this.pathTemplates.projectAnswerRecordPathTemplate.match(projectAnswerRecordName).answer_record;\n    }\n    /**\n     * Return a fully-qualified projectConversation resource name string.\n     *\n     * @param {string} project\n     * @param {string} conversation\n     * @returns {string} Resource name string.\n     */\n    projectConversationPath(project, conversation) {\n        return this.pathTemplates.projectConversationPathTemplate.render({\n            project: project,\n            conversation: conversation,\n        });\n    }\n    /**\n     * Parse the project from ProjectConversation resource.\n     *\n     * @param {string} projectConversationName\n     *   A fully-qualified path representing project_conversation resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectConversationName(projectConversationName) {\n        return this.pathTemplates.projectConversationPathTemplate.match(projectConversationName).project;\n    }\n    /**\n     * Parse the conversation from ProjectConversation resource.\n     *\n     * @param {string} projectConversationName\n     *   A fully-qualified path representing project_conversation resource.\n     * @returns {string} A string representing the conversation.\n     */\n    matchConversationFromProjectConversationName(projectConversationName) {\n        return this.pathTemplates.projectConversationPathTemplate.match(projectConversationName).conversation;\n    }\n    /**\n     * Return a fully-qualified projectConversationMessage resource name string.\n     *\n     * @param {string} project\n     * @param {string} conversation\n     * @param {string} message\n     * @returns {string} Resource name string.\n     */\n    projectConversationMessagePath(project, conversation, message) {\n        return this.pathTemplates.projectConversationMessagePathTemplate.render({\n            project: project,\n            conversation: conversation,\n            message: message,\n        });\n    }\n    /**\n     * Parse the project from ProjectConversationMessage resource.\n     *\n     * @param {string} projectConversationMessageName\n     *   A fully-qualified path representing project_conversation_message resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectConversationMessageName(projectConversationMessageName) {\n        return this.pathTemplates.projectConversationMessagePathTemplate.match(projectConversationMessageName).project;\n    }\n    /**\n     * Parse the conversation from ProjectConversationMessage resource.\n     *\n     * @param {string} projectConversationMessageName\n     *   A fully-qualified path representing project_conversation_message resource.\n     * @returns {string} A string representing the conversation.\n     */\n    matchConversationFromProjectConversationMessageName(projectConversationMessageName) {\n        return this.pathTemplates.projectConversationMessagePathTemplate.match(projectConversationMessageName).conversation;\n    }\n    /**\n     * Parse the message from ProjectConversationMessage resource.\n     *\n     * @param {string} projectConversationMessageName\n     *   A fully-qualified path representing project_conversation_message resource.\n     * @returns {string} A string representing the message.\n     */\n    matchMessageFromProjectConversationMessageName(projectConversationMessageName) {\n        return this.pathTemplates.projectConversationMessagePathTemplate.match(projectConversationMessageName).message;\n    }\n    /**\n     * Return a fully-qualified projectConversationModel resource name string.\n     *\n     * @param {string} project\n     * @param {string} conversation_model\n     * @returns {string} Resource name string.\n     */\n    projectConversationModelPath(project, conversationModel) {\n        return this.pathTemplates.projectConversationModelPathTemplate.render({\n            project: project,\n            conversation_model: conversationModel,\n        });\n    }\n    /**\n     * Parse the project from ProjectConversationModel resource.\n     *\n     * @param {string} projectConversationModelName\n     *   A fully-qualified path representing project_conversation_model resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectConversationModelName(projectConversationModelName) {\n        return this.pathTemplates.projectConversationModelPathTemplate.match(projectConversationModelName).project;\n    }\n    /**\n     * Parse the conversation_model from ProjectConversationModel resource.\n     *\n     * @param {string} projectConversationModelName\n     *   A fully-qualified path representing project_conversation_model resource.\n     * @returns {string} A string representing the conversation_model.\n     */\n    matchConversationModelFromProjectConversationModelName(projectConversationModelName) {\n        return this.pathTemplates.projectConversationModelPathTemplate.match(projectConversationModelName).conversation_model;\n    }\n    /**\n     * Return a fully-qualified projectConversationModelEvaluation resource name string.\n     *\n     * @param {string} project\n     * @param {string} conversation_model\n     * @param {string} evaluation\n     * @returns {string} Resource name string.\n     */\n    projectConversationModelEvaluationPath(project, conversationModel, evaluation) {\n        return this.pathTemplates.projectConversationModelEvaluationPathTemplate.render({\n            project: project,\n            conversation_model: conversationModel,\n            evaluation: evaluation,\n        });\n    }\n    /**\n     * Parse the project from ProjectConversationModelEvaluation resource.\n     *\n     * @param {string} projectConversationModelEvaluationName\n     *   A fully-qualified path representing project_conversation_model_evaluation resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectConversationModelEvaluationName(projectConversationModelEvaluationName) {\n        return this.pathTemplates.projectConversationModelEvaluationPathTemplate.match(projectConversationModelEvaluationName).project;\n    }\n    /**\n     * Parse the conversation_model from ProjectConversationModelEvaluation resource.\n     *\n     * @param {string} projectConversationModelEvaluationName\n     *   A fully-qualified path representing project_conversation_model_evaluation resource.\n     * @returns {string} A string representing the conversation_model.\n     */\n    matchConversationModelFromProjectConversationModelEvaluationName(projectConversationModelEvaluationName) {\n        return this.pathTemplates.projectConversationModelEvaluationPathTemplate.match(projectConversationModelEvaluationName).conversation_model;\n    }\n    /**\n     * Parse the evaluation from ProjectConversationModelEvaluation resource.\n     *\n     * @param {string} projectConversationModelEvaluationName\n     *   A fully-qualified path representing project_conversation_model_evaluation resource.\n     * @returns {string} A string representing the evaluation.\n     */\n    matchEvaluationFromProjectConversationModelEvaluationName(projectConversationModelEvaluationName) {\n        return this.pathTemplates.projectConversationModelEvaluationPathTemplate.match(projectConversationModelEvaluationName).evaluation;\n    }\n    /**\n     * Return a fully-qualified projectConversationParticipant resource name string.\n     *\n     * @param {string} project\n     * @param {string} conversation\n     * @param {string} participant\n     * @returns {string} Resource name string.\n     */\n    projectConversationParticipantPath(project, conversation, participant) {\n        return this.pathTemplates.projectConversationParticipantPathTemplate.render({\n            project: project,\n            conversation: conversation,\n            participant: participant,\n        });\n    }\n    /**\n     * Parse the project from ProjectConversationParticipant resource.\n     *\n     * @param {string} projectConversationParticipantName\n     *   A fully-qualified path representing project_conversation_participant resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectConversationParticipantName(projectConversationParticipantName) {\n        return this.pathTemplates.projectConversationParticipantPathTemplate.match(projectConversationParticipantName).project;\n    }\n    /**\n     * Parse the conversation from ProjectConversationParticipant resource.\n     *\n     * @param {string} projectConversationParticipantName\n     *   A fully-qualified path representing project_conversation_participant resource.\n     * @returns {string} A string representing the conversation.\n     */\n    matchConversationFromProjectConversationParticipantName(projectConversationParticipantName) {\n        return this.pathTemplates.projectConversationParticipantPathTemplate.match(projectConversationParticipantName).conversation;\n    }\n    /**\n     * Parse the participant from ProjectConversationParticipant resource.\n     *\n     * @param {string} projectConversationParticipantName\n     *   A fully-qualified path representing project_conversation_participant resource.\n     * @returns {string} A string representing the participant.\n     */\n    matchParticipantFromProjectConversationParticipantName(projectConversationParticipantName) {\n        return this.pathTemplates.projectConversationParticipantPathTemplate.match(projectConversationParticipantName).participant;\n    }\n    /**\n     * Return a fully-qualified projectConversationProfile resource name string.\n     *\n     * @param {string} project\n     * @param {string} conversation_profile\n     * @returns {string} Resource name string.\n     */\n    projectConversationProfilePath(project, conversationProfile) {\n        return this.pathTemplates.projectConversationProfilePathTemplate.render({\n            project: project,\n            conversation_profile: conversationProfile,\n        });\n    }\n    /**\n     * Parse the project from ProjectConversationProfile resource.\n     *\n     * @param {string} projectConversationProfileName\n     *   A fully-qualified path representing project_conversation_profile resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectConversationProfileName(projectConversationProfileName) {\n        return this.pathTemplates.projectConversationProfilePathTemplate.match(projectConversationProfileName).project;\n    }\n    /**\n     * Parse the conversation_profile from ProjectConversationProfile resource.\n     *\n     * @param {string} projectConversationProfileName\n     *   A fully-qualified path representing project_conversation_profile resource.\n     * @returns {string} A string representing the conversation_profile.\n     */\n    matchConversationProfileFromProjectConversationProfileName(projectConversationProfileName) {\n        return this.pathTemplates.projectConversationProfilePathTemplate.match(projectConversationProfileName).conversation_profile;\n    }\n    /**\n     * Return a fully-qualified projectKnowledgeBase resource name string.\n     *\n     * @param {string} project\n     * @param {string} knowledge_base\n     * @returns {string} Resource name string.\n     */\n    projectKnowledgeBasePath(project, knowledgeBase) {\n        return this.pathTemplates.projectKnowledgeBasePathTemplate.render({\n            project: project,\n            knowledge_base: knowledgeBase,\n        });\n    }\n    /**\n     * Parse the project from ProjectKnowledgeBase resource.\n     *\n     * @param {string} projectKnowledgeBaseName\n     *   A fully-qualified path representing project_knowledge_base resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectKnowledgeBaseName(projectKnowledgeBaseName) {\n        return this.pathTemplates.projectKnowledgeBasePathTemplate.match(projectKnowledgeBaseName).project;\n    }\n    /**\n     * Parse the knowledge_base from ProjectKnowledgeBase resource.\n     *\n     * @param {string} projectKnowledgeBaseName\n     *   A fully-qualified path representing project_knowledge_base resource.\n     * @returns {string} A string representing the knowledge_base.\n     */\n    matchKnowledgeBaseFromProjectKnowledgeBaseName(projectKnowledgeBaseName) {\n        return this.pathTemplates.projectKnowledgeBasePathTemplate.match(projectKnowledgeBaseName).knowledge_base;\n    }\n    /**\n     * Return a fully-qualified projectKnowledgeBaseDocument resource name string.\n     *\n     * @param {string} project\n     * @param {string} knowledge_base\n     * @param {string} document\n     * @returns {string} Resource name string.\n     */\n    projectKnowledgeBaseDocumentPath(project, knowledgeBase, document) {\n        return this.pathTemplates.projectKnowledgeBaseDocumentPathTemplate.render({\n            project: project,\n            knowledge_base: knowledgeBase,\n            document: document,\n        });\n    }\n    /**\n     * Parse the project from ProjectKnowledgeBaseDocument resource.\n     *\n     * @param {string} projectKnowledgeBaseDocumentName\n     *   A fully-qualified path representing project_knowledge_base_document resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectKnowledgeBaseDocumentName(projectKnowledgeBaseDocumentName) {\n        return this.pathTemplates.projectKnowledgeBaseDocumentPathTemplate.match(projectKnowledgeBaseDocumentName).project;\n    }\n    /**\n     * Parse the knowledge_base from ProjectKnowledgeBaseDocument resource.\n     *\n     * @param {string} projectKnowledgeBaseDocumentName\n     *   A fully-qualified path representing project_knowledge_base_document resource.\n     * @returns {string} A string representing the knowledge_base.\n     */\n    matchKnowledgeBaseFromProjectKnowledgeBaseDocumentName(projectKnowledgeBaseDocumentName) {\n        return this.pathTemplates.projectKnowledgeBaseDocumentPathTemplate.match(projectKnowledgeBaseDocumentName).knowledge_base;\n    }\n    /**\n     * Parse the document from ProjectKnowledgeBaseDocument resource.\n     *\n     * @param {string} projectKnowledgeBaseDocumentName\n     *   A fully-qualified path representing project_knowledge_base_document resource.\n     * @returns {string} A string representing the document.\n     */\n    matchDocumentFromProjectKnowledgeBaseDocumentName(projectKnowledgeBaseDocumentName) {\n        return this.pathTemplates.projectKnowledgeBaseDocumentPathTemplate.match(projectKnowledgeBaseDocumentName).document;\n    }\n    /**\n     * Return a fully-qualified projectLocationAgent resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @returns {string} Resource name string.\n     */\n    projectLocationAgentPath(project, location) {\n        return this.pathTemplates.projectLocationAgentPathTemplate.render({\n            project: project,\n            location: location,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationAgent resource.\n     *\n     * @param {string} projectLocationAgentName\n     *   A fully-qualified path representing project_location_agent resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationAgentName(projectLocationAgentName) {\n        return this.pathTemplates.projectLocationAgentPathTemplate.match(projectLocationAgentName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationAgent resource.\n     *\n     * @param {string} projectLocationAgentName\n     *   A fully-qualified path representing project_location_agent resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationAgentName(projectLocationAgentName) {\n        return this.pathTemplates.projectLocationAgentPathTemplate.match(projectLocationAgentName).location;\n    }\n    /**\n     * Return a fully-qualified projectLocationAgentEntityType resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} entity_type\n     * @returns {string} Resource name string.\n     */\n    projectLocationAgentEntityTypePath(project, location, entityType) {\n        return this.pathTemplates.projectLocationAgentEntityTypePathTemplate.render({\n            project: project,\n            location: location,\n            entity_type: entityType,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationAgentEntityType resource.\n     *\n     * @param {string} projectLocationAgentEntityTypeName\n     *   A fully-qualified path representing project_location_agent_entity_type resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationAgentEntityTypeName(projectLocationAgentEntityTypeName) {\n        return this.pathTemplates.projectLocationAgentEntityTypePathTemplate.match(projectLocationAgentEntityTypeName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationAgentEntityType resource.\n     *\n     * @param {string} projectLocationAgentEntityTypeName\n     *   A fully-qualified path representing project_location_agent_entity_type resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationAgentEntityTypeName(projectLocationAgentEntityTypeName) {\n        return this.pathTemplates.projectLocationAgentEntityTypePathTemplate.match(projectLocationAgentEntityTypeName).location;\n    }\n    /**\n     * Parse the entity_type from ProjectLocationAgentEntityType resource.\n     *\n     * @param {string} projectLocationAgentEntityTypeName\n     *   A fully-qualified path representing project_location_agent_entity_type resource.\n     * @returns {string} A string representing the entity_type.\n     */\n    matchEntityTypeFromProjectLocationAgentEntityTypeName(projectLocationAgentEntityTypeName) {\n        return this.pathTemplates.projectLocationAgentEntityTypePathTemplate.match(projectLocationAgentEntityTypeName).entity_type;\n    }\n    /**\n     * Return a fully-qualified projectLocationAgentEnvironment resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} environment\n     * @returns {string} Resource name string.\n     */\n    projectLocationAgentEnvironmentPath(project, location, environment) {\n        return this.pathTemplates.projectLocationAgentEnvironmentPathTemplate.render({\n            project: project,\n            location: location,\n            environment: environment,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationAgentEnvironment resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentName\n     *   A fully-qualified path representing project_location_agent_environment resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationAgentEnvironmentName(projectLocationAgentEnvironmentName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentPathTemplate.match(projectLocationAgentEnvironmentName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationAgentEnvironment resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentName\n     *   A fully-qualified path representing project_location_agent_environment resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationAgentEnvironmentName(projectLocationAgentEnvironmentName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentPathTemplate.match(projectLocationAgentEnvironmentName).location;\n    }\n    /**\n     * Parse the environment from ProjectLocationAgentEnvironment resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentName\n     *   A fully-qualified path representing project_location_agent_environment resource.\n     * @returns {string} A string representing the environment.\n     */\n    matchEnvironmentFromProjectLocationAgentEnvironmentName(projectLocationAgentEnvironmentName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentPathTemplate.match(projectLocationAgentEnvironmentName).environment;\n    }\n    /**\n     * Return a fully-qualified projectLocationAgentEnvironmentUserSessionContext resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} environment\n     * @param {string} user\n     * @param {string} session\n     * @param {string} context\n     * @returns {string} Resource name string.\n     */\n    projectLocationAgentEnvironmentUserSessionContextPath(project, location, environment, user, session, context) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.render({\n            project: project,\n            location: location,\n            environment: environment,\n            user: user,\n            session: session,\n            context: context,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationAgentEnvironmentUserSessionContext resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentUserSessionContextName\n     *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.match(projectLocationAgentEnvironmentUserSessionContextName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationAgentEnvironmentUserSessionContext resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentUserSessionContextName\n     *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.match(projectLocationAgentEnvironmentUserSessionContextName).location;\n    }\n    /**\n     * Parse the environment from ProjectLocationAgentEnvironmentUserSessionContext resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentUserSessionContextName\n     *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.\n     * @returns {string} A string representing the environment.\n     */\n    matchEnvironmentFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.match(projectLocationAgentEnvironmentUserSessionContextName).environment;\n    }\n    /**\n     * Parse the user from ProjectLocationAgentEnvironmentUserSessionContext resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentUserSessionContextName\n     *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.\n     * @returns {string} A string representing the user.\n     */\n    matchUserFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.match(projectLocationAgentEnvironmentUserSessionContextName).user;\n    }\n    /**\n     * Parse the session from ProjectLocationAgentEnvironmentUserSessionContext resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentUserSessionContextName\n     *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.\n     * @returns {string} A string representing the session.\n     */\n    matchSessionFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.match(projectLocationAgentEnvironmentUserSessionContextName).session;\n    }\n    /**\n     * Parse the context from ProjectLocationAgentEnvironmentUserSessionContext resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentUserSessionContextName\n     *   A fully-qualified path representing project_location_agent_environment_user_session_context resource.\n     * @returns {string} A string representing the context.\n     */\n    matchContextFromProjectLocationAgentEnvironmentUserSessionContextName(projectLocationAgentEnvironmentUserSessionContextName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionContextPathTemplate.match(projectLocationAgentEnvironmentUserSessionContextName).context;\n    }\n    /**\n     * Return a fully-qualified projectLocationAgentEnvironmentUserSessionEntityType resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} environment\n     * @param {string} user\n     * @param {string} session\n     * @param {string} entity_type\n     * @returns {string} Resource name string.\n     */\n    projectLocationAgentEnvironmentUserSessionEntityTypePath(project, location, environment, user, session, entityType) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.render({\n            project: project,\n            location: location,\n            environment: environment,\n            user: user,\n            session: session,\n            entity_type: entityType,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationAgentEnvironmentUserSessionEntityType resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName\n     *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentUserSessionEntityTypeName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationAgentEnvironmentUserSessionEntityType resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName\n     *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentUserSessionEntityTypeName).location;\n    }\n    /**\n     * Parse the environment from ProjectLocationAgentEnvironmentUserSessionEntityType resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName\n     *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.\n     * @returns {string} A string representing the environment.\n     */\n    matchEnvironmentFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentUserSessionEntityTypeName).environment;\n    }\n    /**\n     * Parse the user from ProjectLocationAgentEnvironmentUserSessionEntityType resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName\n     *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.\n     * @returns {string} A string representing the user.\n     */\n    matchUserFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentUserSessionEntityTypeName).user;\n    }\n    /**\n     * Parse the session from ProjectLocationAgentEnvironmentUserSessionEntityType resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName\n     *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.\n     * @returns {string} A string representing the session.\n     */\n    matchSessionFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentUserSessionEntityTypeName).session;\n    }\n    /**\n     * Parse the entity_type from ProjectLocationAgentEnvironmentUserSessionEntityType resource.\n     *\n     * @param {string} projectLocationAgentEnvironmentUserSessionEntityTypeName\n     *   A fully-qualified path representing project_location_agent_environment_user_session_entity_type resource.\n     * @returns {string} A string representing the entity_type.\n     */\n    matchEntityTypeFromProjectLocationAgentEnvironmentUserSessionEntityTypeName(projectLocationAgentEnvironmentUserSessionEntityTypeName) {\n        return this.pathTemplates.projectLocationAgentEnvironmentUserSessionEntityTypePathTemplate.match(projectLocationAgentEnvironmentUserSessionEntityTypeName).entity_type;\n    }\n    /**\n     * Return a fully-qualified projectLocationAgentFulfillment resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @returns {string} Resource name string.\n     */\n    projectLocationAgentFulfillmentPath(project, location) {\n        return this.pathTemplates.projectLocationAgentFulfillmentPathTemplate.render({\n            project: project,\n            location: location,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationAgentFulfillment resource.\n     *\n     * @param {string} projectLocationAgentFulfillmentName\n     *   A fully-qualified path representing project_location_agent_fulfillment resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationAgentFulfillmentName(projectLocationAgentFulfillmentName) {\n        return this.pathTemplates.projectLocationAgentFulfillmentPathTemplate.match(projectLocationAgentFulfillmentName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationAgentFulfillment resource.\n     *\n     * @param {string} projectLocationAgentFulfillmentName\n     *   A fully-qualified path representing project_location_agent_fulfillment resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationAgentFulfillmentName(projectLocationAgentFulfillmentName) {\n        return this.pathTemplates.projectLocationAgentFulfillmentPathTemplate.match(projectLocationAgentFulfillmentName).location;\n    }\n    /**\n     * Return a fully-qualified projectLocationAgentIntent resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} intent\n     * @returns {string} Resource name string.\n     */\n    projectLocationAgentIntentPath(project, location, intent) {\n        return this.pathTemplates.projectLocationAgentIntentPathTemplate.render({\n            project: project,\n            location: location,\n            intent: intent,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationAgentIntent resource.\n     *\n     * @param {string} projectLocationAgentIntentName\n     *   A fully-qualified path representing project_location_agent_intent resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationAgentIntentName(projectLocationAgentIntentName) {\n        return this.pathTemplates.projectLocationAgentIntentPathTemplate.match(projectLocationAgentIntentName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationAgentIntent resource.\n     *\n     * @param {string} projectLocationAgentIntentName\n     *   A fully-qualified path representing project_location_agent_intent resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationAgentIntentName(projectLocationAgentIntentName) {\n        return this.pathTemplates.projectLocationAgentIntentPathTemplate.match(projectLocationAgentIntentName).location;\n    }\n    /**\n     * Parse the intent from ProjectLocationAgentIntent resource.\n     *\n     * @param {string} projectLocationAgentIntentName\n     *   A fully-qualified path representing project_location_agent_intent resource.\n     * @returns {string} A string representing the intent.\n     */\n    matchIntentFromProjectLocationAgentIntentName(projectLocationAgentIntentName) {\n        return this.pathTemplates.projectLocationAgentIntentPathTemplate.match(projectLocationAgentIntentName).intent;\n    }\n    /**\n     * Return a fully-qualified projectLocationAgentSessionContext resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} session\n     * @param {string} context\n     * @returns {string} Resource name string.\n     */\n    projectLocationAgentSessionContextPath(project, location, session, context) {\n        return this.pathTemplates.projectLocationAgentSessionContextPathTemplate.render({\n            project: project,\n            location: location,\n            session: session,\n            context: context,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationAgentSessionContext resource.\n     *\n     * @param {string} projectLocationAgentSessionContextName\n     *   A fully-qualified path representing project_location_agent_session_context resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationAgentSessionContextName(projectLocationAgentSessionContextName) {\n        return this.pathTemplates.projectLocationAgentSessionContextPathTemplate.match(projectLocationAgentSessionContextName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationAgentSessionContext resource.\n     *\n     * @param {string} projectLocationAgentSessionContextName\n     *   A fully-qualified path representing project_location_agent_session_context resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationAgentSessionContextName(projectLocationAgentSessionContextName) {\n        return this.pathTemplates.projectLocationAgentSessionContextPathTemplate.match(projectLocationAgentSessionContextName).location;\n    }\n    /**\n     * Parse the session from ProjectLocationAgentSessionContext resource.\n     *\n     * @param {string} projectLocationAgentSessionContextName\n     *   A fully-qualified path representing project_location_agent_session_context resource.\n     * @returns {string} A string representing the session.\n     */\n    matchSessionFromProjectLocationAgentSessionContextName(projectLocationAgentSessionContextName) {\n        return this.pathTemplates.projectLocationAgentSessionContextPathTemplate.match(projectLocationAgentSessionContextName).session;\n    }\n    /**\n     * Parse the context from ProjectLocationAgentSessionContext resource.\n     *\n     * @param {string} projectLocationAgentSessionContextName\n     *   A fully-qualified path representing project_location_agent_session_context resource.\n     * @returns {string} A string representing the context.\n     */\n    matchContextFromProjectLocationAgentSessionContextName(projectLocationAgentSessionContextName) {\n        return this.pathTemplates.projectLocationAgentSessionContextPathTemplate.match(projectLocationAgentSessionContextName).context;\n    }\n    /**\n     * Return a fully-qualified projectLocationAgentSessionEntityType resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} session\n     * @param {string} entity_type\n     * @returns {string} Resource name string.\n     */\n    projectLocationAgentSessionEntityTypePath(project, location, session, entityType) {\n        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.render({\n            project: project,\n            location: location,\n            session: session,\n            entity_type: entityType,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationAgentSessionEntityType resource.\n     *\n     * @param {string} projectLocationAgentSessionEntityTypeName\n     *   A fully-qualified path representing project_location_agent_session_entity_type resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {\n        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationAgentSessionEntityType resource.\n     *\n     * @param {string} projectLocationAgentSessionEntityTypeName\n     *   A fully-qualified path representing project_location_agent_session_entity_type resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {\n        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).location;\n    }\n    /**\n     * Parse the session from ProjectLocationAgentSessionEntityType resource.\n     *\n     * @param {string} projectLocationAgentSessionEntityTypeName\n     *   A fully-qualified path representing project_location_agent_session_entity_type resource.\n     * @returns {string} A string representing the session.\n     */\n    matchSessionFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {\n        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).session;\n    }\n    /**\n     * Parse the entity_type from ProjectLocationAgentSessionEntityType resource.\n     *\n     * @param {string} projectLocationAgentSessionEntityTypeName\n     *   A fully-qualified path representing project_location_agent_session_entity_type resource.\n     * @returns {string} A string representing the entity_type.\n     */\n    matchEntityTypeFromProjectLocationAgentSessionEntityTypeName(projectLocationAgentSessionEntityTypeName) {\n        return this.pathTemplates.projectLocationAgentSessionEntityTypePathTemplate.match(projectLocationAgentSessionEntityTypeName).entity_type;\n    }\n    /**\n     * Return a fully-qualified projectLocationAgentVersion resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} version\n     * @returns {string} Resource name string.\n     */\n    projectLocationAgentVersionPath(project, location, version) {\n        return this.pathTemplates.projectLocationAgentVersionPathTemplate.render({\n            project: project,\n            location: location,\n            version: version,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationAgentVersion resource.\n     *\n     * @param {string} projectLocationAgentVersionName\n     *   A fully-qualified path representing project_location_agent_version resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationAgentVersionName(projectLocationAgentVersionName) {\n        return this.pathTemplates.projectLocationAgentVersionPathTemplate.match(projectLocationAgentVersionName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationAgentVersion resource.\n     *\n     * @param {string} projectLocationAgentVersionName\n     *   A fully-qualified path representing project_location_agent_version resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationAgentVersionName(projectLocationAgentVersionName) {\n        return this.pathTemplates.projectLocationAgentVersionPathTemplate.match(projectLocationAgentVersionName).location;\n    }\n    /**\n     * Parse the version from ProjectLocationAgentVersion resource.\n     *\n     * @param {string} projectLocationAgentVersionName\n     *   A fully-qualified path representing project_location_agent_version resource.\n     * @returns {string} A string representing the version.\n     */\n    matchVersionFromProjectLocationAgentVersionName(projectLocationAgentVersionName) {\n        return this.pathTemplates.projectLocationAgentVersionPathTemplate.match(projectLocationAgentVersionName).version;\n    }\n    /**\n     * Return a fully-qualified projectLocationAnswerRecord resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} answer_record\n     * @returns {string} Resource name string.\n     */\n    projectLocationAnswerRecordPath(project, location, answerRecord) {\n        return this.pathTemplates.projectLocationAnswerRecordPathTemplate.render({\n            project: project,\n            location: location,\n            answer_record: answerRecord,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationAnswerRecord resource.\n     *\n     * @param {string} projectLocationAnswerRecordName\n     *   A fully-qualified path representing project_location_answer_record resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationAnswerRecordName(projectLocationAnswerRecordName) {\n        return this.pathTemplates.projectLocationAnswerRecordPathTemplate.match(projectLocationAnswerRecordName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationAnswerRecord resource.\n     *\n     * @param {string} projectLocationAnswerRecordName\n     *   A fully-qualified path representing project_location_answer_record resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationAnswerRecordName(projectLocationAnswerRecordName) {\n        return this.pathTemplates.projectLocationAnswerRecordPathTemplate.match(projectLocationAnswerRecordName).location;\n    }\n    /**\n     * Parse the answer_record from ProjectLocationAnswerRecord resource.\n     *\n     * @param {string} projectLocationAnswerRecordName\n     *   A fully-qualified path representing project_location_answer_record resource.\n     * @returns {string} A string representing the answer_record.\n     */\n    matchAnswerRecordFromProjectLocationAnswerRecordName(projectLocationAnswerRecordName) {\n        return this.pathTemplates.projectLocationAnswerRecordPathTemplate.match(projectLocationAnswerRecordName).answer_record;\n    }\n    /**\n     * Return a fully-qualified projectLocationConversation resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} conversation\n     * @returns {string} Resource name string.\n     */\n    projectLocationConversationPath(project, location, conversation) {\n        return this.pathTemplates.projectLocationConversationPathTemplate.render({\n            project: project,\n            location: location,\n            conversation: conversation,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationConversation resource.\n     *\n     * @param {string} projectLocationConversationName\n     *   A fully-qualified path representing project_location_conversation resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationConversationName(projectLocationConversationName) {\n        return this.pathTemplates.projectLocationConversationPathTemplate.match(projectLocationConversationName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationConversation resource.\n     *\n     * @param {string} projectLocationConversationName\n     *   A fully-qualified path representing project_location_conversation resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationConversationName(projectLocationConversationName) {\n        return this.pathTemplates.projectLocationConversationPathTemplate.match(projectLocationConversationName).location;\n    }\n    /**\n     * Parse the conversation from ProjectLocationConversation resource.\n     *\n     * @param {string} projectLocationConversationName\n     *   A fully-qualified path representing project_location_conversation resource.\n     * @returns {string} A string representing the conversation.\n     */\n    matchConversationFromProjectLocationConversationName(projectLocationConversationName) {\n        return this.pathTemplates.projectLocationConversationPathTemplate.match(projectLocationConversationName).conversation;\n    }\n    /**\n     * Return a fully-qualified projectLocationConversationMessage resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} conversation\n     * @param {string} message\n     * @returns {string} Resource name string.\n     */\n    projectLocationConversationMessagePath(project, location, conversation, message) {\n        return this.pathTemplates.projectLocationConversationMessagePathTemplate.render({\n            project: project,\n            location: location,\n            conversation: conversation,\n            message: message,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationConversationMessage resource.\n     *\n     * @param {string} projectLocationConversationMessageName\n     *   A fully-qualified path representing project_location_conversation_message resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationConversationMessageName(projectLocationConversationMessageName) {\n        return this.pathTemplates.projectLocationConversationMessagePathTemplate.match(projectLocationConversationMessageName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationConversationMessage resource.\n     *\n     * @param {string} projectLocationConversationMessageName\n     *   A fully-qualified path representing project_location_conversation_message resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationConversationMessageName(projectLocationConversationMessageName) {\n        return this.pathTemplates.projectLocationConversationMessagePathTemplate.match(projectLocationConversationMessageName).location;\n    }\n    /**\n     * Parse the conversation from ProjectLocationConversationMessage resource.\n     *\n     * @param {string} projectLocationConversationMessageName\n     *   A fully-qualified path representing project_location_conversation_message resource.\n     * @returns {string} A string representing the conversation.\n     */\n    matchConversationFromProjectLocationConversationMessageName(projectLocationConversationMessageName) {\n        return this.pathTemplates.projectLocationConversationMessagePathTemplate.match(projectLocationConversationMessageName).conversation;\n    }\n    /**\n     * Parse the message from ProjectLocationConversationMessage resource.\n     *\n     * @param {string} projectLocationConversationMessageName\n     *   A fully-qualified path representing project_location_conversation_message resource.\n     * @returns {string} A string representing the message.\n     */\n    matchMessageFromProjectLocationConversationMessageName(projectLocationConversationMessageName) {\n        return this.pathTemplates.projectLocationConversationMessagePathTemplate.match(projectLocationConversationMessageName).message;\n    }\n    /**\n     * Return a fully-qualified projectLocationConversationModel resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} conversation_model\n     * @returns {string} Resource name string.\n     */\n    projectLocationConversationModelPath(project, location, conversationModel) {\n        return this.pathTemplates.projectLocationConversationModelPathTemplate.render({\n            project: project,\n            location: location,\n            conversation_model: conversationModel,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationConversationModel resource.\n     *\n     * @param {string} projectLocationConversationModelName\n     *   A fully-qualified path representing project_location_conversation_model resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationConversationModelName(projectLocationConversationModelName) {\n        return this.pathTemplates.projectLocationConversationModelPathTemplate.match(projectLocationConversationModelName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationConversationModel resource.\n     *\n     * @param {string} projectLocationConversationModelName\n     *   A fully-qualified path representing project_location_conversation_model resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationConversationModelName(projectLocationConversationModelName) {\n        return this.pathTemplates.projectLocationConversationModelPathTemplate.match(projectLocationConversationModelName).location;\n    }\n    /**\n     * Parse the conversation_model from ProjectLocationConversationModel resource.\n     *\n     * @param {string} projectLocationConversationModelName\n     *   A fully-qualified path representing project_location_conversation_model resource.\n     * @returns {string} A string representing the conversation_model.\n     */\n    matchConversationModelFromProjectLocationConversationModelName(projectLocationConversationModelName) {\n        return this.pathTemplates.projectLocationConversationModelPathTemplate.match(projectLocationConversationModelName).conversation_model;\n    }\n    /**\n     * Return a fully-qualified projectLocationConversationModelEvaluation resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} conversation_model\n     * @param {string} evaluation\n     * @returns {string} Resource name string.\n     */\n    projectLocationConversationModelEvaluationPath(project, location, conversationModel, evaluation) {\n        return this.pathTemplates.projectLocationConversationModelEvaluationPathTemplate.render({\n            project: project,\n            location: location,\n            conversation_model: conversationModel,\n            evaluation: evaluation,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationConversationModelEvaluation resource.\n     *\n     * @param {string} projectLocationConversationModelEvaluationName\n     *   A fully-qualified path representing project_location_conversation_model_evaluation resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationConversationModelEvaluationName(projectLocationConversationModelEvaluationName) {\n        return this.pathTemplates.projectLocationConversationModelEvaluationPathTemplate.match(projectLocationConversationModelEvaluationName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationConversationModelEvaluation resource.\n     *\n     * @param {string} projectLocationConversationModelEvaluationName\n     *   A fully-qualified path representing project_location_conversation_model_evaluation resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationConversationModelEvaluationName(projectLocationConversationModelEvaluationName) {\n        return this.pathTemplates.projectLocationConversationModelEvaluationPathTemplate.match(projectLocationConversationModelEvaluationName).location;\n    }\n    /**\n     * Parse the conversation_model from ProjectLocationConversationModelEvaluation resource.\n     *\n     * @param {string} projectLocationConversationModelEvaluationName\n     *   A fully-qualified path representing project_location_conversation_model_evaluation resource.\n     * @returns {string} A string representing the conversation_model.\n     */\n    matchConversationModelFromProjectLocationConversationModelEvaluationName(projectLocationConversationModelEvaluationName) {\n        return this.pathTemplates.projectLocationConversationModelEvaluationPathTemplate.match(projectLocationConversationModelEvaluationName).conversation_model;\n    }\n    /**\n     * Parse the evaluation from ProjectLocationConversationModelEvaluation resource.\n     *\n     * @param {string} projectLocationConversationModelEvaluationName\n     *   A fully-qualified path representing project_location_conversation_model_evaluation resource.\n     * @returns {string} A string representing the evaluation.\n     */\n    matchEvaluationFromProjectLocationConversationModelEvaluationName(projectLocationConversationModelEvaluationName) {\n        return this.pathTemplates.projectLocationConversationModelEvaluationPathTemplate.match(projectLocationConversationModelEvaluationName).evaluation;\n    }\n    /**\n     * Return a fully-qualified projectLocationConversationParticipant resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} conversation\n     * @param {string} participant\n     * @returns {string} Resource name string.\n     */\n    projectLocationConversationParticipantPath(project, location, conversation, participant) {\n        return this.pathTemplates.projectLocationConversationParticipantPathTemplate.render({\n            project: project,\n            location: location,\n            conversation: conversation,\n            participant: participant,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationConversationParticipant resource.\n     *\n     * @param {string} projectLocationConversationParticipantName\n     *   A fully-qualified path representing project_location_conversation_participant resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationConversationParticipantName(projectLocationConversationParticipantName) {\n        return this.pathTemplates.projectLocationConversationParticipantPathTemplate.match(projectLocationConversationParticipantName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationConversationParticipant resource.\n     *\n     * @param {string} projectLocationConversationParticipantName\n     *   A fully-qualified path representing project_location_conversation_participant resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationConversationParticipantName(projectLocationConversationParticipantName) {\n        return this.pathTemplates.projectLocationConversationParticipantPathTemplate.match(projectLocationConversationParticipantName).location;\n    }\n    /**\n     * Parse the conversation from ProjectLocationConversationParticipant resource.\n     *\n     * @param {string} projectLocationConversationParticipantName\n     *   A fully-qualified path representing project_location_conversation_participant resource.\n     * @returns {string} A string representing the conversation.\n     */\n    matchConversationFromProjectLocationConversationParticipantName(projectLocationConversationParticipantName) {\n        return this.pathTemplates.projectLocationConversationParticipantPathTemplate.match(projectLocationConversationParticipantName).conversation;\n    }\n    /**\n     * Parse the participant from ProjectLocationConversationParticipant resource.\n     *\n     * @param {string} projectLocationConversationParticipantName\n     *   A fully-qualified path representing project_location_conversation_participant resource.\n     * @returns {string} A string representing the participant.\n     */\n    matchParticipantFromProjectLocationConversationParticipantName(projectLocationConversationParticipantName) {\n        return this.pathTemplates.projectLocationConversationParticipantPathTemplate.match(projectLocationConversationParticipantName).participant;\n    }\n    /**\n     * Return a fully-qualified projectLocationConversationProfile resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} conversation_profile\n     * @returns {string} Resource name string.\n     */\n    projectLocationConversationProfilePath(project, location, conversationProfile) {\n        return this.pathTemplates.projectLocationConversationProfilePathTemplate.render({\n            project: project,\n            location: location,\n            conversation_profile: conversationProfile,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationConversationProfile resource.\n     *\n     * @param {string} projectLocationConversationProfileName\n     *   A fully-qualified path representing project_location_conversation_profile resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationConversationProfileName(projectLocationConversationProfileName) {\n        return this.pathTemplates.projectLocationConversationProfilePathTemplate.match(projectLocationConversationProfileName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationConversationProfile resource.\n     *\n     * @param {string} projectLocationConversationProfileName\n     *   A fully-qualified path representing project_location_conversation_profile resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationConversationProfileName(projectLocationConversationProfileName) {\n        return this.pathTemplates.projectLocationConversationProfilePathTemplate.match(projectLocationConversationProfileName).location;\n    }\n    /**\n     * Parse the conversation_profile from ProjectLocationConversationProfile resource.\n     *\n     * @param {string} projectLocationConversationProfileName\n     *   A fully-qualified path representing project_location_conversation_profile resource.\n     * @returns {string} A string representing the conversation_profile.\n     */\n    matchConversationProfileFromProjectLocationConversationProfileName(projectLocationConversationProfileName) {\n        return this.pathTemplates.projectLocationConversationProfilePathTemplate.match(projectLocationConversationProfileName).conversation_profile;\n    }\n    /**\n     * Return a fully-qualified projectLocationKnowledgeBase resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} knowledge_base\n     * @returns {string} Resource name string.\n     */\n    projectLocationKnowledgeBasePath(project, location, knowledgeBase) {\n        return this.pathTemplates.projectLocationKnowledgeBasePathTemplate.render({\n            project: project,\n            location: location,\n            knowledge_base: knowledgeBase,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationKnowledgeBase resource.\n     *\n     * @param {string} projectLocationKnowledgeBaseName\n     *   A fully-qualified path representing project_location_knowledge_base resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationKnowledgeBaseName(projectLocationKnowledgeBaseName) {\n        return this.pathTemplates.projectLocationKnowledgeBasePathTemplate.match(projectLocationKnowledgeBaseName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationKnowledgeBase resource.\n     *\n     * @param {string} projectLocationKnowledgeBaseName\n     *   A fully-qualified path representing project_location_knowledge_base resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationKnowledgeBaseName(projectLocationKnowledgeBaseName) {\n        return this.pathTemplates.projectLocationKnowledgeBasePathTemplate.match(projectLocationKnowledgeBaseName).location;\n    }\n    /**\n     * Parse the knowledge_base from ProjectLocationKnowledgeBase resource.\n     *\n     * @param {string} projectLocationKnowledgeBaseName\n     *   A fully-qualified path representing project_location_knowledge_base resource.\n     * @returns {string} A string representing the knowledge_base.\n     */\n    matchKnowledgeBaseFromProjectLocationKnowledgeBaseName(projectLocationKnowledgeBaseName) {\n        return this.pathTemplates.projectLocationKnowledgeBasePathTemplate.match(projectLocationKnowledgeBaseName).knowledge_base;\n    }\n    /**\n     * Return a fully-qualified projectLocationKnowledgeBaseDocument resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} knowledge_base\n     * @param {string} document\n     * @returns {string} Resource name string.\n     */\n    projectLocationKnowledgeBaseDocumentPath(project, location, knowledgeBase, document) {\n        return this.pathTemplates.projectLocationKnowledgeBaseDocumentPathTemplate.render({\n            project: project,\n            location: location,\n            knowledge_base: knowledgeBase,\n            document: document,\n        });\n    }\n    /**\n     * Parse the project from ProjectLocationKnowledgeBaseDocument resource.\n     *\n     * @param {string} projectLocationKnowledgeBaseDocumentName\n     *   A fully-qualified path representing project_location_knowledge_base_document resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectLocationKnowledgeBaseDocumentName(projectLocationKnowledgeBaseDocumentName) {\n        return this.pathTemplates.projectLocationKnowledgeBaseDocumentPathTemplate.match(projectLocationKnowledgeBaseDocumentName).project;\n    }\n    /**\n     * Parse the location from ProjectLocationKnowledgeBaseDocument resource.\n     *\n     * @param {string} projectLocationKnowledgeBaseDocumentName\n     *   A fully-qualified path representing project_location_knowledge_base_document resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProjectLocationKnowledgeBaseDocumentName(projectLocationKnowledgeBaseDocumentName) {\n        return this.pathTemplates.projectLocationKnowledgeBaseDocumentPathTemplate.match(projectLocationKnowledgeBaseDocumentName).location;\n    }\n    /**\n     * Parse the knowledge_base from ProjectLocationKnowledgeBaseDocument resource.\n     *\n     * @param {string} projectLocationKnowledgeBaseDocumentName\n     *   A fully-qualified path representing project_location_knowledge_base_document resource.\n     * @returns {string} A string representing the knowledge_base.\n     */\n    matchKnowledgeBaseFromProjectLocationKnowledgeBaseDocumentName(projectLocationKnowledgeBaseDocumentName) {\n        return this.pathTemplates.projectLocationKnowledgeBaseDocumentPathTemplate.match(projectLocationKnowledgeBaseDocumentName).knowledge_base;\n    }\n    /**\n     * Parse the document from ProjectLocationKnowledgeBaseDocument resource.\n     *\n     * @param {string} projectLocationKnowledgeBaseDocumentName\n     *   A fully-qualified path representing project_location_knowledge_base_document resource.\n     * @returns {string} A string representing the document.\n     */\n    matchDocumentFromProjectLocationKnowledgeBaseDocumentName(projectLocationKnowledgeBaseDocumentName) {\n        return this.pathTemplates.projectLocationKnowledgeBaseDocumentPathTemplate.match(projectLocationKnowledgeBaseDocumentName).document;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        if (this.conversationsStub && !this._terminated) {\n            return this.conversationsStub.then(stub => {\n                this._log.info('ending gRPC channel');\n                this._terminated = true;\n                stub.close();\n                this.locationsClient.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.ConversationsClient = ConversationsClient;\n//# sourceMappingURL=conversations_client.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}