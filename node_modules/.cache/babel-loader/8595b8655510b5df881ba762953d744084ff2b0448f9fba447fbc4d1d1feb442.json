{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCredentials = void 0;\nexports.createCertificateProviderServerCredentials = createCertificateProviderServerCredentials;\nexports.createServerCredentialsWithInterceptors = createServerCredentialsWithInterceptors;\nconst tls_helpers_1 = require(\"./tls-helpers\");\nclass ServerCredentials {\n  constructor(serverConstructorOptions, contextOptions) {\n    this.serverConstructorOptions = serverConstructorOptions;\n    this.watchers = new Set();\n    this.latestContextOptions = null;\n    this.latestContextOptions = contextOptions !== null && contextOptions !== void 0 ? contextOptions : null;\n  }\n  _addWatcher(watcher) {\n    this.watchers.add(watcher);\n  }\n  _removeWatcher(watcher) {\n    this.watchers.delete(watcher);\n  }\n  getWatcherCount() {\n    return this.watchers.size;\n  }\n  updateSecureContextOptions(options) {\n    this.latestContextOptions = options;\n    for (const watcher of this.watchers) {\n      watcher(this.latestContextOptions);\n    }\n  }\n  _isSecure() {\n    return this.serverConstructorOptions !== null;\n  }\n  _getSecureContextOptions() {\n    return this.latestContextOptions;\n  }\n  _getConstructorOptions() {\n    return this.serverConstructorOptions;\n  }\n  _getInterceptors() {\n    return [];\n  }\n  static createInsecure() {\n    return new InsecureServerCredentials();\n  }\n  static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) {\n    var _a;\n    if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {\n      throw new TypeError('rootCerts must be null or a Buffer');\n    }\n    if (!Array.isArray(keyCertPairs)) {\n      throw new TypeError('keyCertPairs must be an array');\n    }\n    if (typeof checkClientCertificate !== 'boolean') {\n      throw new TypeError('checkClientCertificate must be a boolean');\n    }\n    const cert = [];\n    const key = [];\n    for (let i = 0; i < keyCertPairs.length; i++) {\n      const pair = keyCertPairs[i];\n      if (pair === null || typeof pair !== 'object') {\n        throw new TypeError(`keyCertPair[${i}] must be an object`);\n      }\n      if (!Buffer.isBuffer(pair.private_key)) {\n        throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);\n      }\n      if (!Buffer.isBuffer(pair.cert_chain)) {\n        throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);\n      }\n      cert.push(pair.cert_chain);\n      key.push(pair.private_key);\n    }\n    return new SecureServerCredentials({\n      requestCert: checkClientCertificate,\n      ciphers: tls_helpers_1.CIPHER_SUITES\n    }, {\n      ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : (0, tls_helpers_1.getDefaultRootsData)()) !== null && _a !== void 0 ? _a : undefined,\n      cert,\n      key\n    });\n  }\n}\nexports.ServerCredentials = ServerCredentials;\nclass InsecureServerCredentials extends ServerCredentials {\n  constructor() {\n    super(null);\n  }\n  _getSettings() {\n    return null;\n  }\n  _equals(other) {\n    return other instanceof InsecureServerCredentials;\n  }\n}\nclass SecureServerCredentials extends ServerCredentials {\n  constructor(constructorOptions, contextOptions) {\n    super(constructorOptions, contextOptions);\n    this.options = Object.assign(Object.assign({}, constructorOptions), contextOptions);\n  }\n  /**\n   * Checks equality by checking the options that are actually set by\n   * createSsl.\n   * @param other\n   * @returns\n   */\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof SecureServerCredentials)) {\n      return false;\n    }\n    // options.ca equality check\n    if (Buffer.isBuffer(this.options.ca) && Buffer.isBuffer(other.options.ca)) {\n      if (!this.options.ca.equals(other.options.ca)) {\n        return false;\n      }\n    } else {\n      if (this.options.ca !== other.options.ca) {\n        return false;\n      }\n    }\n    // options.cert equality check\n    if (Array.isArray(this.options.cert) && Array.isArray(other.options.cert)) {\n      if (this.options.cert.length !== other.options.cert.length) {\n        return false;\n      }\n      for (let i = 0; i < this.options.cert.length; i++) {\n        const thisCert = this.options.cert[i];\n        const otherCert = other.options.cert[i];\n        if (Buffer.isBuffer(thisCert) && Buffer.isBuffer(otherCert)) {\n          if (!thisCert.equals(otherCert)) {\n            return false;\n          }\n        } else {\n          if (thisCert !== otherCert) {\n            return false;\n          }\n        }\n      }\n    } else {\n      if (this.options.cert !== other.options.cert) {\n        return false;\n      }\n    }\n    // options.key equality check\n    if (Array.isArray(this.options.key) && Array.isArray(other.options.key)) {\n      if (this.options.key.length !== other.options.key.length) {\n        return false;\n      }\n      for (let i = 0; i < this.options.key.length; i++) {\n        const thisKey = this.options.key[i];\n        const otherKey = other.options.key[i];\n        if (Buffer.isBuffer(thisKey) && Buffer.isBuffer(otherKey)) {\n          if (!thisKey.equals(otherKey)) {\n            return false;\n          }\n        } else {\n          if (thisKey !== otherKey) {\n            return false;\n          }\n        }\n      }\n    } else {\n      if (this.options.key !== other.options.key) {\n        return false;\n      }\n    }\n    // options.requestCert equality check\n    if (this.options.requestCert !== other.options.requestCert) {\n      return false;\n    }\n    /* ciphers is derived from a value that is constant for the process, so no\n     * equality check is needed. */\n    return true;\n  }\n}\nclass CertificateProviderServerCredentials extends ServerCredentials {\n  constructor(identityCertificateProvider, caCertificateProvider, requireClientCertificate) {\n    super({\n      requestCert: caCertificateProvider !== null,\n      rejectUnauthorized: requireClientCertificate,\n      ciphers: tls_helpers_1.CIPHER_SUITES\n    });\n    this.identityCertificateProvider = identityCertificateProvider;\n    this.caCertificateProvider = caCertificateProvider;\n    this.requireClientCertificate = requireClientCertificate;\n    this.latestCaUpdate = null;\n    this.latestIdentityUpdate = null;\n    this.caCertificateUpdateListener = this.handleCaCertificateUpdate.bind(this);\n    this.identityCertificateUpdateListener = this.handleIdentityCertitificateUpdate.bind(this);\n  }\n  _addWatcher(watcher) {\n    var _a;\n    if (this.getWatcherCount() === 0) {\n      (_a = this.caCertificateProvider) === null || _a === void 0 ? void 0 : _a.addCaCertificateListener(this.caCertificateUpdateListener);\n      this.identityCertificateProvider.addIdentityCertificateListener(this.identityCertificateUpdateListener);\n    }\n    super._addWatcher(watcher);\n  }\n  _removeWatcher(watcher) {\n    var _a;\n    super._removeWatcher(watcher);\n    if (this.getWatcherCount() === 0) {\n      (_a = this.caCertificateProvider) === null || _a === void 0 ? void 0 : _a.removeCaCertificateListener(this.caCertificateUpdateListener);\n      this.identityCertificateProvider.removeIdentityCertificateListener(this.identityCertificateUpdateListener);\n    }\n  }\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof CertificateProviderServerCredentials)) {\n      return false;\n    }\n    return this.caCertificateProvider === other.caCertificateProvider && this.identityCertificateProvider === other.identityCertificateProvider && this.requireClientCertificate === other.requireClientCertificate;\n  }\n  calculateSecureContextOptions() {\n    var _a;\n    if (this.latestIdentityUpdate === null) {\n      return null;\n    }\n    if (this.caCertificateProvider !== null && this.latestCaUpdate === null) {\n      return null;\n    }\n    return {\n      ca: (_a = this.latestCaUpdate) === null || _a === void 0 ? void 0 : _a.caCertificate,\n      cert: [this.latestIdentityUpdate.certificate],\n      key: [this.latestIdentityUpdate.privateKey]\n    };\n  }\n  finalizeUpdate() {\n    const secureContextOptions = this.calculateSecureContextOptions();\n    this.updateSecureContextOptions(secureContextOptions);\n  }\n  handleCaCertificateUpdate(update) {\n    this.latestCaUpdate = update;\n    this.finalizeUpdate();\n  }\n  handleIdentityCertitificateUpdate(update) {\n    this.latestIdentityUpdate = update;\n    this.finalizeUpdate();\n  }\n}\nfunction createCertificateProviderServerCredentials(caCertificateProvider, identityCertificateProvider, requireClientCertificate) {\n  return new CertificateProviderServerCredentials(caCertificateProvider, identityCertificateProvider, requireClientCertificate);\n}\nclass InterceptorServerCredentials extends ServerCredentials {\n  constructor(childCredentials, interceptors) {\n    super({});\n    this.childCredentials = childCredentials;\n    this.interceptors = interceptors;\n  }\n  _isSecure() {\n    return this.childCredentials._isSecure();\n  }\n  _equals(other) {\n    if (!(other instanceof InterceptorServerCredentials)) {\n      return false;\n    }\n    if (!this.childCredentials._equals(other.childCredentials)) {\n      return false;\n    }\n    if (this.interceptors.length !== other.interceptors.length) {\n      return false;\n    }\n    for (let i = 0; i < this.interceptors.length; i++) {\n      if (this.interceptors[i] !== other.interceptors[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _getInterceptors() {\n    return this.interceptors;\n  }\n  _addWatcher(watcher) {\n    this.childCredentials._addWatcher(watcher);\n  }\n  _removeWatcher(watcher) {\n    this.childCredentials._removeWatcher(watcher);\n  }\n  _getConstructorOptions() {\n    return this.childCredentials._getConstructorOptions();\n  }\n  _getSecureContextOptions() {\n    return this.childCredentials._getSecureContextOptions();\n  }\n}\nfunction createServerCredentialsWithInterceptors(credentials, interceptors) {\n  return new InterceptorServerCredentials(credentials, interceptors);\n}","map":{"version":3,"names":["exports","createCertificateProviderServerCredentials","createServerCredentialsWithInterceptors","tls_helpers_1","require","ServerCredentials","constructor","serverConstructorOptions","contextOptions","watchers","Set","latestContextOptions","_addWatcher","watcher","add","_removeWatcher","delete","getWatcherCount","size","updateSecureContextOptions","options","_isSecure","_getSecureContextOptions","_getConstructorOptions","_getInterceptors","createInsecure","InsecureServerCredentials","createSsl","rootCerts","keyCertPairs","checkClientCertificate","Buffer","isBuffer","TypeError","Array","isArray","cert","key","i","length","pair","private_key","cert_chain","push","SecureServerCredentials","requestCert","ciphers","CIPHER_SUITES","ca","_a","getDefaultRootsData","undefined","_getSettings","_equals","other","constructorOptions","Object","assign","equals","thisCert","otherCert","thisKey","otherKey","CertificateProviderServerCredentials","identityCertificateProvider","caCertificateProvider","requireClientCertificate","rejectUnauthorized","latestCaUpdate","latestIdentityUpdate","caCertificateUpdateListener","handleCaCertificateUpdate","bind","identityCertificateUpdateListener","handleIdentityCertitificateUpdate","addCaCertificateListener","addIdentityCertificateListener","removeCaCertificateListener","removeIdentityCertificateListener","calculateSecureContextOptions","caCertificate","certificate","privateKey","finalizeUpdate","secureContextOptions","update","InterceptorServerCredentials","childCredentials","interceptors","credentials"],"sources":["C:\\Users\\BIT\\chatboot\\node_modules\\@grpc\\grpc-js\\src\\server-credentials.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { SecureServerOptions } from 'http2';\nimport { CIPHER_SUITES, getDefaultRootsData } from './tls-helpers';\nimport { SecureContextOptions } from 'tls';\nimport { ServerInterceptor } from '.';\nimport { CaCertificateUpdate, CaCertificateUpdateListener, CertificateProvider, IdentityCertificateUpdate, IdentityCertificateUpdateListener } from './certificate-provider';\n\nexport interface KeyCertPair {\n  private_key: Buffer;\n  cert_chain: Buffer;\n}\n\nexport interface SecureContextWatcher {\n  (context: SecureContextOptions | null): void;\n}\n\nexport abstract class ServerCredentials {\n  private watchers: Set<SecureContextWatcher> = new Set();\n  private latestContextOptions: SecureContextOptions | null = null;\n  constructor(private serverConstructorOptions: SecureServerOptions | null, contextOptions?: SecureContextOptions) {\n    this.latestContextOptions = contextOptions ?? null;\n  }\n\n  _addWatcher(watcher: SecureContextWatcher) {\n    this.watchers.add(watcher);\n  }\n  _removeWatcher(watcher: SecureContextWatcher) {\n    this.watchers.delete(watcher);\n  }\n  protected getWatcherCount() {\n    return this.watchers.size;\n  }\n  protected updateSecureContextOptions(options: SecureContextOptions | null) {\n    this.latestContextOptions = options;\n    for (const watcher of this.watchers) {\n      watcher(this.latestContextOptions);\n    }\n  }\n  _isSecure(): boolean {\n    return this.serverConstructorOptions !== null;\n  }\n  _getSecureContextOptions(): SecureContextOptions | null {\n    return this.latestContextOptions;\n  }\n  _getConstructorOptions(): SecureServerOptions | null {\n    return this.serverConstructorOptions;\n  }\n  _getInterceptors(): ServerInterceptor[] {\n    return [];\n  }\n  abstract _equals(other: ServerCredentials): boolean;\n\n  static createInsecure(): ServerCredentials {\n    return new InsecureServerCredentials();\n  }\n\n  static createSsl(\n    rootCerts: Buffer | null,\n    keyCertPairs: KeyCertPair[],\n    checkClientCertificate = false\n  ): ServerCredentials {\n    if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {\n      throw new TypeError('rootCerts must be null or a Buffer');\n    }\n\n    if (!Array.isArray(keyCertPairs)) {\n      throw new TypeError('keyCertPairs must be an array');\n    }\n\n    if (typeof checkClientCertificate !== 'boolean') {\n      throw new TypeError('checkClientCertificate must be a boolean');\n    }\n\n    const cert: Buffer[] = [];\n    const key: Buffer[] = [];\n\n    for (let i = 0; i < keyCertPairs.length; i++) {\n      const pair = keyCertPairs[i];\n\n      if (pair === null || typeof pair !== 'object') {\n        throw new TypeError(`keyCertPair[${i}] must be an object`);\n      }\n\n      if (!Buffer.isBuffer(pair.private_key)) {\n        throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);\n      }\n\n      if (!Buffer.isBuffer(pair.cert_chain)) {\n        throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);\n      }\n\n      cert.push(pair.cert_chain);\n      key.push(pair.private_key);\n    }\n\n    return new SecureServerCredentials({\n      requestCert: checkClientCertificate,\n      ciphers: CIPHER_SUITES,\n    }, {\n      ca: rootCerts ?? getDefaultRootsData() ?? undefined,\n      cert,\n      key,\n    });\n  }\n}\n\nclass InsecureServerCredentials extends ServerCredentials {\n  constructor() {\n    super(null);\n  }\n\n  _getSettings(): null {\n    return null;\n  }\n\n  _equals(other: ServerCredentials): boolean {\n    return other instanceof InsecureServerCredentials;\n  }\n}\n\nclass SecureServerCredentials extends ServerCredentials {\n  private options: SecureServerOptions;\n\n  constructor(constructorOptions: SecureServerOptions, contextOptions: SecureContextOptions) {\n    super(constructorOptions, contextOptions);\n    this.options = {...constructorOptions, ...contextOptions};\n  }\n\n  /**\n   * Checks equality by checking the options that are actually set by\n   * createSsl.\n   * @param other\n   * @returns\n   */\n  _equals(other: ServerCredentials): boolean {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof SecureServerCredentials)) {\n      return false;\n    }\n    // options.ca equality check\n    if (Buffer.isBuffer(this.options.ca) && Buffer.isBuffer(other.options.ca)) {\n      if (!this.options.ca.equals(other.options.ca)) {\n        return false;\n      }\n    } else {\n      if (this.options.ca !== other.options.ca) {\n        return false;\n      }\n    }\n    // options.cert equality check\n    if (Array.isArray(this.options.cert) && Array.isArray(other.options.cert)) {\n      if (this.options.cert.length !== other.options.cert.length) {\n        return false;\n      }\n      for (let i = 0; i < this.options.cert.length; i++) {\n        const thisCert = this.options.cert[i];\n        const otherCert = other.options.cert[i];\n        if (Buffer.isBuffer(thisCert) && Buffer.isBuffer(otherCert)) {\n          if (!thisCert.equals(otherCert)) {\n            return false;\n          }\n        } else {\n          if (thisCert !== otherCert) {\n            return false;\n          }\n        }\n      }\n    } else {\n      if (this.options.cert !== other.options.cert) {\n        return false;\n      }\n    }\n    // options.key equality check\n    if (Array.isArray(this.options.key) && Array.isArray(other.options.key)) {\n      if (this.options.key.length !== other.options.key.length) {\n        return false;\n      }\n      for (let i = 0; i < this.options.key.length; i++) {\n        const thisKey = this.options.key[i];\n        const otherKey = other.options.key[i];\n        if (Buffer.isBuffer(thisKey) && Buffer.isBuffer(otherKey)) {\n          if (!thisKey.equals(otherKey)) {\n            return false;\n          }\n        } else {\n          if (thisKey !== otherKey) {\n            return false;\n          }\n        }\n      }\n    } else {\n      if (this.options.key !== other.options.key) {\n        return false;\n      }\n    }\n    // options.requestCert equality check\n    if (this.options.requestCert !== other.options.requestCert) {\n      return false;\n    }\n    /* ciphers is derived from a value that is constant for the process, so no\n     * equality check is needed. */\n    return true;\n  }\n}\n\nclass CertificateProviderServerCredentials extends ServerCredentials {\n  private latestCaUpdate: CaCertificateUpdate | null = null;\n  private latestIdentityUpdate: IdentityCertificateUpdate | null = null;\n  private caCertificateUpdateListener: CaCertificateUpdateListener = this.handleCaCertificateUpdate.bind(this);\n  private identityCertificateUpdateListener: IdentityCertificateUpdateListener = this.handleIdentityCertitificateUpdate.bind(this);\n  constructor(\n    private identityCertificateProvider: CertificateProvider,\n    private caCertificateProvider: CertificateProvider | null,\n    private requireClientCertificate: boolean\n  ) {\n    super({\n      requestCert: caCertificateProvider !== null,\n      rejectUnauthorized: requireClientCertificate,\n      ciphers: CIPHER_SUITES\n    });\n  }\n  _addWatcher(watcher: SecureContextWatcher): void {\n    if (this.getWatcherCount() === 0) {\n      this.caCertificateProvider?.addCaCertificateListener(this.caCertificateUpdateListener);\n      this.identityCertificateProvider.addIdentityCertificateListener(this.identityCertificateUpdateListener);\n    }\n    super._addWatcher(watcher);\n  }\n  _removeWatcher(watcher: SecureContextWatcher): void {\n    super._removeWatcher(watcher);\n    if (this.getWatcherCount() === 0) {\n      this.caCertificateProvider?.removeCaCertificateListener(this.caCertificateUpdateListener);\n      this.identityCertificateProvider.removeIdentityCertificateListener(this.identityCertificateUpdateListener);\n    }\n  }\n  _equals(other: ServerCredentials): boolean {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof CertificateProviderServerCredentials)) {\n      return false;\n    }\n    return (\n      this.caCertificateProvider === other.caCertificateProvider &&\n      this.identityCertificateProvider === other.identityCertificateProvider &&\n      this.requireClientCertificate === other.requireClientCertificate\n    )\n  }\n\n  private calculateSecureContextOptions(): SecureContextOptions | null {\n    if (this.latestIdentityUpdate === null) {\n      return null;\n    }\n    if (this.caCertificateProvider !== null && this.latestCaUpdate === null) {\n      return null;\n    }\n    return {\n      ca: this.latestCaUpdate?.caCertificate,\n      cert: [this.latestIdentityUpdate.certificate],\n      key: [this.latestIdentityUpdate.privateKey],\n    };\n  }\n\n  private finalizeUpdate() {\n    const secureContextOptions = this.calculateSecureContextOptions();\n    this.updateSecureContextOptions(secureContextOptions);\n  }\n\n  private handleCaCertificateUpdate(update: CaCertificateUpdate | null) {\n    this.latestCaUpdate = update;\n    this.finalizeUpdate();\n  }\n\n  private handleIdentityCertitificateUpdate(update: IdentityCertificateUpdate | null) {\n    this.latestIdentityUpdate = update;\n    this.finalizeUpdate();\n  }\n}\n\nexport function createCertificateProviderServerCredentials(\n  caCertificateProvider: CertificateProvider,\n  identityCertificateProvider: CertificateProvider | null,\n  requireClientCertificate: boolean\n) {\n  return new CertificateProviderServerCredentials(\n    caCertificateProvider,\n    identityCertificateProvider,\n    requireClientCertificate);\n}\n\nclass InterceptorServerCredentials extends ServerCredentials {\n  constructor(private readonly childCredentials: ServerCredentials, private readonly interceptors: ServerInterceptor[]) {\n    super({});\n  }\n  _isSecure(): boolean {\n    return this.childCredentials._isSecure();\n  }\n  _equals(other: ServerCredentials): boolean {\n    if (!(other instanceof InterceptorServerCredentials)) {\n      return false;\n    }\n    if (!(this.childCredentials._equals(other.childCredentials))) {\n      return false;\n    }\n    if (this.interceptors.length !== other.interceptors.length) {\n      return false;\n    }\n    for (let i = 0; i < this.interceptors.length; i++) {\n      if (this.interceptors[i] !== other.interceptors[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  override _getInterceptors(): ServerInterceptor[] {\n    return this.interceptors;\n  }\n  override _addWatcher(watcher: SecureContextWatcher): void {\n    this.childCredentials._addWatcher(watcher);\n  }\n  override _removeWatcher(watcher: SecureContextWatcher): void {\n    this.childCredentials._removeWatcher(watcher);\n  }\n  override _getConstructorOptions(): SecureServerOptions | null {\n    return this.childCredentials._getConstructorOptions();\n  }\n  override _getSecureContextOptions(): SecureContextOptions | null {\n    return this.childCredentials._getSecureContextOptions();\n  }\n}\n\nexport function createServerCredentialsWithInterceptors(credentials: ServerCredentials, interceptors: ServerInterceptor[]): ServerCredentials {\n  return new InterceptorServerCredentials(credentials, interceptors);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}