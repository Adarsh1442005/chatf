{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIT\\\\chatboot\\\\src\\\\chatboot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const sendMessage = async () => {\n    const sessionId = 'unique-session-id'; // Replace with a unique identifier\n\n    try {\n      const response = await axios.post('http://localhost:5000/query', {\n        text: input,\n        sessionId: sessionId\n      });\n      setMessages([...messages, {\n        sender: 'user',\n        text: input\n      }, {\n        sender: 'bot',\n        text: response.data.fulfillmentText\n      }]);\n      setInput('');\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: msg.sender === 'user' ? 'blue' : 'green'\n        },\n        children: [msg.sender, \": \", msg.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: e => setInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","sendMessage","sessionId","response","post","text","sender","data","fulfillmentText","error","console","children","map","msg","index","style","color","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/BIT/chatboot/src/chatboot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Chatbot = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n\r\n    const sendMessage = async () => {\r\n        const sessionId = 'unique-session-id'; // Replace with a unique identifier\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/query', {\r\n                text: input,\r\n                sessionId: sessionId,\r\n            });\r\n            setMessages([...messages, { sender: 'user', text: input }, { sender: 'bot', text: response.data.fulfillmentText }]);\r\n            setInput('');\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {messages.map((msg, index) => (\r\n                    <p key={index} style={{ color: msg.sender === 'user' ? 'blue' : 'green' }}>\r\n                        {msg.sender}: {msg.text}\r\n                    </p>\r\n                ))}\r\n            </div>\r\n            <input\r\n                type=\"text\"\r\n                value={input}\r\n                onChange={(e) => setInput(e.target.value)}\r\n            />\r\n            <button onClick={sendMessage}>Send</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMC,SAAS,GAAG,mBAAmB,CAAC,CAAC;;IAEvC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,6BAA6B,EAAE;QAC7DC,IAAI,EAAEN,KAAK;QACXG,SAAS,EAAEA;MACf,CAAC,CAAC;MACFJ,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;QAAES,MAAM,EAAE,MAAM;QAAED,IAAI,EAAEN;MAAM,CAAC,EAAE;QAAEO,MAAM,EAAE,KAAK;QAAED,IAAI,EAAEF,QAAQ,CAACI,IAAI,CAACC;MAAgB,CAAC,CAAC,CAAC;MACnHR,QAAQ,CAAC,EAAE,CAAC;IAChB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;EACJ,CAAC;EAED,oBACIf,OAAA;IAAAiB,QAAA,gBACIjB,OAAA;MAAAiB,QAAA,EACKd,QAAQ,CAACe,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACrBpB,OAAA;QAAeqB,KAAK,EAAE;UAAEC,KAAK,EAAEH,GAAG,CAACP,MAAM,KAAK,MAAM,GAAG,MAAM,GAAG;QAAQ,CAAE;QAAAK,QAAA,GACrEE,GAAG,CAACP,MAAM,EAAC,IAAE,EAACO,GAAG,CAACR,IAAI;MAAA,GADnBS,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACN1B,OAAA;MACI2B,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEvB,KAAM;MACbwB,QAAQ,EAAGC,CAAC,IAAKxB,QAAQ,CAACwB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACF1B,OAAA;MAAQgC,OAAO,EAAEzB,WAAY;MAAAU,QAAA,EAAC;IAAI;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEd,CAAC;AAACxB,EAAA,CApCID,OAAO;AAAAgC,EAAA,GAAPhC,OAAO;AAsCb,eAAeA,OAAO;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}