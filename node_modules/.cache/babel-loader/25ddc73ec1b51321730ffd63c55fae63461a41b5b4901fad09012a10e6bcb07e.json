{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InterceptingListenerImpl = void 0;\nexports.isInterceptingListener = isInterceptingListener;\nfunction isInterceptingListener(listener) {\n  return listener.onReceiveMetadata !== undefined && listener.onReceiveMetadata.length === 1;\n}\nclass InterceptingListenerImpl {\n  constructor(listener, nextListener) {\n    this.listener = listener;\n    this.nextListener = nextListener;\n    this.processingMetadata = false;\n    this.hasPendingMessage = false;\n    this.processingMessage = false;\n    this.pendingStatus = null;\n  }\n  processPendingMessage() {\n    if (this.hasPendingMessage) {\n      this.nextListener.onReceiveMessage(this.pendingMessage);\n      this.pendingMessage = null;\n      this.hasPendingMessage = false;\n    }\n  }\n  processPendingStatus() {\n    if (this.pendingStatus) {\n      this.nextListener.onReceiveStatus(this.pendingStatus);\n    }\n  }\n  onReceiveMetadata(metadata) {\n    this.processingMetadata = true;\n    this.listener.onReceiveMetadata(metadata, metadata => {\n      this.processingMetadata = false;\n      this.nextListener.onReceiveMetadata(metadata);\n      this.processPendingMessage();\n      this.processPendingStatus();\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onReceiveMessage(message) {\n    /* If this listener processes messages asynchronously, the last message may\n     * be reordered with respect to the status */\n    this.processingMessage = true;\n    this.listener.onReceiveMessage(message, msg => {\n      this.processingMessage = false;\n      if (this.processingMetadata) {\n        this.pendingMessage = msg;\n        this.hasPendingMessage = true;\n      } else {\n        this.nextListener.onReceiveMessage(msg);\n        this.processPendingStatus();\n      }\n    });\n  }\n  onReceiveStatus(status) {\n    this.listener.onReceiveStatus(status, processedStatus => {\n      if (this.processingMetadata || this.processingMessage) {\n        this.pendingStatus = processedStatus;\n      } else {\n        this.nextListener.onReceiveStatus(processedStatus);\n      }\n    });\n  }\n}\nexports.InterceptingListenerImpl = InterceptingListenerImpl;","map":{"version":3,"names":["exports","isInterceptingListener","listener","onReceiveMetadata","undefined","length","InterceptingListenerImpl","constructor","nextListener","processingMetadata","hasPendingMessage","processingMessage","pendingStatus","processPendingMessage","onReceiveMessage","pendingMessage","processPendingStatus","onReceiveStatus","metadata","message","msg","status","processedStatus"],"sources":["C:\\Users\\BIT\\chatboot\\node_modules\\@grpc\\grpc-js\\src\\call-interface.ts"],"sourcesContent":["/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { CallCredentials } from './call-credentials';\nimport { Status } from './constants';\nimport { Deadline } from './deadline';\nimport { Metadata } from './metadata';\nimport { ServerSurfaceCall } from './server-call';\n\nexport interface CallStreamOptions {\n  deadline: Deadline;\n  flags: number;\n  host: string;\n  parentCall: ServerSurfaceCall | null;\n}\n\nexport type PartialCallStreamOptions = Partial<CallStreamOptions>;\n\nexport interface StatusObject {\n  code: Status;\n  details: string;\n  metadata: Metadata;\n}\n\nexport type PartialStatusObject = Pick<StatusObject, 'code' | 'details'> & {\n  metadata?: Metadata | null | undefined;\n};\n\nexport const enum WriteFlags {\n  BufferHint = 1,\n  NoCompress = 2,\n  WriteThrough = 4,\n}\n\nexport interface WriteObject {\n  message: Buffer;\n  flags?: number;\n}\n\nexport interface MetadataListener {\n  (metadata: Metadata, next: (metadata: Metadata) => void): void;\n}\n\nexport interface MessageListener {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (message: any, next: (message: any) => void): void;\n}\n\nexport interface StatusListener {\n  (status: StatusObject, next: (status: StatusObject) => void): void;\n}\n\nexport interface FullListener {\n  onReceiveMetadata: MetadataListener;\n  onReceiveMessage: MessageListener;\n  onReceiveStatus: StatusListener;\n}\n\nexport type Listener = Partial<FullListener>;\n\n/**\n * An object with methods for handling the responses to a call.\n */\nexport interface InterceptingListener {\n  onReceiveMetadata(metadata: Metadata): void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onReceiveMessage(message: any): void;\n  onReceiveStatus(status: StatusObject): void;\n}\n\nexport function isInterceptingListener(\n  listener: Listener | InterceptingListener\n): listener is InterceptingListener {\n  return (\n    listener.onReceiveMetadata !== undefined &&\n    listener.onReceiveMetadata.length === 1\n  );\n}\n\nexport class InterceptingListenerImpl implements InterceptingListener {\n  private processingMetadata = false;\n  private hasPendingMessage = false;\n  private pendingMessage: any;\n  private processingMessage = false;\n  private pendingStatus: StatusObject | null = null;\n  constructor(\n    private listener: FullListener,\n    private nextListener: InterceptingListener\n  ) {}\n\n  private processPendingMessage() {\n    if (this.hasPendingMessage) {\n      this.nextListener.onReceiveMessage(this.pendingMessage);\n      this.pendingMessage = null;\n      this.hasPendingMessage = false;\n    }\n  }\n\n  private processPendingStatus() {\n    if (this.pendingStatus) {\n      this.nextListener.onReceiveStatus(this.pendingStatus);\n    }\n  }\n\n  onReceiveMetadata(metadata: Metadata): void {\n    this.processingMetadata = true;\n    this.listener.onReceiveMetadata(metadata, metadata => {\n      this.processingMetadata = false;\n      this.nextListener.onReceiveMetadata(metadata);\n      this.processPendingMessage();\n      this.processPendingStatus();\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onReceiveMessage(message: any): void {\n    /* If this listener processes messages asynchronously, the last message may\n     * be reordered with respect to the status */\n    this.processingMessage = true;\n    this.listener.onReceiveMessage(message, msg => {\n      this.processingMessage = false;\n      if (this.processingMetadata) {\n        this.pendingMessage = msg;\n        this.hasPendingMessage = true;\n      } else {\n        this.nextListener.onReceiveMessage(msg);\n        this.processPendingStatus();\n      }\n    });\n  }\n  onReceiveStatus(status: StatusObject): void {\n    this.listener.onReceiveStatus(status, processedStatus => {\n      if (this.processingMetadata || this.processingMessage) {\n        this.pendingStatus = processedStatus;\n      } else {\n        this.nextListener.onReceiveStatus(processedStatus);\n      }\n    });\n  }\n}\n\nexport interface WriteCallback {\n  (error?: Error | null): void;\n}\n\nexport interface MessageContext {\n  callback?: WriteCallback;\n  flags?: number;\n}\n\nexport interface Call {\n  cancelWithStatus(status: Status, details: string): void;\n  getPeer(): string;\n  start(metadata: Metadata, listener: InterceptingListener): void;\n  sendMessageWithContext(context: MessageContext, message: Buffer): void;\n  startRead(): void;\n  halfClose(): void;\n  getCallNumber(): number;\n  setCredentials(credentials: CallCredentials): void;\n}\n\nexport interface DeadlineInfoProvider {\n  getDeadlineInfo(): string[];\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoFAA,OAAA,CAAAC,sBAAA,GAAAA,sBAAA;AAAA,SAAgBA,sBAAsBA,CACpCC,QAAyC;EAEzC,OACEA,QAAQ,CAACC,iBAAiB,KAAKC,SAAS,IACxCF,QAAQ,CAACC,iBAAiB,CAACE,MAAM,KAAK,CAAC;AAE3C;AAEA,MAAaC,wBAAwB;EAMnCC,YACUL,QAAsB,EACtBM,YAAkC;IADlC,KAAAN,QAAQ,GAARA,QAAQ;IACR,KAAAM,YAAY,GAAZA,YAAY;IAPd,KAAAC,kBAAkB,GAAG,KAAK;IAC1B,KAAAC,iBAAiB,GAAG,KAAK;IAEzB,KAAAC,iBAAiB,GAAG,KAAK;IACzB,KAAAC,aAAa,GAAwB,IAAI;EAI9C;EAEKC,qBAAqBA,CAAA;IAC3B,IAAI,IAAI,CAACH,iBAAiB,EAAE;MAC1B,IAAI,CAACF,YAAY,CAACM,gBAAgB,CAAC,IAAI,CAACC,cAAc,CAAC;MACvD,IAAI,CAACA,cAAc,GAAG,IAAI;MAC1B,IAAI,CAACL,iBAAiB,GAAG,KAAK;IAChC;EACF;EAEQM,oBAAoBA,CAAA;IAC1B,IAAI,IAAI,CAACJ,aAAa,EAAE;MACtB,IAAI,CAACJ,YAAY,CAACS,eAAe,CAAC,IAAI,CAACL,aAAa,CAAC;IACvD;EACF;EAEAT,iBAAiBA,CAACe,QAAkB;IAClC,IAAI,CAACT,kBAAkB,GAAG,IAAI;IAC9B,IAAI,CAACP,QAAQ,CAACC,iBAAiB,CAACe,QAAQ,EAAEA,QAAQ,IAAG;MACnD,IAAI,CAACT,kBAAkB,GAAG,KAAK;MAC/B,IAAI,CAACD,YAAY,CAACL,iBAAiB,CAACe,QAAQ,CAAC;MAC7C,IAAI,CAACL,qBAAqB,EAAE;MAC5B,IAAI,CAACG,oBAAoB,EAAE;IAC7B,CAAC,CAAC;EACJ;EACA;EACAF,gBAAgBA,CAACK,OAAY;IAC3B;;IAEA,IAAI,CAACR,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACT,QAAQ,CAACY,gBAAgB,CAACK,OAAO,EAAEC,GAAG,IAAG;MAC5C,IAAI,CAACT,iBAAiB,GAAG,KAAK;MAC9B,IAAI,IAAI,CAACF,kBAAkB,EAAE;QAC3B,IAAI,CAACM,cAAc,GAAGK,GAAG;QACzB,IAAI,CAACV,iBAAiB,GAAG,IAAI;MAC/B,CAAC,MAAM;QACL,IAAI,CAACF,YAAY,CAACM,gBAAgB,CAACM,GAAG,CAAC;QACvC,IAAI,CAACJ,oBAAoB,EAAE;MAC7B;IACF,CAAC,CAAC;EACJ;EACAC,eAAeA,CAACI,MAAoB;IAClC,IAAI,CAACnB,QAAQ,CAACe,eAAe,CAACI,MAAM,EAAEC,eAAe,IAAG;MACtD,IAAI,IAAI,CAACb,kBAAkB,IAAI,IAAI,CAACE,iBAAiB,EAAE;QACrD,IAAI,CAACC,aAAa,GAAGU,eAAe;MACtC,CAAC,MAAM;QACL,IAAI,CAACd,YAAY,CAACS,eAAe,CAACK,eAAe,CAAC;MACpD;IACF,CAAC,CAAC;EACJ;;AA1DFtB,OAAA,CAAAM,wBAAA,GAAAA,wBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}