{"ast":null,"code":"\"use strict\";\n\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LRUCache = void 0;\nexports.snakeToCamel = snakeToCamel;\nexports.originalOrCamelOptions = originalOrCamelOptions;\n/**\n * Returns the camel case of a provided string.\n *\n * @remarks\n *\n * Match any `_` and not `_` pair, then return the uppercase of the not `_`\n * character.\n *\n * @param str the string to convert\n * @returns the camelCase'd string\n */\nfunction snakeToCamel(str) {\n  return str.replace(/([_][^_])/g, match => match.slice(1).toUpperCase());\n}\n/**\n * Get the value of `obj[key]` or `obj[camelCaseKey]`, with a preference\n * for original, non-camelCase key.\n *\n * @param obj object to lookup a value in\n * @returns a `get` function for getting `obj[key || snakeKey]`, if available\n */\nfunction originalOrCamelOptions(obj) {\n  /**\n   *\n   * @param key an index of object, preferably snake_case\n   * @returns the value `obj[key || snakeKey]`, if available\n   */\n  function get(key) {\n    const o = obj || {};\n    return o[key] ?? o[snakeToCamel(key)];\n  }\n  return {\n    get\n  };\n}\n/**\n * A simple LRU cache utility.\n * Not meant for external usage.\n *\n * @experimental\n */\nclass LRUCache {\n  capacity;\n  /**\n   * Maps are in order. Thus, the older item is the first item.\n   *\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map}\n   */\n  #cache = new Map();\n  maxAge;\n  constructor(options) {\n    this.capacity = options.capacity;\n    this.maxAge = options.maxAge;\n  }\n  /**\n   * Moves the key to the end of the cache.\n   *\n   * @param key the key to move\n   * @param value the value of the key\n   */\n  #moveToEnd(key, value) {\n    this.#cache.delete(key);\n    this.#cache.set(key, {\n      value,\n      lastAccessed: Date.now()\n    });\n  }\n  /**\n   * Add an item to the cache.\n   *\n   * @param key the key to upsert\n   * @param value the value of the key\n   */\n  set(key, value) {\n    this.#moveToEnd(key, value);\n    this.#evict();\n  }\n  /**\n   * Get an item from the cache.\n   *\n   * @param key the key to retrieve\n   */\n  get(key) {\n    const item = this.#cache.get(key);\n    if (!item) return;\n    this.#moveToEnd(key, item.value);\n    this.#evict();\n    return item.value;\n  }\n  /**\n   * Maintain the cache based on capacity and TTL.\n   */\n  #evict() {\n    const cutoffDate = this.maxAge ? Date.now() - this.maxAge : 0;\n    /**\n     * Because we know Maps are in order, this item is both the\n     * last item in the list (capacity) and oldest (maxAge).\n     */\n    let oldestItem = this.#cache.entries().next();\n    while (!oldestItem.done && (this.#cache.size > this.capacity ||\n    // too many\n    oldestItem.value[1].lastAccessed < cutoffDate) // too old\n    ) {\n      this.#cache.delete(oldestItem.value[0]);\n      oldestItem = this.#cache.entries().next();\n    }\n  }\n}\nexports.LRUCache = LRUCache;","map":{"version":3,"names":["Object","defineProperty","exports","value","LRUCache","snakeToCamel","originalOrCamelOptions","str","replace","match","slice","toUpperCase","obj","get","key","o","capacity","cache","Map","maxAge","constructor","options","moveToEnd","#moveToEnd","delete","set","lastAccessed","Date","now","evict","item","#evict","cutoffDate","oldestItem","entries","next","done","size"],"sources":["C:/Users/BIT/chatboot/node_modules/google-auth-library/build/src/util.js"],"sourcesContent":["\"use strict\";\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LRUCache = void 0;\nexports.snakeToCamel = snakeToCamel;\nexports.originalOrCamelOptions = originalOrCamelOptions;\n/**\n * Returns the camel case of a provided string.\n *\n * @remarks\n *\n * Match any `_` and not `_` pair, then return the uppercase of the not `_`\n * character.\n *\n * @param str the string to convert\n * @returns the camelCase'd string\n */\nfunction snakeToCamel(str) {\n    return str.replace(/([_][^_])/g, match => match.slice(1).toUpperCase());\n}\n/**\n * Get the value of `obj[key]` or `obj[camelCaseKey]`, with a preference\n * for original, non-camelCase key.\n *\n * @param obj object to lookup a value in\n * @returns a `get` function for getting `obj[key || snakeKey]`, if available\n */\nfunction originalOrCamelOptions(obj) {\n    /**\n     *\n     * @param key an index of object, preferably snake_case\n     * @returns the value `obj[key || snakeKey]`, if available\n     */\n    function get(key) {\n        const o = (obj || {});\n        return o[key] ?? o[snakeToCamel(key)];\n    }\n    return { get };\n}\n/**\n * A simple LRU cache utility.\n * Not meant for external usage.\n *\n * @experimental\n */\nclass LRUCache {\n    capacity;\n    /**\n     * Maps are in order. Thus, the older item is the first item.\n     *\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map}\n     */\n    #cache = new Map();\n    maxAge;\n    constructor(options) {\n        this.capacity = options.capacity;\n        this.maxAge = options.maxAge;\n    }\n    /**\n     * Moves the key to the end of the cache.\n     *\n     * @param key the key to move\n     * @param value the value of the key\n     */\n    #moveToEnd(key, value) {\n        this.#cache.delete(key);\n        this.#cache.set(key, {\n            value,\n            lastAccessed: Date.now(),\n        });\n    }\n    /**\n     * Add an item to the cache.\n     *\n     * @param key the key to upsert\n     * @param value the value of the key\n     */\n    set(key, value) {\n        this.#moveToEnd(key, value);\n        this.#evict();\n    }\n    /**\n     * Get an item from the cache.\n     *\n     * @param key the key to retrieve\n     */\n    get(key) {\n        const item = this.#cache.get(key);\n        if (!item)\n            return;\n        this.#moveToEnd(key, item.value);\n        this.#evict();\n        return item.value;\n    }\n    /**\n     * Maintain the cache based on capacity and TTL.\n     */\n    #evict() {\n        const cutoffDate = this.maxAge ? Date.now() - this.maxAge : 0;\n        /**\n         * Because we know Maps are in order, this item is both the\n         * last item in the list (capacity) and oldest (maxAge).\n         */\n        let oldestItem = this.#cache.entries().next();\n        while (!oldestItem.done &&\n            (this.#cache.size > this.capacity || // too many\n                oldestItem.value[1].lastAccessed < cutoffDate) // too old\n        ) {\n            this.#cache.delete(oldestItem.value[0]);\n            oldestItem = this.#cache.entries().next();\n        }\n    }\n}\nexports.LRUCache = LRUCache;\n//# sourceMappingURL=util.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}