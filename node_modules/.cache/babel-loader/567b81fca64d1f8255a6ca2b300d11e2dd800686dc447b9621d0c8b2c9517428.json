{"ast":null,"code":"\"use strict\";\n\n// Copyright 2012 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthClient = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = exports.DEFAULT_UNIVERSE = void 0;\nconst events_1 = require(\"events\");\nconst gaxios_1 = require(\"gaxios\");\nconst util_1 = require(\"../util\");\nconst shared_cjs_1 = require(\"../shared.cjs\");\n/**\n * The default cloud universe\n *\n * @see {@link AuthJSONOptions.universe_domain}\n */\nexports.DEFAULT_UNIVERSE = 'googleapis.com';\n/**\n * The default {@link AuthClientOptions.eagerRefreshThresholdMillis}\n */\nexports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = 5 * 60 * 1000;\nclass AuthClient extends events_1.EventEmitter {\n  apiKey;\n  projectId;\n  /**\n   * The quota project ID. The quota project can be used by client libraries for the billing purpose.\n   * See {@link https://cloud.google.com/docs/quota Working with quotas}\n   */\n  quotaProjectId;\n  /**\n   * The {@link Gaxios `Gaxios`} instance used for making requests.\n   */\n  transporter;\n  credentials = {};\n  eagerRefreshThresholdMillis = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS;\n  forceRefreshOnFailure = false;\n  universeDomain = exports.DEFAULT_UNIVERSE;\n  constructor(opts = {}) {\n    super();\n    const options = (0, util_1.originalOrCamelOptions)(opts);\n    // Shared auth options\n    this.apiKey = opts.apiKey;\n    this.projectId = options.get('project_id') ?? null;\n    this.quotaProjectId = options.get('quota_project_id');\n    this.credentials = options.get('credentials') ?? {};\n    this.universeDomain = options.get('universe_domain') ?? exports.DEFAULT_UNIVERSE;\n    // Shared client options\n    this.transporter = opts.transporter ?? new gaxios_1.Gaxios(opts.transporterOptions);\n    if (options.get('useAuthRequestParameters') !== false) {\n      this.transporter.interceptors.request.add(AuthClient.DEFAULT_REQUEST_INTERCEPTOR);\n    }\n    if (opts.eagerRefreshThresholdMillis) {\n      this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis;\n    }\n    this.forceRefreshOnFailure = opts.forceRefreshOnFailure ?? false;\n  }\n  /**\n   * Sets the auth credentials.\n   */\n  setCredentials(credentials) {\n    this.credentials = credentials;\n  }\n  /**\n   * Append additional headers, e.g., x-goog-user-project, shared across the\n   * classes inheriting AuthClient. This method should be used by any method\n   * that overrides getRequestMetadataAsync(), which is a shared helper for\n   * setting request information in both gRPC and HTTP API calls.\n   *\n   * @param headers object to append additional headers to.\n   */\n  addSharedMetadataHeaders(headers) {\n    // quota_project_id, stored in application_default_credentials.json, is set in\n    // the x-goog-user-project header, to indicate an alternate account for\n    // billing and quota:\n    if (!headers.has('x-goog-user-project') &&\n    // don't override a value the user sets.\n    this.quotaProjectId) {\n      headers.set('x-goog-user-project', this.quotaProjectId);\n    }\n    return headers;\n  }\n  /**\n   * Adds the `x-goog-user-project` and `authorization` headers to the target Headers\n   * object, if they exist on the source.\n   *\n   * @param target the headers to target\n   * @param source the headers to source from\n   * @returns the target headers\n   */\n  addUserProjectAndAuthHeaders(target, source) {\n    const xGoogUserProject = source.get('x-goog-user-project');\n    const authorizationHeader = source.get('authorization');\n    if (xGoogUserProject) {\n      target.set('x-goog-user-project', xGoogUserProject);\n    }\n    if (authorizationHeader) {\n      target.set('authorization', authorizationHeader);\n    }\n    return target;\n  }\n  static DEFAULT_REQUEST_INTERCEPTOR = {\n    resolved: async config => {\n      // Set `x-goog-api-client`, if not already set\n      if (!config.headers.has('x-goog-api-client')) {\n        const nodeVersion = process.version.replace(/^v/, '');\n        config.headers.set('x-goog-api-client', `gl-node/${nodeVersion}`);\n      }\n      // Set `User-Agent`\n      const userAgent = config.headers.get('User-Agent');\n      if (!userAgent) {\n        config.headers.set('User-Agent', shared_cjs_1.USER_AGENT);\n      } else if (!userAgent.includes(`${shared_cjs_1.PRODUCT_NAME}/`)) {\n        config.headers.set('User-Agent', `${userAgent} ${shared_cjs_1.USER_AGENT}`);\n      }\n      return config;\n    }\n  };\n  /**\n   * Retry config for Auth-related requests.\n   *\n   * @remarks\n   *\n   * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}\n   * config as some downstream APIs would prefer if customers explicitly enable retries,\n   * such as GCS.\n   */\n  static get RETRY_CONFIG() {\n    return {\n      retry: true,\n      retryConfig: {\n        httpMethodsToRetry: ['GET', 'PUT', 'POST', 'HEAD', 'OPTIONS', 'DELETE']\n      }\n    };\n  }\n}\nexports.AuthClient = AuthClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","AuthClient","DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS","DEFAULT_UNIVERSE","events_1","require","gaxios_1","util_1","shared_cjs_1","EventEmitter","apiKey","projectId","quotaProjectId","transporter","credentials","eagerRefreshThresholdMillis","forceRefreshOnFailure","universeDomain","constructor","opts","options","originalOrCamelOptions","get","Gaxios","transporterOptions","interceptors","request","add","DEFAULT_REQUEST_INTERCEPTOR","setCredentials","addSharedMetadataHeaders","headers","has","set","addUserProjectAndAuthHeaders","target","source","xGoogUserProject","authorizationHeader","resolved","config","nodeVersion","process","version","replace","userAgent","USER_AGENT","includes","PRODUCT_NAME","RETRY_CONFIG","retry","retryConfig","httpMethodsToRetry"],"sources":["C:/Users/BIT/chatboot/node_modules/google-auth-library/build/src/auth/authclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2012 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthClient = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = exports.DEFAULT_UNIVERSE = void 0;\nconst events_1 = require(\"events\");\nconst gaxios_1 = require(\"gaxios\");\nconst util_1 = require(\"../util\");\nconst shared_cjs_1 = require(\"../shared.cjs\");\n/**\n * The default cloud universe\n *\n * @see {@link AuthJSONOptions.universe_domain}\n */\nexports.DEFAULT_UNIVERSE = 'googleapis.com';\n/**\n * The default {@link AuthClientOptions.eagerRefreshThresholdMillis}\n */\nexports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = 5 * 60 * 1000;\nclass AuthClient extends events_1.EventEmitter {\n    apiKey;\n    projectId;\n    /**\n     * The quota project ID. The quota project can be used by client libraries for the billing purpose.\n     * See {@link https://cloud.google.com/docs/quota Working with quotas}\n     */\n    quotaProjectId;\n    /**\n     * The {@link Gaxios `Gaxios`} instance used for making requests.\n     */\n    transporter;\n    credentials = {};\n    eagerRefreshThresholdMillis = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS;\n    forceRefreshOnFailure = false;\n    universeDomain = exports.DEFAULT_UNIVERSE;\n    constructor(opts = {}) {\n        super();\n        const options = (0, util_1.originalOrCamelOptions)(opts);\n        // Shared auth options\n        this.apiKey = opts.apiKey;\n        this.projectId = options.get('project_id') ?? null;\n        this.quotaProjectId = options.get('quota_project_id');\n        this.credentials = options.get('credentials') ?? {};\n        this.universeDomain = options.get('universe_domain') ?? exports.DEFAULT_UNIVERSE;\n        // Shared client options\n        this.transporter = opts.transporter ?? new gaxios_1.Gaxios(opts.transporterOptions);\n        if (options.get('useAuthRequestParameters') !== false) {\n            this.transporter.interceptors.request.add(AuthClient.DEFAULT_REQUEST_INTERCEPTOR);\n        }\n        if (opts.eagerRefreshThresholdMillis) {\n            this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = opts.forceRefreshOnFailure ?? false;\n    }\n    /**\n     * Sets the auth credentials.\n     */\n    setCredentials(credentials) {\n        this.credentials = credentials;\n    }\n    /**\n     * Append additional headers, e.g., x-goog-user-project, shared across the\n     * classes inheriting AuthClient. This method should be used by any method\n     * that overrides getRequestMetadataAsync(), which is a shared helper for\n     * setting request information in both gRPC and HTTP API calls.\n     *\n     * @param headers object to append additional headers to.\n     */\n    addSharedMetadataHeaders(headers) {\n        // quota_project_id, stored in application_default_credentials.json, is set in\n        // the x-goog-user-project header, to indicate an alternate account for\n        // billing and quota:\n        if (!headers.has('x-goog-user-project') && // don't override a value the user sets.\n            this.quotaProjectId) {\n            headers.set('x-goog-user-project', this.quotaProjectId);\n        }\n        return headers;\n    }\n    /**\n     * Adds the `x-goog-user-project` and `authorization` headers to the target Headers\n     * object, if they exist on the source.\n     *\n     * @param target the headers to target\n     * @param source the headers to source from\n     * @returns the target headers\n     */\n    addUserProjectAndAuthHeaders(target, source) {\n        const xGoogUserProject = source.get('x-goog-user-project');\n        const authorizationHeader = source.get('authorization');\n        if (xGoogUserProject) {\n            target.set('x-goog-user-project', xGoogUserProject);\n        }\n        if (authorizationHeader) {\n            target.set('authorization', authorizationHeader);\n        }\n        return target;\n    }\n    static DEFAULT_REQUEST_INTERCEPTOR = {\n        resolved: async (config) => {\n            // Set `x-goog-api-client`, if not already set\n            if (!config.headers.has('x-goog-api-client')) {\n                const nodeVersion = process.version.replace(/^v/, '');\n                config.headers.set('x-goog-api-client', `gl-node/${nodeVersion}`);\n            }\n            // Set `User-Agent`\n            const userAgent = config.headers.get('User-Agent');\n            if (!userAgent) {\n                config.headers.set('User-Agent', shared_cjs_1.USER_AGENT);\n            }\n            else if (!userAgent.includes(`${shared_cjs_1.PRODUCT_NAME}/`)) {\n                config.headers.set('User-Agent', `${userAgent} ${shared_cjs_1.USER_AGENT}`);\n            }\n            return config;\n        },\n    };\n    /**\n     * Retry config for Auth-related requests.\n     *\n     * @remarks\n     *\n     * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}\n     * config as some downstream APIs would prefer if customers explicitly enable retries,\n     * such as GCS.\n     */\n    static get RETRY_CONFIG() {\n        return {\n            retry: true,\n            retryConfig: {\n                httpMethodsToRetry: ['GET', 'PUT', 'POST', 'HEAD', 'OPTIONS', 'DELETE'],\n            },\n        };\n    }\n}\nexports.AuthClient = AuthClient;\n//# sourceMappingURL=authclient.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}