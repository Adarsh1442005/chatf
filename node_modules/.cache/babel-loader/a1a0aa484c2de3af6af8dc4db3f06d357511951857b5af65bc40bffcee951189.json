{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function () {\n  var ownKeys = function (o) {\n    ownKeys = Object.getOwnPropertyNames || function (o) {\n      var ar = [];\n      for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n      return ar;\n    };\n    return ownKeys(o);\n  };\n  return function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleProtoFilesRoot = exports.GrpcClient = exports.ClientStub = void 0;\nconst grpcProtoLoader = __importStar(require(\"@grpc/proto-loader\"));\nconst child_process_1 = require(\"child_process\");\nconst fs = __importStar(require(\"fs\"));\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst grpc = __importStar(require(\"@grpc/grpc-js\"));\nconst os = __importStar(require(\"os\"));\nconst path_1 = require(\"path\");\nconst path = __importStar(require(\"path\"));\nconst protobuf = __importStar(require(\"protobufjs\"));\nconst object_hash_1 = __importDefault(require(\"object-hash\"));\nconst gax = __importStar(require(\"./gax\"));\nconst googleProtoFilesDir = path.join(__dirname, '..', '..', 'build', 'protos');\n// INCLUDE_DIRS is passed to @grpc/proto-loader\nconst INCLUDE_DIRS = [];\nINCLUDE_DIRS.push(googleProtoFilesDir);\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\nconst protosList_json_1 = __importDefault(require(\"./protosList.json\"));\n// use the correct path separator for the OS we are running on\nconst COMMON_PROTO_FILES = protosList_json_1.default.map(file => file.replace(/[/\\\\]/g, path.sep));\n/*\n * Async version of readFile.\n *\n * @returns {Promise} Contents of file at path.\n */\nasync function readFileAsync(path) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, 'utf8', (err, content) => {\n      if (err) return reject(err);else resolve(content);\n    });\n  });\n}\n/*\n * Async version of execFile.\n *\n * @returns {Promise} stdout from command execution.\n */\nasync function execFileAsync(command, args) {\n  return new Promise((resolve, reject) => {\n    (0, child_process_1.execFile)(command, args, (err, stdout) => {\n      if (err) return reject(err);else resolve(stdout);\n    });\n  });\n}\nclass ClientStub extends grpc.Client {}\nexports.ClientStub = ClientStub;\nclass GrpcClient {\n  auth;\n  grpc;\n  grpcVersion;\n  fallback;\n  static protoCache = new Map();\n  httpRules;\n  /**\n   * Key for proto cache map. We are doing our best to make sure we respect\n   * the options, so if the same proto file is loaded with different set of\n   * options, the cache won't be used.  Since some of the options are\n   * Functions (e.g. `enums: String` - see below in `loadProto()`),\n   * they will be omitted from the cache key.  If the cache breaks anything\n   * for you, use the `ignoreCache` parameter of `loadProto()` to disable it.\n   */\n  static protoCacheKey(filename, options) {\n    if (!filename || Array.isArray(filename) && (filename.length === 0 || !filename[0])) {\n      return undefined;\n    }\n    return JSON.stringify(filename) + ' ' + JSON.stringify(options);\n  }\n  /**\n   * In rare cases users might need to deallocate all memory consumed by loaded protos.\n   * This method will delete the proto cache content.\n   */\n  static clearProtoCache() {\n    GrpcClient.protoCache.clear();\n  }\n  /**\n   * A class which keeps the context of gRPC and auth for the gRPC.\n   *\n   * @param {Object=} options - The optional parameters. It will be directly\n   *   passed to google-auth-library library, so parameters like keyFile or\n   *   credentials will be valid.\n   * @param {Object=} options.auth - An instance of google-auth-library.\n   *   When specified, this auth instance will be used instead of creating\n   *   a new one.\n   * @param {Object=} options.grpc - When specified, this will be used\n   *   for the 'grpc' module in this context. By default, it will load the grpc\n   *   module in the standard way.\n   * @constructor\n   */\n  constructor(options = {}) {\n    this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n    this.fallback = false;\n    const minimumVersion = 10;\n    const major = Number(process.version.match(/^v(\\d+)/)?.[1]);\n    if (Number.isNaN(major) || major < minimumVersion) {\n      const errorMessage = `Node.js v${minimumVersion}.0.0 is a minimum requirement. To learn about legacy version support visit: ` + 'https://github.com/googleapis/google-cloud-node#supported-nodejs-versions';\n      throw new Error(errorMessage);\n    }\n    if ('grpc' in options) {\n      this.grpc = options.grpc;\n      this.grpcVersion = '';\n    } else {\n      this.grpc = grpc;\n      this.grpcVersion = require('@grpc/grpc-js/package.json').version;\n    }\n  }\n  /**\n   * Creates a gRPC credentials. It asks the auth data if necessary.\n   * @private\n   * @param {Object} opts - options values for configuring credentials.\n   * @param {Object=} opts.sslCreds - when specified, this is used instead\n   *   of default channel credentials.\n   * @return {Promise} The promise which will be resolved to the gRPC credential.\n   */\n  async _getCredentials(opts) {\n    if (opts.sslCreds) {\n      return opts.sslCreds;\n    }\n    const grpc = this.grpc;\n    const sslCreds = opts.cert && opts.key ? grpc.credentials.createSsl(null, Buffer.from(opts.key), Buffer.from(opts.cert)) : grpc.credentials.createSsl();\n    const client = await this.auth.getClient();\n    const credentials = grpc.credentials.combineChannelCredentials(sslCreds, grpc.credentials.createFromGoogleCredential({\n      // the `grpc` package does not support the `Headers` object yet\n      getRequestHeaders: async url => {\n        const headers = await client.getRequestHeaders(url);\n        const genericHeadersObject = {};\n        headers.forEach((value, key) => genericHeadersObject[key] = value);\n        return genericHeadersObject;\n      }\n    }));\n    return credentials;\n  }\n  static defaultOptions() {\n    // This set of @grpc/proto-loader options\n    // 'closely approximates the existing behavior of grpc.load'\n    const includeDirs = INCLUDE_DIRS.slice();\n    const options = {\n      keepCase: false,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n      includeDirs\n    };\n    return options;\n  }\n  /**\n   * Loads the gRPC service from the proto file(s) at the given path and with the\n   * given options. Caches the loaded protos so the subsequent loads don't do\n   * any disk reads.\n   * @param filename The path to the proto file(s).\n   * @param options Options for loading the proto file.\n   * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\n   *   incorrectly decides that the options object is the same, or if you want to\n   *   re-read the protos from disk for any other reason.\n   */\n  loadFromProto(filename, options, ignoreCache = false) {\n    const cacheKey = GrpcClient.protoCacheKey(filename, options);\n    let grpcPackage = cacheKey ? GrpcClient.protoCache.get(cacheKey) : undefined;\n    if (ignoreCache || !grpcPackage) {\n      const packageDef = grpcProtoLoader.loadSync(filename, options);\n      grpcPackage = this.grpc.loadPackageDefinition(packageDef);\n      if (cacheKey) {\n        GrpcClient.protoCache.set(cacheKey, grpcPackage);\n      }\n    }\n    return grpcPackage;\n  }\n  /**\n   * Load gRPC proto service from a filename looking in googleapis common protos\n   * when necessary. Caches the loaded protos so the subsequent loads don't do\n   * any disk reads.\n   * @param {String} protoPath - The directory to search for the protofile.\n   * @param {String|String[]} filename - The filename(s) of the proto(s) to be loaded.\n   *   If omitted, protoPath will be treated as a file path to load.\n   * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\n   *   incorrectly decides that the options object is the same, or if you want to\n   *   re-read the protos from disk for any other reason.\n   * @return {Object<string, *>} The gRPC loaded result (the toplevel namespace\n   *   object).\n   */\n  loadProto(protoPath, filename, ignoreCache = false) {\n    if (!filename) {\n      filename = path.basename(protoPath);\n      protoPath = path.dirname(protoPath);\n    }\n    if (Array.isArray(filename) && filename.length === 0) {\n      return {};\n    }\n    const options = GrpcClient.defaultOptions();\n    options.includeDirs.unshift(protoPath);\n    return this.loadFromProto(filename, options, ignoreCache);\n  }\n  static _resolveFile(protoPath, filename) {\n    if (fs.existsSync(path.join(protoPath, filename))) {\n      return path.join(protoPath, filename);\n    } else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n      return path.join(googleProtoFilesDir, filename);\n    }\n    throw new Error(filename + ' could not be found in ' + protoPath);\n  }\n  loadProtoJSON(json, ignoreCache = false) {\n    const hash = (0, object_hash_1.default)(JSON.stringify(json)).toString();\n    const cached = GrpcClient.protoCache.get(hash);\n    if (cached && !ignoreCache) {\n      return cached;\n    }\n    const options = GrpcClient.defaultOptions();\n    const packageDefinition = grpcProtoLoader.fromJSON(json, options);\n    const grpcPackage = this.grpc.loadPackageDefinition(packageDefinition);\n    GrpcClient.protoCache.set(hash, grpcPackage);\n    return grpcPackage;\n  }\n  metadataBuilder(headers) {\n    const Metadata = this.grpc.Metadata;\n    const baseMetadata = new Metadata();\n    for (const key in headers) {\n      const value = headers[key];\n      if (Array.isArray(value)) {\n        value.forEach(v => baseMetadata.add(key, v));\n      } else {\n        baseMetadata.set(key, `${value}`);\n      }\n    }\n    return function buildMetadata(abTests, moreHeaders) {\n      // TODO: bring the A/B testing info into the metadata.\n      let copied = false;\n      let metadata = baseMetadata;\n      if (moreHeaders) {\n        for (const key in moreHeaders) {\n          if (key.toLowerCase() !== 'x-goog-api-client') {\n            if (!copied) {\n              copied = true;\n              metadata = metadata.clone();\n            }\n            const value = moreHeaders[key];\n            if (Array.isArray(value)) {\n              value.forEach(v => metadata.add(key, v));\n            } else {\n              metadata.set(key, `${value}`);\n            }\n          }\n        }\n      }\n      return metadata;\n    };\n  }\n  /**\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n  constructSettings(serviceName, clientConfig, configOverrides, headers) {\n    return gax.constructSettings(serviceName, clientConfig, configOverrides, this.grpc.status, {\n      metadataBuilder: this.metadataBuilder(headers)\n    });\n  }\n  /**\n   * Creates a gRPC stub with current gRPC and auth.\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} options - The optional arguments to customize\n   *   gRPC connection. This options will be passed to the constructor of\n   *   gRPC client too.\n   * @param {string} options.servicePath - The name of the server of the service.\n   * @param {number} options.port - The port of the service.\n   * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n   *   to set up gRPC connection.\n   * @param {string} defaultServicePath - The default service path.\n   * @return {Promise} A promise which resolves to a gRPC stub instance.\n   */\n  async createStub(CreateStub, options, customServicePath) {\n    // The following options are understood by grpc-gcp and need a special treatment\n    // (should be passed without a `grpc.` prefix)\n    const grpcGcpOptions = ['grpc.callInvocationTransformer', 'grpc.channelFactoryOverride', 'grpc.gcpApiConfig'];\n    const [cert, key] = await this._detectClientCertificate(options, options.universeDomain);\n    const servicePath = this._mtlsServicePath(options.servicePath, customServicePath, cert && key);\n    const opts = Object.assign({}, options, {\n      cert,\n      key,\n      servicePath\n    });\n    const serviceAddress = servicePath + ':' + opts.port;\n    if (!options.universeDomain) {\n      options.universeDomain = 'googleapis.com';\n    }\n    if (options.universeDomain) {\n      const universeFromAuth = await this.auth.getUniverseDomain();\n      if (universeFromAuth && options.universeDomain !== universeFromAuth) {\n        throw new Error(`The configured universe domain (${options.universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` + \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n      }\n    }\n    const creds = await this._getCredentials(opts);\n    const grpcOptions = {};\n    // @grpc/grpc-js limits max receive/send message length starting from v0.8.0\n    // https://github.com/grpc/grpc-node/releases/tag/%40grpc%2Fgrpc-js%400.8.0\n    // To keep the existing behavior and avoid libraries breakage, we pass -1 there as suggested.\n    grpcOptions['grpc.max_receive_message_length'] = -1;\n    grpcOptions['grpc.max_send_message_length'] = -1;\n    grpcOptions['grpc.initial_reconnect_backoff_ms'] = 1000;\n    Object.keys(opts).forEach(key => {\n      const value = options[key];\n      // the older versions had a bug which required users to call an option\n      // grpc.grpc.* to make it actually pass to gRPC as grpc.*, let's handle\n      // this here until the next major release\n      if (key.startsWith('grpc.grpc.')) {\n        key = key.replace(/^grpc\\./, '');\n      }\n      if (key.startsWith('grpc.')) {\n        if (grpcGcpOptions.includes(key)) {\n          key = key.replace(/^grpc\\./, '');\n        }\n        grpcOptions[key] = value;\n      }\n      if (key.startsWith('grpc-node.')) {\n        grpcOptions[key] = value;\n      }\n    });\n    const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n    return stub;\n  }\n  /**\n   * Detect mTLS client certificate based on logic described in\n   * https://google.aip.dev/auth/4114.\n   *\n   * @param {object} [options] - The configuration object.\n   * @returns {Promise} Resolves array of strings representing cert and key.\n   */\n  async _detectClientCertificate(opts, universeDomain) {\n    const certRegex = /(?<cert>-----BEGIN CERTIFICATE-----.*?-----END CERTIFICATE-----)/s;\n    const keyRegex = /(?<key>-----BEGIN PRIVATE KEY-----.*?-----END PRIVATE KEY-----)/s;\n    // If GOOGLE_API_USE_CLIENT_CERTIFICATE is true...:\n    if (typeof process !== 'undefined' && process?.env?.GOOGLE_API_USE_CLIENT_CERTIFICATE === 'true') {\n      if (universeDomain && universeDomain !== 'googleapis.com') {\n        throw new Error('mTLS is not supported outside of googleapis.com universe domain.');\n      }\n      if (opts?.cert && opts?.key) {\n        return [opts.cert, opts.key];\n      }\n      // If context aware metadata exists, run the cert provider command,\n      // parse the output to extract cert and key, and use this cert/key.\n      const metadataPath = (0, path_1.join)(os.homedir(), '.secureConnect', 'context_aware_metadata.json');\n      const metadata = JSON.parse(await readFileAsync(metadataPath));\n      if (!metadata.cert_provider_command) {\n        throw Error('no cert_provider_command found');\n      }\n      const stdout = await execFileAsync(metadata.cert_provider_command[0], metadata.cert_provider_command.slice(1));\n      const matchCert = stdout.toString().match(certRegex);\n      const matchKey = stdout.toString().match(keyRegex);\n      if (!(matchCert?.groups && matchKey?.groups)) {\n        throw Error('unable to parse certificate and key');\n      } else {\n        return [matchCert.groups.cert, matchKey.groups.key];\n      }\n    }\n    // If GOOGLE_API_USE_CLIENT_CERTIFICATE is not set or false,\n    // use no cert or key:\n    return [undefined, undefined];\n  }\n  /**\n   * Return service path, taking into account mTLS logic.\n   * See: https://google.aip.dev/auth/4114\n   *\n   * @param {string|undefined} servicePath - The path of the service.\n   * @param {string|undefined} customServicePath - Did the user provide a custom service URL.\n   * @param {boolean} hasCertificate - Was a certificate found.\n   * @returns {string} The DNS address for this service.\n   */\n  _mtlsServicePath(servicePath, customServicePath, hasCertificate) {\n    // If user provides a custom service path, return the current service\n    // path and do not attempt to add mtls subdomain:\n    if (customServicePath || !servicePath) return servicePath;\n    if (typeof process !== 'undefined' && process?.env?.GOOGLE_API_USE_MTLS_ENDPOINT === 'never') {\n      // It was explicitly asked that mtls endpoint not be used:\n      return servicePath;\n    } else if (typeof process !== 'undefined' && process?.env?.GOOGLE_API_USE_MTLS_ENDPOINT === 'always' || hasCertificate) {\n      // Either auto-detect or explicit setting of endpoint:\n      return servicePath.replace('googleapis.com', 'mtls.googleapis.com');\n    }\n    return servicePath;\n  }\n  /**\n   * Creates a 'bytelength' function for a given proto message class.\n   *\n   * See {@link BundleDescriptor} about the meaning of the return value.\n   *\n   * @param {function} message - a constructor function that is generated by\n   *   protobuf.js. Assumes 'encoder' field in the message.\n   * @return {function(Object):number} - a function to compute the byte length\n   *   for an object.\n   */\n  static createByteLengthFunction(message) {\n    return gax.createByteLengthFunction(message);\n  }\n}\nexports.GrpcClient = GrpcClient;\nclass GoogleProtoFilesRoot extends protobuf.Root {\n  constructor(...args) {\n    super(...args);\n  }\n  // Causes the loading of an included proto to check if it is a common\n  // proto. If it is a common proto, use the bundled proto.\n  resolvePath(originPath, includePath) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n    // Fully qualified paths don't need to be resolved.\n    if (path.isAbsolute(includePath)) {\n      if (!fs.existsSync(includePath)) {\n        throw new Error('The include `' + includePath + '` was not found.');\n      }\n      return includePath;\n    }\n    if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n      return path.join(googleProtoFilesDir, includePath);\n    }\n    return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n  }\n  static _findIncludePath(originPath, includePath) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n    let current = originPath;\n    let found = fs.existsSync(path.join(current, includePath));\n    while (!found && current.length > 0) {\n      current = current.substring(0, current.lastIndexOf(path.sep));\n      found = fs.existsSync(path.join(current, includePath));\n    }\n    if (!found) {\n      throw new Error('The include `' + includePath + '` was not found.');\n    }\n    return path.join(current, includePath);\n  }\n}\nexports.GoogleProtoFilesRoot = GoogleProtoFilesRoot;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","ownKeys","getOwnPropertyNames","ar","prototype","hasOwnProperty","call","length","mod","result","i","__importDefault","exports","GoogleProtoFilesRoot","GrpcClient","ClientStub","grpcProtoLoader","require","child_process_1","fs","google_auth_library_1","grpc","os","path_1","path","protobuf","object_hash_1","gax","googleProtoFilesDir","join","__dirname","INCLUDE_DIRS","push","protosList_json_1","COMMON_PROTO_FILES","default","map","file","replace","sep","readFileAsync","Promise","resolve","reject","readFile","err","content","execFileAsync","command","args","execFile","stdout","Client","auth","grpcVersion","fallback","protoCache","Map","httpRules","protoCacheKey","filename","options","Array","isArray","JSON","stringify","clearProtoCache","clear","constructor","GoogleAuth","minimumVersion","major","Number","process","version","match","isNaN","errorMessage","Error","_getCredentials","opts","sslCreds","cert","key","credentials","createSsl","Buffer","from","client","getClient","combineChannelCredentials","createFromGoogleCredential","getRequestHeaders","url","headers","genericHeadersObject","forEach","defaultOptions","includeDirs","slice","keepCase","longs","String","enums","defaults","oneofs","loadFromProto","ignoreCache","cacheKey","grpcPackage","packageDef","loadSync","loadPackageDefinition","set","loadProto","protoPath","basename","dirname","unshift","_resolveFile","existsSync","indexOf","loadProtoJSON","json","hash","toString","cached","packageDefinition","fromJSON","metadataBuilder","Metadata","baseMetadata","add","buildMetadata","abTests","moreHeaders","copied","metadata","toLowerCase","clone","constructSettings","serviceName","clientConfig","configOverrides","status","createStub","CreateStub","customServicePath","grpcGcpOptions","_detectClientCertificate","universeDomain","servicePath","_mtlsServicePath","assign","serviceAddress","port","universeFromAuth","getUniverseDomain","creds","grpcOptions","keys","startsWith","includes","stub","certRegex","keyRegex","env","GOOGLE_API_USE_CLIENT_CERTIFICATE","metadataPath","homedir","parse","cert_provider_command","matchCert","matchKey","groups","hasCertificate","GOOGLE_API_USE_MTLS_ENDPOINT","createByteLengthFunction","message","Root","resolvePath","originPath","includePath","normalize","isAbsolute","_findIncludePath","current","found","substring","lastIndexOf"],"sources":["C:/Users/BIT/chatboot/node_modules/google-gax/build/src/grpc.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleProtoFilesRoot = exports.GrpcClient = exports.ClientStub = void 0;\nconst grpcProtoLoader = __importStar(require(\"@grpc/proto-loader\"));\nconst child_process_1 = require(\"child_process\");\nconst fs = __importStar(require(\"fs\"));\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst grpc = __importStar(require(\"@grpc/grpc-js\"));\nconst os = __importStar(require(\"os\"));\nconst path_1 = require(\"path\");\nconst path = __importStar(require(\"path\"));\nconst protobuf = __importStar(require(\"protobufjs\"));\nconst object_hash_1 = __importDefault(require(\"object-hash\"));\nconst gax = __importStar(require(\"./gax\"));\nconst googleProtoFilesDir = path.join(__dirname, '..', '..', 'build', 'protos');\n// INCLUDE_DIRS is passed to @grpc/proto-loader\nconst INCLUDE_DIRS = [];\nINCLUDE_DIRS.push(googleProtoFilesDir);\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\nconst protosList_json_1 = __importDefault(require(\"./protosList.json\"));\n// use the correct path separator for the OS we are running on\nconst COMMON_PROTO_FILES = protosList_json_1.default.map(file => file.replace(/[/\\\\]/g, path.sep));\n/*\n * Async version of readFile.\n *\n * @returns {Promise} Contents of file at path.\n */\nasync function readFileAsync(path) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path, 'utf8', (err, content) => {\n            if (err)\n                return reject(err);\n            else\n                resolve(content);\n        });\n    });\n}\n/*\n * Async version of execFile.\n *\n * @returns {Promise} stdout from command execution.\n */\nasync function execFileAsync(command, args) {\n    return new Promise((resolve, reject) => {\n        (0, child_process_1.execFile)(command, args, (err, stdout) => {\n            if (err)\n                return reject(err);\n            else\n                resolve(stdout);\n        });\n    });\n}\nclass ClientStub extends grpc.Client {\n}\nexports.ClientStub = ClientStub;\nclass GrpcClient {\n    auth;\n    grpc;\n    grpcVersion;\n    fallback;\n    static protoCache = new Map();\n    httpRules;\n    /**\n     * Key for proto cache map. We are doing our best to make sure we respect\n     * the options, so if the same proto file is loaded with different set of\n     * options, the cache won't be used.  Since some of the options are\n     * Functions (e.g. `enums: String` - see below in `loadProto()`),\n     * they will be omitted from the cache key.  If the cache breaks anything\n     * for you, use the `ignoreCache` parameter of `loadProto()` to disable it.\n     */\n    static protoCacheKey(filename, options) {\n        if (!filename ||\n            (Array.isArray(filename) && (filename.length === 0 || !filename[0]))) {\n            return undefined;\n        }\n        return JSON.stringify(filename) + ' ' + JSON.stringify(options);\n    }\n    /**\n     * In rare cases users might need to deallocate all memory consumed by loaded protos.\n     * This method will delete the proto cache content.\n     */\n    static clearProtoCache() {\n        GrpcClient.protoCache.clear();\n    }\n    /**\n     * A class which keeps the context of gRPC and auth for the gRPC.\n     *\n     * @param {Object=} options - The optional parameters. It will be directly\n     *   passed to google-auth-library library, so parameters like keyFile or\n     *   credentials will be valid.\n     * @param {Object=} options.auth - An instance of google-auth-library.\n     *   When specified, this auth instance will be used instead of creating\n     *   a new one.\n     * @param {Object=} options.grpc - When specified, this will be used\n     *   for the 'grpc' module in this context. By default, it will load the grpc\n     *   module in the standard way.\n     * @constructor\n     */\n    constructor(options = {}) {\n        this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n        this.fallback = false;\n        const minimumVersion = 10;\n        const major = Number(process.version.match(/^v(\\d+)/)?.[1]);\n        if (Number.isNaN(major) || major < minimumVersion) {\n            const errorMessage = `Node.js v${minimumVersion}.0.0 is a minimum requirement. To learn about legacy version support visit: ` +\n                'https://github.com/googleapis/google-cloud-node#supported-nodejs-versions';\n            throw new Error(errorMessage);\n        }\n        if ('grpc' in options) {\n            this.grpc = options.grpc;\n            this.grpcVersion = '';\n        }\n        else {\n            this.grpc = grpc;\n            this.grpcVersion = require('@grpc/grpc-js/package.json').version;\n        }\n    }\n    /**\n     * Creates a gRPC credentials. It asks the auth data if necessary.\n     * @private\n     * @param {Object} opts - options values for configuring credentials.\n     * @param {Object=} opts.sslCreds - when specified, this is used instead\n     *   of default channel credentials.\n     * @return {Promise} The promise which will be resolved to the gRPC credential.\n     */\n    async _getCredentials(opts) {\n        if (opts.sslCreds) {\n            return opts.sslCreds;\n        }\n        const grpc = this.grpc;\n        const sslCreds = opts.cert && opts.key\n            ? grpc.credentials.createSsl(null, Buffer.from(opts.key), Buffer.from(opts.cert))\n            : grpc.credentials.createSsl();\n        const client = await this.auth.getClient();\n        const credentials = grpc.credentials.combineChannelCredentials(sslCreds, grpc.credentials.createFromGoogleCredential({\n            // the `grpc` package does not support the `Headers` object yet\n            getRequestHeaders: async (url) => {\n                const headers = await client.getRequestHeaders(url);\n                const genericHeadersObject = {};\n                headers.forEach((value, key) => (genericHeadersObject[key] = value));\n                return genericHeadersObject;\n            },\n        }));\n        return credentials;\n    }\n    static defaultOptions() {\n        // This set of @grpc/proto-loader options\n        // 'closely approximates the existing behavior of grpc.load'\n        const includeDirs = INCLUDE_DIRS.slice();\n        const options = {\n            keepCase: false,\n            longs: String,\n            enums: String,\n            defaults: true,\n            oneofs: true,\n            includeDirs,\n        };\n        return options;\n    }\n    /**\n     * Loads the gRPC service from the proto file(s) at the given path and with the\n     * given options. Caches the loaded protos so the subsequent loads don't do\n     * any disk reads.\n     * @param filename The path to the proto file(s).\n     * @param options Options for loading the proto file.\n     * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\n     *   incorrectly decides that the options object is the same, or if you want to\n     *   re-read the protos from disk for any other reason.\n     */\n    loadFromProto(filename, options, ignoreCache = false) {\n        const cacheKey = GrpcClient.protoCacheKey(filename, options);\n        let grpcPackage = cacheKey\n            ? GrpcClient.protoCache.get(cacheKey)\n            : undefined;\n        if (ignoreCache || !grpcPackage) {\n            const packageDef = grpcProtoLoader.loadSync(filename, options);\n            grpcPackage = this.grpc.loadPackageDefinition(packageDef);\n            if (cacheKey) {\n                GrpcClient.protoCache.set(cacheKey, grpcPackage);\n            }\n        }\n        return grpcPackage;\n    }\n    /**\n     * Load gRPC proto service from a filename looking in googleapis common protos\n     * when necessary. Caches the loaded protos so the subsequent loads don't do\n     * any disk reads.\n     * @param {String} protoPath - The directory to search for the protofile.\n     * @param {String|String[]} filename - The filename(s) of the proto(s) to be loaded.\n     *   If omitted, protoPath will be treated as a file path to load.\n     * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\n     *   incorrectly decides that the options object is the same, or if you want to\n     *   re-read the protos from disk for any other reason.\n     * @return {Object<string, *>} The gRPC loaded result (the toplevel namespace\n     *   object).\n     */\n    loadProto(protoPath, filename, ignoreCache = false) {\n        if (!filename) {\n            filename = path.basename(protoPath);\n            protoPath = path.dirname(protoPath);\n        }\n        if (Array.isArray(filename) && filename.length === 0) {\n            return {};\n        }\n        const options = GrpcClient.defaultOptions();\n        options.includeDirs.unshift(protoPath);\n        return this.loadFromProto(filename, options, ignoreCache);\n    }\n    static _resolveFile(protoPath, filename) {\n        if (fs.existsSync(path.join(protoPath, filename))) {\n            return path.join(protoPath, filename);\n        }\n        else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n            return path.join(googleProtoFilesDir, filename);\n        }\n        throw new Error(filename + ' could not be found in ' + protoPath);\n    }\n    loadProtoJSON(json, ignoreCache = false) {\n        const hash = (0, object_hash_1.default)(JSON.stringify(json)).toString();\n        const cached = GrpcClient.protoCache.get(hash);\n        if (cached && !ignoreCache) {\n            return cached;\n        }\n        const options = GrpcClient.defaultOptions();\n        const packageDefinition = grpcProtoLoader.fromJSON(json, options);\n        const grpcPackage = this.grpc.loadPackageDefinition(packageDefinition);\n        GrpcClient.protoCache.set(hash, grpcPackage);\n        return grpcPackage;\n    }\n    metadataBuilder(headers) {\n        const Metadata = this.grpc.Metadata;\n        const baseMetadata = new Metadata();\n        for (const key in headers) {\n            const value = headers[key];\n            if (Array.isArray(value)) {\n                value.forEach(v => baseMetadata.add(key, v));\n            }\n            else {\n                baseMetadata.set(key, `${value}`);\n            }\n        }\n        return function buildMetadata(abTests, moreHeaders) {\n            // TODO: bring the A/B testing info into the metadata.\n            let copied = false;\n            let metadata = baseMetadata;\n            if (moreHeaders) {\n                for (const key in moreHeaders) {\n                    if (key.toLowerCase() !== 'x-goog-api-client') {\n                        if (!copied) {\n                            copied = true;\n                            metadata = metadata.clone();\n                        }\n                        const value = moreHeaders[key];\n                        if (Array.isArray(value)) {\n                            value.forEach(v => metadata.add(key, v));\n                        }\n                        else {\n                            metadata.set(key, `${value}`);\n                        }\n                    }\n                }\n            }\n            return metadata;\n        };\n    }\n    /**\n     * A wrapper of {@link constructSettings} function under the gRPC context.\n     *\n     * Most of parameters are common among constructSettings, please take a look.\n     * @param {string} serviceName - The fullly-qualified name of the service.\n     * @param {Object} clientConfig - A dictionary of the client config.\n     * @param {Object} configOverrides - A dictionary of overriding configs.\n     * @param {Object} headers - A dictionary of additional HTTP header name to\n     *   its value.\n     * @return {Object} A mapping of method names to CallSettings.\n     */\n    constructSettings(serviceName, clientConfig, configOverrides, headers) {\n        return gax.constructSettings(serviceName, clientConfig, configOverrides, this.grpc.status, { metadataBuilder: this.metadataBuilder(headers) });\n    }\n    /**\n     * Creates a gRPC stub with current gRPC and auth.\n     * @param {function} CreateStub - The constructor function of the stub.\n     * @param {Object} options - The optional arguments to customize\n     *   gRPC connection. This options will be passed to the constructor of\n     *   gRPC client too.\n     * @param {string} options.servicePath - The name of the server of the service.\n     * @param {number} options.port - The port of the service.\n     * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n     *   to set up gRPC connection.\n     * @param {string} defaultServicePath - The default service path.\n     * @return {Promise} A promise which resolves to a gRPC stub instance.\n     */\n    async createStub(CreateStub, options, customServicePath) {\n        // The following options are understood by grpc-gcp and need a special treatment\n        // (should be passed without a `grpc.` prefix)\n        const grpcGcpOptions = [\n            'grpc.callInvocationTransformer',\n            'grpc.channelFactoryOverride',\n            'grpc.gcpApiConfig',\n        ];\n        const [cert, key] = await this._detectClientCertificate(options, options.universeDomain);\n        const servicePath = this._mtlsServicePath(options.servicePath, customServicePath, cert && key);\n        const opts = Object.assign({}, options, { cert, key, servicePath });\n        const serviceAddress = servicePath + ':' + opts.port;\n        if (!options.universeDomain) {\n            options.universeDomain = 'googleapis.com';\n        }\n        if (options.universeDomain) {\n            const universeFromAuth = await this.auth.getUniverseDomain();\n            if (universeFromAuth && options.universeDomain !== universeFromAuth) {\n                throw new Error(`The configured universe domain (${options.universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` +\n                    \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n            }\n        }\n        const creds = await this._getCredentials(opts);\n        const grpcOptions = {};\n        // @grpc/grpc-js limits max receive/send message length starting from v0.8.0\n        // https://github.com/grpc/grpc-node/releases/tag/%40grpc%2Fgrpc-js%400.8.0\n        // To keep the existing behavior and avoid libraries breakage, we pass -1 there as suggested.\n        grpcOptions['grpc.max_receive_message_length'] = -1;\n        grpcOptions['grpc.max_send_message_length'] = -1;\n        grpcOptions['grpc.initial_reconnect_backoff_ms'] = 1000;\n        Object.keys(opts).forEach(key => {\n            const value = options[key];\n            // the older versions had a bug which required users to call an option\n            // grpc.grpc.* to make it actually pass to gRPC as grpc.*, let's handle\n            // this here until the next major release\n            if (key.startsWith('grpc.grpc.')) {\n                key = key.replace(/^grpc\\./, '');\n            }\n            if (key.startsWith('grpc.')) {\n                if (grpcGcpOptions.includes(key)) {\n                    key = key.replace(/^grpc\\./, '');\n                }\n                grpcOptions[key] = value;\n            }\n            if (key.startsWith('grpc-node.')) {\n                grpcOptions[key] = value;\n            }\n        });\n        const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n        return stub;\n    }\n    /**\n     * Detect mTLS client certificate based on logic described in\n     * https://google.aip.dev/auth/4114.\n     *\n     * @param {object} [options] - The configuration object.\n     * @returns {Promise} Resolves array of strings representing cert and key.\n     */\n    async _detectClientCertificate(opts, universeDomain) {\n        const certRegex = /(?<cert>-----BEGIN CERTIFICATE-----.*?-----END CERTIFICATE-----)/s;\n        const keyRegex = /(?<key>-----BEGIN PRIVATE KEY-----.*?-----END PRIVATE KEY-----)/s;\n        // If GOOGLE_API_USE_CLIENT_CERTIFICATE is true...:\n        if (typeof process !== 'undefined' &&\n            process?.env?.GOOGLE_API_USE_CLIENT_CERTIFICATE === 'true') {\n            if (universeDomain && universeDomain !== 'googleapis.com') {\n                throw new Error('mTLS is not supported outside of googleapis.com universe domain.');\n            }\n            if (opts?.cert && opts?.key) {\n                return [opts.cert, opts.key];\n            }\n            // If context aware metadata exists, run the cert provider command,\n            // parse the output to extract cert and key, and use this cert/key.\n            const metadataPath = (0, path_1.join)(os.homedir(), '.secureConnect', 'context_aware_metadata.json');\n            const metadata = JSON.parse(await readFileAsync(metadataPath));\n            if (!metadata.cert_provider_command) {\n                throw Error('no cert_provider_command found');\n            }\n            const stdout = await execFileAsync(metadata.cert_provider_command[0], metadata.cert_provider_command.slice(1));\n            const matchCert = stdout.toString().match(certRegex);\n            const matchKey = stdout.toString().match(keyRegex);\n            if (!(matchCert?.groups && matchKey?.groups)) {\n                throw Error('unable to parse certificate and key');\n            }\n            else {\n                return [matchCert.groups.cert, matchKey.groups.key];\n            }\n        }\n        // If GOOGLE_API_USE_CLIENT_CERTIFICATE is not set or false,\n        // use no cert or key:\n        return [undefined, undefined];\n    }\n    /**\n     * Return service path, taking into account mTLS logic.\n     * See: https://google.aip.dev/auth/4114\n     *\n     * @param {string|undefined} servicePath - The path of the service.\n     * @param {string|undefined} customServicePath - Did the user provide a custom service URL.\n     * @param {boolean} hasCertificate - Was a certificate found.\n     * @returns {string} The DNS address for this service.\n     */\n    _mtlsServicePath(servicePath, customServicePath, hasCertificate) {\n        // If user provides a custom service path, return the current service\n        // path and do not attempt to add mtls subdomain:\n        if (customServicePath || !servicePath)\n            return servicePath;\n        if (typeof process !== 'undefined' &&\n            process?.env?.GOOGLE_API_USE_MTLS_ENDPOINT === 'never') {\n            // It was explicitly asked that mtls endpoint not be used:\n            return servicePath;\n        }\n        else if ((typeof process !== 'undefined' &&\n            process?.env?.GOOGLE_API_USE_MTLS_ENDPOINT === 'always') ||\n            hasCertificate) {\n            // Either auto-detect or explicit setting of endpoint:\n            return servicePath.replace('googleapis.com', 'mtls.googleapis.com');\n        }\n        return servicePath;\n    }\n    /**\n     * Creates a 'bytelength' function for a given proto message class.\n     *\n     * See {@link BundleDescriptor} about the meaning of the return value.\n     *\n     * @param {function} message - a constructor function that is generated by\n     *   protobuf.js. Assumes 'encoder' field in the message.\n     * @return {function(Object):number} - a function to compute the byte length\n     *   for an object.\n     */\n    static createByteLengthFunction(message) {\n        return gax.createByteLengthFunction(message);\n    }\n}\nexports.GrpcClient = GrpcClient;\nclass GoogleProtoFilesRoot extends protobuf.Root {\n    constructor(...args) {\n        super(...args);\n    }\n    // Causes the loading of an included proto to check if it is a common\n    // proto. If it is a common proto, use the bundled proto.\n    resolvePath(originPath, includePath) {\n        originPath = path.normalize(originPath);\n        includePath = path.normalize(includePath);\n        // Fully qualified paths don't need to be resolved.\n        if (path.isAbsolute(includePath)) {\n            if (!fs.existsSync(includePath)) {\n                throw new Error('The include `' + includePath + '` was not found.');\n            }\n            return includePath;\n        }\n        if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n            return path.join(googleProtoFilesDir, includePath);\n        }\n        return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n    }\n    static _findIncludePath(originPath, includePath) {\n        originPath = path.normalize(originPath);\n        includePath = path.normalize(includePath);\n        let current = originPath;\n        let found = fs.existsSync(path.join(current, includePath));\n        while (!found && current.length > 0) {\n            current = current.substring(0, current.lastIndexOf(path.sep));\n            found = fs.existsSync(path.join(current, includePath));\n        }\n        if (!found) {\n            throw new Error('The include `' + includePath + '` was not found.');\n        }\n        return path.join(current, includePath);\n    }\n}\nexports.GoogleProtoFilesRoot = GoogleProtoFilesRoot;\n//# sourceMappingURL=grpc.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}